Z:"Default"=00000013
 SEND,abcd12345 \\n,pw,,,0,
 SEND,alter session set nls_date_format='MM/DD/YYYY HH24:MI:SS';,format,,,
 SEND,set linesize 300 \\n,linesize,,,
 SEND,sudo su - oracle \\n,sudo to oracle,,,
 SEND,set linesize 300 \\n\r\nselect name||' - '||instance_name||'@'||host_name||' - '||DB_UNIQUE_NAME||' - '||version||' - '||open_mode||' - '||to_char(startup_time\,'DD-MON-YYYY HH24:MI:SS') || ' - '|| database_role from v$database\, v$instance; \\n,instance_INFO,,,0,
 SEND,stty erase ^? ,stty erase,,,
 SEND,set linesize 300 \\n\r\ncol machine for a40 \\n\r\nselect inst_id\, username\,count(*)\,machine from gv$session group by username\,inst_id\,machine order by inst_id; \\n,sessions count username,,,
 SEND,ps -eaf |egrep 'smon|lmon|tns|mrp'; env | grep ORA ,smon|tns,,,
 SEND,set linesize 300 \\n\r\nset pagesize 30 \\n\r\nselect inst_id\,service_id\,name from gv$active_services order by 1\,2; \\n,services,,,
 SEND,set linesize 300 \\n\r\ncol host_name for a40 \\n\r\ncol instance_role for a20 \\n\r\ncol startup_time for a25 \\n\r\nselect INST_ID\,INSTANCE_NAME\,host_name\,to_char(startup_time\,'DD-MON-YYYY HH24:MI:SS') startup_Time\, INSTANCE_ROLE from gv$instance order by inst_id; \\n\r\n,gv_inst_info,,,0,
 SEND,oramenu \\n,menu,,,
 SEND,select \r\n   sys_context('USERENV'\,'SID') \r\nfrom dual; \\n\r\n\r\nset linesize 132																\\n\r\nset pagesize 1000                                                               \\n\r\nset echo on                                                                     \\n\r\ncol rbs format a6                                                               \\n\r\ncol oracle_user format a12 heading "Oracle|Username"                            \\n\r\ncol sid format 99999 heading "Oracle|SID"                                       \\n\r\ncol serial# format 99999 heading "Oracle|Serial#"                               \\n\r\ncol unix_pid format a6 Heading "Unix|PID"                                       \\n\r\ncol Client_User format a12 Heading "Client|Username"                            \\n\r\ncol Unix_user format a12 Heading "Unix|Username"                                \\n\r\ncol Logon_time format a11 Heading "Login|Time"                                  \\n\r\ncol lock_wait  format a4 heading "Lock|Wait"                                    \\n\r\nselect                                                                          \\n\r\n       s.username  oracle_user\,                                                 \\n\r\n       s.osuser  client_user\,                                                   \\n\r\n       p.username unix_user\,                                                    \\n\r\n       s.status  status\,                                                        \\n\r\n       s.sid   sid\,                                                             \\n\r\n       s.serial# serial#\,                                                       \\n\r\n       p.spid    unix_pid\,                                                      \\n\r\n       to_char(s.logon_time\,'MM-DD HH24:MI') logon_time\,                        \\n\r\n       decode(s.lockwait\,NULL\,'No'\,'Yes') lock_wait                             \\n\r\nfrom v$process p\, v$session s                                                   \\n\r\nwhere s.paddr = p.addr(+)                                                       \\n\r\nand s.sid = (select sys_context('USERENV'\,'SID') from dual)                     \\n\r\norder by 1;                                                                     \\n,my_SID,,,0,
 SEND,\r\nset linesize 300  \\n\r\ncol machine for a50  \\n\r\ncol service_name for a25  \\n\r\nselect inst_id\,service_name\,count(*) from gv$session  group by inst_id\,service_name order by 1\,3; \\n,No.of_Conn's_for_Service,,,0,
 SEND,set linesize 300 \\n\r\ncol machine for a50 \\n\r\ncol service_name for a25 \\n\r\nselect inst_id\, username\,count(*)\,machine\,service_name from gv$session where service_name='&service_name' group by username\,inst_id\,machine\,service_name order by inst_id; \\n,Chk_connections_for_ServiceName,,,0,
 SEND,#sqlplus system/PW@GMR-scan-r5:1521/wporcp_be,tnsconn,,,0,
 SEND,sudo su - root    ,sudo to root,,,0,
 SEND,\r\n\r\nselect \\n\r\n(select 'Active Sessions in Inst 1 : '||count(*) from gv$session where status='ACTIVE' and INST_ID=1 and sql_id is not null and username not in ('SYS'\,'SYSTEM')) as c2 \\n\r\nfrom dual \\n\r\nunion \\n\r\nselect \\n\r\n(select 'Active Sessions in Inst 2 : '||count(*) from gv$session where status='ACTIVE' and INST_ID=2 and sql_id is not null and username not in ('SYS'\,'SYSTEM')) as c2 \\n\r\nfrom dual \\n\r\nunion \\n\r\nselect \\n\r\n(select 'Active Sessions in Inst 3 : '||count(*) from gv$session where status='ACTIVE' and INST_ID=3 and sql_id is not null and username not in ('SYS'\,'SYSTEM')) as c2 \\n\r\nfrom dual \\n\r\nunion \\n\r\nselect \\n\r\n(select 'Active Sessions in Inst 5 : '||count(*) from gv$session where status='ACTIVE' and INST_ID=5 and sql_id is not null and username not in ('SYS'\,'SYSTEM')) as c2 \\n\r\nfrom dual; \\n,GV_Active_Sess,,,0,
 SEND,alter session set current_schema=&User;,Set_User,,,0,
 SEND,export ORACLE_SID=$1,SID,,,0,
Z:"0_Default_1"=00000007
 SEND,set linesize 300 \\n\r\nalter session set nls_date_format='MM/DD/YYYY HH24:MI:SS'; \\n\r\ncompute sum of count(1) on username \\n \r\nbreak on username  \\n\r\nset feed on echo off 																															\\n\r\n pages 1000                                                                                                                        \\n\r\nshow parameter db_name                                                                                                                          \\n\r\nshow parameter instance_name                                                                                                                    \\n\r\ncol machine for a40                                                                                                                             \\n\r\nselect inst_id\,machine\,username\,count(1)\,status\,logon_time from gv$session where username not like 'DBSN%' and service_name='&Service_name'     \\n\r\ngroup by inst_id\,machine\,username\,status\,logon_time order by 1;                                                                                 \\n,Conn_details_for_Service_name,,,0,
 SEND,## cd $ORACLE_HOME/sqlplus/admin \\n\r\n## vi glogin.sql \\n\r\n## SET termout off \\n\r\n## DEFINE myv = 'Not connected' \\n\r\n## COLUMN myc new_value myv \\n\r\n## select user || '@' || global_name myc from global_name; \\n\r\n## SET sqlprompt '&myv:SQL> ' \\n\r\n## SET termout on \\n,glogin.sql,,,0,
 SEND,select inst_id\,service_name\,count(*) from gv$session  group by inst_id\,service_name order by 3 desc; \\n,Conn_Count_Desc,,,0,
 SEND,--ALTER SYSTEM ENABLE RESTRICTED SESSION;,Restri_Sess,,,0,
 SEND,-- alter system disable restricted session;,Disable_Rest_Sess,,,0,
 SEND,select sid from gv$session where SERVICE_NAME='&Service_NAME'; \\n,Find_SID_forServiceName,,,0,1,
 SEND,\r\nset linesize 300  \\n\r\ncol machine for a50  \\n\r\ncol service_name for a25  \\n\r\ncol username for a20 \\n\r\nselect inst_id\,service_name\,username\,count(*) from gv$session  group by inst_id\,service_name\,username  order by 1\,3 \\n,Conn_service_username,,,0,1,
Z:"12c_log"=00000001
 SEND,cd $ORACLE_BASE/diag/rdbms,alert_log,,,0,
Z:"ASM"=0000000c
 SEND,set linesize 300 \\n\r\ncol name for a30 \\n\r\n\r\n select NAME\, ALLOCATION_UNIT_SIZE\, STATE\, TYPE\, TOTAL_MB\, FREE_MB\,(FREE_MB/TOTAL_MB)*100 PCt_FREE from v$asm_diskgroup order by PCt_FREE ;  \\n\r\n\r\nselect NAME\, ALLOCATION_UNIT_SIZE\, STATE\, TYPE\, TOTAL_MB/1024 TOTAL_GB \,FREE_MB/1024 FREE_GB\,(FREE_MB/TOTAL_MB)*100 PCt_FREE from v$asm_diskgroup order by PCt_FREE ; \\n\r\n,SQL>asm_free,,,0,
 SEND,find +OMS_DATA undo* \\n,ASMCMD>find file,,,
 SEND,set linesize 300 \\n\r\ncol instance_name for a15 \\n\r\ncol SOFTWARE_VERSION for a15 \\n\r\ncol COMPATIBLE_VERSION for a15 \\n\r\nSELECT * FROM V$ASM_CLIENT; \\n,SQL>WhatInstances,,,
 SEND,set linesize 300 \\n\r\nselect * from gv$asm_operation;,rebalance_Status,,,
 SEND,BREAK ON report ON disk_group_name SKIP 1 \\n\r\nset pagesize 50 \\n\r\nset linesize 300 \\n\r\ncol DISK_GROUP_NAME for a20 \\n\r\ncol DISK_FILE_PATH for a50 \\n\r\ncol DISK_FILE_FAIL_GROUP for a40 \\n\r\ncol DISK_FILE_NAME for a25 \\n\r\nSELECT \\n\r\n    NVL(a.name\, '[CANDIDATE]')      disk_group_name \\n\r\n  \, b.path                          disk_file_path \\n\r\n  \, b.name                          disk_file_name \\n\r\n  \, b.failgroup                     disk_file_fail_group \\n\r\nFROM \\n\r\n    v$asm_diskgroup a RIGHT OUTER JOIN v$asm_disk b USING (group_number) \\n\r\nORDER BY \\n\r\n    a.name; \\n\r\n\r\n,SQL>asm_candidate,,,
 SEND,select path from v$asm_disk where header_status='FORMER' order by path;,SQL>check_former,,,
 SEND,set pagesize 100 \\n\r\nset linesize 300 \\n\r\ncol DISK_GROUP_NAME for a20 \\n\r\ncol DISK_FILE_PATH for a50 \\n\r\ncol DISK_FILE_FAIL_GROUP for a40 \\n\r\ncol DISK_FILE_NAME for a25 \\n\r\nSELECT \\n\r\n    NVL(a.name\, '[CANDIDATE]')      disk_group_name \\n\r\n  \, b.path                          disk_file_path \\n\r\n  \, b.name                          disk_file_name \\n\r\n  \, b.failgroup                     disk_file_fail_group \\n\r\nFROM \\n\r\n    v$asm_diskgroup a RIGHT OUTER JOIN v$asm_disk b USING (group_number) \\n\r\nORDER BY \\n\r\n    a.name; \\n\r\n\r\n\r\n\r\n\r\nSET TERMOUT OFF; \\n\r\nCOLUMN current_instance NEW_VALUE current_instance NOPRINT; \\n\r\nSELECT rpad(sys_context('USERENV'\, 'INSTANCE_NAME')\, 17) current_instance \\n\r\nFROM dual; \\n\r\nSET TERMOUT ON; \\n\r\n\r\nPROMPT  \\n\r\nPROMPT +------------------------------------------------------------------------+ \\n\r\nPROMPT | Report   : ASM Disk Groups                                             | \\n\r\nPROMPT | Instance : &current_instance                                           | \\n\r\nPROMPT +------------------------------------------------------------------------+ \\n\r\n \\n\r\nSET ECHO        OFF \\n\r\nSET FEEDBACK    6 \\n\r\nSET HEADING     ON \\n\r\nSET LINESIZE    180 \\n\r\nSET PAGESIZE    50000 \\n\r\nSET TERMOUT     ON \\n\r\nSET TIMING      OFF \\n\r\nSET TRIMOUT     ON \\n\r\nSET TRIMSPOOL   ON \\n\r\nSET VERIFY      OFF \\n\r\n\r\nCLEAR COLUMNS \\n\r\nCLEAR BREAKS \\n\r\nCLEAR COMPUTES \\n\r\n \\n\r\nCOLUMN group_name             FORMAT a25           HEAD 'Disk Group|Name' \\n\r\nCOLUMN sector_size            FORMAT 99\,999        HEAD 'Sector|Size' \\n\r\nCOLUMN block_size             FORMAT 99\,999        HEAD 'Block|Size' \\n\r\nCOLUMN allocation_unit_size   FORMAT 999\,999\,999   HEAD 'Allocation|Unit Size' \\n\r\nCOLUMN state                  FORMAT a11           HEAD 'State' \\n\r\nCOLUMN type                   FORMAT a6            HEAD 'Type' \\n\r\nCOLUMN total_mb               FORMAT 999\,999\,999   HEAD 'Total Size (MB)' \\n\r\nCOLUMN used_mb                FORMAT 999\,999\,999   HEAD 'Used Size (MB)' \\n\r\nCOLUMN pct_used               FORMAT 999.99        HEAD 'Pct. Used' \\n\r\n \\n\r\nBREAK ON report ON disk_group_name SKIP 1 \\n\r\n \\n\r\nCOMPUTE sum LABEL "Grand Total: " OF total_mb used_mb ON report \\n\r\n \\n\r\nSELECT \\n\r\n    name                                     group_name \\n\r\n  \, sector_size                              sector_size \\n\r\n  \, block_size                               block_size \\n\r\n  \, allocation_unit_size                     allocation_unit_size \\n\r\n  \, state                                    state \\n\r\n  \, type                                     type \\n\r\n  \, total_mb                                 total_mb \\n\r\n  \, (total_mb - free_mb)                     used_mb \\n\r\n  \, ROUND((1- (free_mb / total_mb))*100\, 2)  pct_used \\n\r\nFROM \\n\r\n    v$asm_diskgroup \\n\r\nWHERE \\n\r\n    total_mb != 0 \\n\r\nORDER BY \\n\r\n    name \\n\r\n/ \\n\r\n\r\n,SQL>ASM_DISKGROUPS_Info,,,0,
 SEND,select distinct GROUP_NUMBER\,db_name from gV$ASM_CLIENT where INSTANCE_NAME like '%&inst_name%' order by group_number;,check_Grp_number_For_Inst,,,
 SEND,select name\,group_number from v$asm_diskgroup; \\n,Name_Group#,,,
 SEND,set linesize 300 \\n\r\ncol path for a75 \\n\r\nselect name\,path from v$asm_disk where group_number=&GRP_Num; \\n,Name_Path_for_GrpNum,,,
 SEND,set linesize 300 \\n\r\ncol path for a60\\n\r\nselect a.group_number\,b.name\,a.path\,a.header_status from v$asm_disk a\,v$asm_diskgroup b where a.path in ('&PATH') and a.group_number=b.group_number; \\n,DG_Details_For_Given_Path,,,
 SEND,set linesize 300 \\n\r\nselect name||' - '||instance_name||'@'||host_name||' - '||DB_UNIQUE_NAME||' - '||version||' - '||open_mode||' - '||to_char(startup_time\,'DD-MON-YYYY HH24:MI:SS') || ' - '|| database_role from v$database\, v$instance; \\n,instance_INFO,,,
Z:"ASM_1"=00000006
 SEND,set linesize 300 \\n\r\nselect group_number\, name\,compatibility\, database_compatibility from v$asm_diskgroup; \\n,ASM_Compatibility_Version,,,0,
 SEND,# srvctl stop asm -n <NodeName> -i +ASM2 -o immediate \\n\r\n# srvctl stop asm -n <NodeName> -i +ASM2 -o immediate -f \\n,Stop_ASM_Instance,,,0,
 SEND,----alter diskgroup DATA0123 drop disk 'PROD_DATA0123' (; Example)\r\n----ALTER DISKGROUP testdb_data1 DROP DISK testdb_data1_0004\, testdb_data1_0005  REBALANCE POWER 11;,Drop_ASM_Disk,,,0,
 SEND,----alter diskgroup DATA0123 rebalance power 10 (; Example),Change_rebalance_Power,,,0,
 SEND,----CREATE DISKGROUP REDOSTBY01 EXTERNAL REDUNDANCY  DISK 'ORCL:DATA0123' SIZE 102397M  ATTRIBUTE 'compatible.asm'='12.1.0.0.0'\,'au_size'='1M' (; Example),Create_Ext_DiskGrp(12c),,,0,
 SEND,--alter diskgroup data01 add disk 'ORACLEL:PROD_DATA_21' name PROD_DATA_21 rebalance power 10;,ADD_DISK,,,0,
Z:"ASM_Performance"=00000002
 SEND,SET TERMOUT OFF; \\n\r\nCOLUMN current_instance NEW_VALUE current_instance NOPRINT; \\n\r\nSELECT rpad(sys_context('USERENV'\, 'INSTANCE_NAME')\, 17) current_instance FROM dual; \\n\r\nSET TERMOUT ON; \\n\r\n\r\nPROMPT  \\n\r\nPROMPT +------------------------------------------------------------------------+ \\n\r\nPROMPT | Report   : ASM Disk Performance                                        | \\n\r\nPROMPT | Instance : &current_instance                                           | \\n\r\nPROMPT +------------------------------------------------------------------------+ \\n\r\n\r\nSET ECHO        OFF \\n\r\nSET FEEDBACK    6 \\n\r\nSET HEADING     ON \\n\r\nSET LINESIZE    256 \\n\r\nSET PAGESIZE    50000 \\n\r\nSET TERMOUT     ON \\n\r\nSET TIMING      OFF \\n\r\nSET TRIMOUT     ON \\n\r\nSET TRIMSPOOL   ON \\n\r\nSET VERIFY      OFF \\n\r\n\r\nCLEAR COLUMNS \\n\r\nCLEAR BREAKS \\n\r\nCLEAR COMPUTES \\n\r\n\r\nCOLUMN disk_group_name    FORMAT a20                    HEAD 'Disk Group Name' \\n\r\nCOLUMN disk_path          FORMAT a20                    HEAD 'Disk Path' \\n\r\nCOLUMN reads              FORMAT 999\,999\,999\,999        HEAD 'Reads' \\n\r\nCOLUMN writes             FORMAT 999\,999\,999\,999        HEAD 'Writes' \\n\r\nCOLUMN read_errs          FORMAT 999\,999\,999            HEAD 'Read|Errors' \\n\r\nCOLUMN write_errs         FORMAT 999\,999\,999            HEAD 'Write|Errors' \\n\r\nCOLUMN read_time          FORMAT 999\,999\,999\,999        HEAD 'Read|Time' \\n\r\nCOLUMN write_time         FORMAT 999\,999\,999\,999        HEAD 'Write|Time' \\n\r\nCOLUMN bytes_read         FORMAT 999\,999\,999\,999\,999    HEAD 'Bytes|Read' \\n\r\nCOLUMN bytes_written      FORMAT 999\,999\,999\,999\,999    HEAD 'Bytes|Written' \\n\r\n\r\nBREAK ON report ON disk_group_name SKIP 2 \\n\r\n\r\nCOMPUTE sum LABEL ""              OF reads writes read_errs write_errs read_time write_time bytes_read bytes_written ON disk_group_name \\n\r\nCOMPUTE sum LABEL "Grand Total: " OF reads writes read_errs write_errs read_time write_time bytes_read bytes_written ON report \\n\r\n\r\nSELECT \\n\r\n    a.name                disk_group_name \\n\r\n  \, b.path                disk_path \\n\r\n  \, b.reads               reads \\n\r\n  \, b.writes              writes \\n\r\n  \, b.read_errs           read_errs  \\n\r\n  \, b.write_errs          write_errs \\n\r\n  \, b.read_time           read_time \\n\r\n  \, b.write_time          write_time \\n\r\n  \, b.bytes_read          bytes_read \\n\r\n  \, b.bytes_written       bytes_written \\n\r\nFROM \\n\r\n    v$asm_diskgroup a JOIN v$asm_disk b USING (group_number) \\n\r\nORDER BY \\n\r\n    a.name; \\n,DG_Disk_Performance,,,
 SEND,column "Diskgroup" format A30 \\n\r\ncolumn "Imbalance" format 99.9 Heading "Percent|Imbalance" \\n\r\ncolumn "Variance" format 99.9 Heading "Percent|Disk Size|Variance" \\n\r\ncolumn "MinFree" format 999.99 heading  "Minimum|Percent|Free" \\n\r\ncolumn "DiskCnt" format 9999 Heading "Disk|Count" \\n\r\ncolumn "Type" format A10 Heading "Diskgroup|Redundancy" \\n\r\n\r\nSELECT g.name "Diskgroup"\, \\n\r\n100*(max((d.total_mb-d.free_mb)/d.total_mb)-min((d.total_mb-d.free_mb)/d.total_mb))/max((d.total_mb-d.free_mb)/d.total_mb) "Imbalance"\, \\n\r\n100*(max(d.total_mb)-min(d.total_mb))/max(d.total_mb) "Variance"\, \\n\r\n100*(min(d.free_mb/d.total_mb)) "MinFree"\, \\n\r\ncount(*) "DiskCnt"\, \\n\r\ng.type "Type" \\n\r\nFROM v$asm_disk d\, v$asm_diskgroup g \\n\r\nWHERE d.group_number = g.group_number and \\n\r\nd.group_number <> 0 and \\n\r\nd.state = 'NORMAL' and \\n\r\nd.mount_status = 'CACHED' \\n\r\nGROUP BY g.name\, g.type; \\n,Rebalance_Status,,,
Z:"ASM_Reports"=00000004
 SEND,set lines 192 \\n\r\nset pages 2000 \\n\r\ncol GROUP_NUMBER format 9999 heading"GRP_NO" \\n\r\ncol "GRP_NAME" format a24 \\n\r\ncol "DSK_NAME" format a24 \\n\r\ncol path format a80 \\n\r\ncol ALLOC_MB format 999\,999\,999 \\n\r\ncol FREE_MB format 999\,999\,999 \\n\r\ncol PCT_FREE format 999.00 \\n\r\n\r\nselect d.GROUP_NUMBER\,g.name "GRP_NAME"\,d.name "DSK_NAME"\,d.path\,d.OS_MB "ALLOC_MB"\,d.free_MB "FREE_MB"\,d.free_MB*100/d.OS_MB "PCT_FREE" \\n\r\nfrom V$asm_disk d \, v$asm_diskgroup g where d.GROUP_NUMBER=g.GROUP_NUMBER and g.name like '&Diskgroup_Name';  \\n,DiskGrp_Details_for_Excel,,,
 SEND,set lines 192 \\n\r\nset pages 2000 \\n\r\ncol GROUP_NUMBER format 9999 heading"GRP_NO" \\n\r\ncol "GRP_NAME" format a24 \\n\r\ncol "DSK_NAME" format a24 \\n\r\ncol path format a80 \\n\r\ncol ALLOC_MB format 999\,999\,999 \\n\r\ncol FREE_MB format 999\,999\,999 \\n\r\ncol PCT_FREE format 999.00 \\n\r\n\r\nselect d.GROUP_NUMBER\, \\n\r\ng.name "GRP_NAME"\, \\n\r\nd.name "DSK_NAME"\, \\n\r\nd.path\, \\n\r\nd.TOTAL_MB "ALLOC_MB"\, \\n\r\nd.free_MB "FREE_MB"\, \\n\r\nd.free_MB*100/d.TOTAL_MB "PCT_FREE"  \\n\r\nfrom V$asm_disk d \,  \\n\r\nv$asm_diskgroup g  \\n\r\nwhere d.GROUP_NUMBER=g.GROUP_NUMBER and g.name like '&Diskgroup_Name'; \\n,Diskgroup_Details_for_Excel_10g,,,
 SEND,#oracleasm querydisk -p PROD_CRS_1_1,oracleasm_path,,,0,
 SEND,set lines 192 \\n\r\nset pages 2000 \\n\r\ncol GROUP_NUMBER format 9999 heading"GRP_NO" \\n\r\ncol "GRP_NAME" format a24 \\n\r\ncol "DSK_NAME" format a24 \\n\r\ncol path format a80 \\n\r\ncol ALLOC_MB format 999\,999\,999 \\n\r\ncol FREE_MB format 999\,999\,999 \\n\r\ncol PCT_FREE format 999.00 \\n\r\n\r\nselect d.GROUP_NUMBER\,g.name "GRP_NAME"\,d.name "DSK_NAME"\,d.path\,d.OS_MB "ALLOC_MB"\,d.free_MB "FREE_MB"\,d.free_MB*100/d.OS_MB "PCT_FREE" \\n\r\nfrom V$asm_disk d \, v$asm_diskgroup g where d.GROUP_NUMBER=g.GROUP_NUMBER and g.name like '&Diskgroup_Name' order by 1;  \\n,DiskGrp_Details_for_Excel_Tmp,,,0,
Z:"AWR"=0000000b
 SEND,@?/rdbms/admin/awrddrpt.sql,AWR_Diff_NonRAC,,,
 SEND,@?/rdbms/admin/awrddrpi.sql  ,awrdiff_RAC,,,
 SEND,@?/rdbms/admin/awrrpt,AWR_NonRAC,,,
 SEND,@?/rdbms/admin/awrrpti,AWR_RAC,,,
 SEND,@?/rdbms/admin/awrgrpt.sql,Global_AWR_RAC_Report,,,
 SEND,@?/rdbms/admin/ashrpt.sql,ashrpt,,,0,
 SEND,@?/rdbms/admin/awrgdrpt.sql,GLOBAL_AWR_RAC_Diff_Report,,,0,
 SEND,@?/rdbms/admin/awrsqrpt.sql,AWR_Report_Single_Select_Stmt,,,0,
 SEND,@?/rdbms/admin/addmrpt,ADDM,,,0,
 SEND,# Generate AWR report for Every Snapshot \\n\r\n# Check with Owner of the Buttons for Script \\n\r\n#./auto_awr.sh orcl '2015-03-26 06:00:00' '2015-03-26 09:00:00',Auto_Awr.sh,,,0,
 SEND,set linesize 300 \\n\r\nselect name||' - '||instance_name||'@'||host_name||' - '||DB_UNIQUE_NAME||' - '||version||' - '||open_mode||' - '||to_char(startup_time\,'DD-MON-YYYY HH24:MI:SS') || ' - '|| database_role from v$database\, v$instance; \\n,instance_INFO,,,0,
Z:"AWR_Retention"=00000006
 SEND,set linesize 300 \\n\r\n select extract( day from snap_interval) *24*60+extract( hour from snap_interval) *60+extract( minute from snap_interval ) snapshot_interval\, \\n\r\n    extract( day from retention) *24*60+extract( hour from retention) *60+extract( minute from retention ) retention_interval\, \\n\r\n       topnsql \\n\r\nfrom dba_hist_wr_control;  \\n\r\n\r\nset linesize 300 \\n\r\ncol snap_interval for a30 \\n\r\ncol retention for a30 \\n\r\ncol TOPNSQL for a20 \\n\r\nselect * from dba_hist_wr_control; \\n\r\n,chk_AWR_Retn,,,0,
 SEND,select dbid from v$database; \\n,chk_DBID,,,0,
 SEND,\r\n\r\n-- Example exec dbms_workload_repository.modify_snapshot_settings(retention=>144000\, interval=>10\, dbid=>1234567890); \\n\r\n-- retention=>144000 --> for 100 days (100*24*60) \\n\r\n-- interval -> 10 --> 10 Days \\n\r\n\r\nexec dbms_workload_repository.modify_snapshot_settings(retention=>&Provide_in_min_for_retention\, interval=>&interval\, dbid=>&dbid); \\n,Change_AWR_Retn,,,0,
 SEND,---EXEC dbms_workload_repository.create_snapshot;,Create_Snapshot_Manually,,,0,
 SEND,set linesize 300 \\n\r\nset pagesize 100 \\n\r\n select distinct snap_id\,min(BEGIN_INTERVAL_TIME)\,max(END_INTERVAL_TIME)  \\n\r\n from dba_hist_snapshot where BEGIN_INTERVAL_TIME> sysdate-4/24 group by snap_id order by 1; \\n\r\n\r\nselect INSTANCE_NUMBER\,SNAP_ID\,BEGIN_INTERVAL_TIME\,END_INTERVAL_TIME from dba_hist_snapshot where BEGIN_INTERVAL_TIME> sysdate-1/24  order by 1\,2; \\n,Snapid_details_for_last_fours,,,0,
 SEND,--begin  \\n\r\n--dbms_workload_repository.modify_snapshot_settings( \\n\r\n--retention => 144000\, \\n\r\n--interval =>15 \, \\n\r\n--topnsql =>100 \, \\n\r\n--dbid => 2304206050); \\n\r\n--end; \\n\r\n--/ \\n,Change_TOPNSQL,,,0,
Z:"blocking"=0000000b
 SEND,set linesize 300 \\n\r\nselect B.USERNAME ||' ('||B.SID||'\,'||B.SERIAL#||'\,@'||B.INST_ID||') is Currently '||B.STATUS||' for last '||B.LAST_CALL_ET||' Sec and it''s BLOCKING user '|| W.USERNAME|| ' ('|\r\n|W.SID||'\,'||W.SERIAL#||'\,@'||W.INST_ID||')' from \\n\r\n(select INST_ID\,SID\,SERIAL#\,USERNAME\,STATUS\,BLOCKING_INSTANCE\,BLOCKING_SESSION\, LAST_CALL_ET from gv$session where BLOCKING_SESSION >0) W\, \\n\r\n(select INST_ID\,SID\,SERIAL#\,USERNAME\,STATUS\,LAST_CALL_ET from gv$session ) B \\n\r\nwhere W.BLOCKING_INSTANCE=B.INST_ID and W.BLOCKING_SESSION=B.SID; \\n,blocking_ses's,,,
 SEND,set linesize 300 \\n\r\nset pagesize 100 \\n\r\ncol machine for a50 \\n\r\ncol event for a50 \\n\r\ncol username for a25 \\n\r\nselect inst_id\,sid\,serial#\,username\,event\,status\,sql_id\,BLOCKING_SESSION\,machine from gv$session \\n\r\nwhere event like '%lock%' or event like '%latch%' or event like '%buffer%' or event='latch: row cache objects' or event='enq: TM - contention' \\n\r\nor event='enq:_TX_-_index_contention' \\n\r\nand type!='BACKGROUND' order by 1; \\n,bloc_Sess_Event,,,
 SEND,set head on \\n\r\nPROMPT ##################################################################################### \\n\r\nPROMPT SQLs INVOLVED IN BLOCKING \\n\r\nPROMPT ##################################################################################### \\n\r\nset pagesize 100 \\n\r\nset linesize 300 \\n\r\ncol sql_text for a100 \\n\r\ncol SQL_ID for a30 \\n\r\n \\n\r\n\r\nSELECT distinct /*+ RULE */ \\n\r\n  SQL_ID\, sql_text \\n\r\n  FROM GV$SQL \\n\r\nWHERE SQL_ID IN ( \\n\r\nselect SQL_ID   \\n\r\n        from  \\n\r\n        (select SQL_ID from gv$session where BLOCKING_SESSION >0) \\n\r\nunion \\n\r\nselect B.SQL_ID    --Blocker Current SQL \\n\r\n        from  \\n\r\n        (select INST_ID\,SID\,BLOCKING_INSTANCE\,BLOCKING_SESSION from gv$session where BLOCKING_SESSION >0) W\, \\n\r\n        (select INST_ID\,SID\,SERIAL#\,SQL_ID from gv$session ) B \\n\r\n        where W.BLOCKING_INSTANCE=B.INST_ID and W.BLOCKING_SESSION=B.SID \\n\r\nunion \\n\r\nselect B.PREV_SQL_ID --Blocker PRIV SQL \\n\r\n        from  \\n\r\n        (select INST_ID\,SID\,BLOCKING_INSTANCE\,BLOCKING_SESSION from gv$session where BLOCKING_SESSION >0) W\, \\n\r\n        (select INST_ID\,SID\,SERIAL#\,PREV_SQL_ID from gv$session ) B \\n\r\n        where   W.BLOCKING_INSTANCE=B.INST_ID and W.BLOCKING_SESSION=B.SID \\n\r\n) ORDER BY sql_id; \\n,SQLs INVOLVED IN BLOCKING,,,
 SEND,col ltype for a30 \\n\r\ncol holder for a25 \\n\r\ncol waiter for a25 \\n\r\nset linesize 300 \\n \r\n\r\nSELECT /*+ RULE */ \\n\r\n         DISTINCT o.object_name\,    sh.username \\n\r\n                               || '(' \\n\r\n                               || sh.sid \\n\r\n                               || ')' Holder\, \\n\r\n                   sw.username \\n\r\n                || '(' \\n\r\n                || sw.sid \\n\r\n                || ')' Waiter\, \\n\r\n                DECODE ( \\n\r\n                   lh.lmode\, \\n\r\n                   1\, 'NULL'\, \\n\r\n                   2\, 'row share'\, \\n\r\n                   3\, 'row exclusive'\, \\n\r\n                   4\, 'share'\, \\n\r\n                   5\, 'share row exclusive'\, \\n\r\n                   6\, 'exclusive' \\n\r\n                ) ltype \\n\r\n           FROM all_objects o\, gv$session sw\, gv$lock lw\, gv$session sh\, gv$lock lh \\n\r\n          WHERE lh.id1 = o.object_id \\n\r\n            AND lh.id1 = lw.id1 \\n\r\n            AND sh.sid = lh.sid \\n\r\n            AND sw.sid = lw.sid \\n\r\n            AND sh.lockwait IS NULL \\n\r\n            AND sw.lockwait IS NOT NULL \\n\r\n            AND lh.TYPE = 'TM' \\n\r\n            AND lw.TYPE = 'TM'; \\n,Objects involved in Blocking Lock,,,
 SEND,set linesize 300 \\n\r\ncol object for a30 \\n\r\n\r\nSELECT  l.inst_id\,   \\n\r\nSUBSTR(L.ORACLE_USERNAME\,1\,8) ORA_USER\,   \\n \r\nSUBSTR(L.SESSION_ID\,1\,5) SID\,   \\n\r\nS.serial#\,   \\n\r\nSUBSTR(O.OWNER||'.'||O.OBJECT_NAME\,1\,40) OBJECT\, P.SPID OS_PID\,   \\n\r\nDECODE(L.LOCKED_MODE\,   0\,'NONE'\,   \\n\r\n1\,'NULL'\,   \\n\r\n2\,'ROW SHARE'\,   \\n\r\n3\,'ROW EXCLUSIVE'\,   \\n\r\n4\,'SHARE'\,   \\n\r\n5\,'SHARE ROW EXCLUSIVE'\,   \\n\r\n6\,'EXCLUSIVE'\,   \\n\r\nNULL) LOCK_MODE   \\n\r\nFROM    sys.GV_$LOCKED_OBJECT L   \\n\r\n\, DBA_OBJECTS O   \\n\r\n\, sys.GV_$SESSION S   \\n\r\n\, sys.GV_$PROCESS P   \\n\r\nWHERE     L.OBJECT_ID = O.OBJECT_ID   \\n\r\n  and     l.inst_id = s.inst_id   \\n\r\n  AND     L.SESSION_ID = S.SID   \\n\r\n  and     s.inst_id = p.inst_id   \\n\r\n  AND     S.PADDR = P.ADDR(+)   \\n\r\norder by l.inst_id;  \\n,Find_SID_PID_for_Table_Lock,,,
 SEND,SET ECHO        OFF \\n\r\nSET FEEDBACK    6 \\n\r\nSET HEADING     ON \\n\r\nSET LINESIZE    256 \\n\r\nSET PAGESIZE    50000 \\n\r\nSET TERMOUT     ON \\n\r\nSET TIMING      OFF \\n\r\nSET TRIMOUT     ON \\n\r\nSET TRIMSPOOL   ON \\n\r\nSET VERIFY      OFF \\n\r\n\r\nCLEAR COLUMNS \\n\r\nCLEAR BREAKS \\n\r\nCLEAR COMPUTES \\n\r\n\r\nCOLUMN sid                FORMAT 999999     HEADING 'SID' \\n\r\nCOLUMN serial_id          FORMAT 99999999   HEADING 'Serial ID' \\n\r\nCOLUMN oracle_username    FORMAT a18        HEADING 'Oracle User' \\n\r\nCOLUMN logon_time         FORMAT a18        HEADING 'Login Time' \\n\r\nCOLUMN owner              FORMAT a20        HEADING 'Owner' \\n\r\nCOLUMN object_type        FORMAT a16        HEADING 'Object Type' \\n\r\nCOLUMN object_name        FORMAT a25        HEADING 'Object Name' \\n\r\nCOLUMN locked_mode        FORMAT a11        HEADING 'Locked Mode' \\n\r\n\r\nprompt  \\n\r\nprompt +----------------------------------------------------+ \\n\r\nprompt | Table Locking Information                          | \\n\r\nprompt +----------------------------------------------------+ \\n\r\n\r\nSELECT \\n\r\n    a.session_id                    sid \\n\r\n  \, c.serial#                       serial_id \\n\r\n  \, a.oracle_username               oracle_username \\n\r\n  \, TO_CHAR( \\n\r\n      c.logon_time\,'mm/dd/yy hh24:mi:ss' \\n\r\n    )                               logon_time \\n\r\n  \, b.owner                         owner \\n\r\n  \, b.object_type                   object_type \\n\r\n  \, b.object_name                   object_name \\n\r\n  \, DECODE( \\n\r\n        a.locked_mode \\n\r\n      \, 0\, 'None' \\n\r\n      \, 1\, 'Null' \\n\r\n      \, 2\, 'Row-S' \\n\r\n      \, 3\, 'Row-X' \\n\r\n      \, 4\, 'Share' \\n\r\n      \, 5\, 'S/Row-X' \\n\r\n      \, 6\, 'Exclusive' \\n\r\n    )                               locked_mode \\n\r\nFROM \\n \r\n    v$locked_object a \\n\r\n  \, dba_objects b \\n\r\n  \, v$session c \\n\r\nWHERE \\n\r\n      a.object_id  = b.object_id \\n\r\n  AND a.session_id = c.sid \\n\r\nORDER BY \\n\r\n    b.owner \\n\r\n  \, b.object_type \\n\r\n  \, b.object_name; \\n\r\n,Table_Lock_info,,,0,
 SEND,set linesize 300\\n\r\nselect sid\,blocking_session\,username\,status\,machine\,sql_id from gv$session where blocking_session is not null and username='&USERNAME' order by BLOCKING_SESSION; \\n,list_of_Blocking_Sess's,,,
 SEND,set linesize 300 \\n\r\n col event for a40 \\n\r\n col machine for a30 \\n\r\n col program for a30 \\n\r\n \r\n select SID\,BLOCKING_SESSION\,event\,machine\,OSUSER\,PROGRAM\,status\,LAST_CALL_ET/60 IN_MIN from v$session where sid=&SID; \\n,Blocking_Session_for_SID,,,
 SEND, select distinct sql_id\,count(*) from gv$session where sid in (select blocking_session from gv$session where blocking_session is not  null) group by sql_id; \\n,Blocking_Count,,,0,
 SEND,\r\nset serveroutput on \\n\r\nset feedback off \\n\r\nset linesize 300 \\n\r\n\r\ndeclare \\n\r\nblockcount number; \\n\r\nsqlreport varchar(3000); \\n\r\nsqloutput varchar(5000); \\n\r\nv_rec varchar(3000); \\n\r\n\r\ncursor blk_curs is select B.USERNAME BUSER\,B.SID BSID\,B.SERIAL# BSERIAL\,B.INST_ID BID\,B.STATUS BSTAT\,B.LAST_CALL_ET BLAST\,W.USERNAME WUSER\,W.SID WSID\,W.SERIAL# WSERIAL\,W.INST_ID WID  \\n\r\nfrom (select INST_ID\,SID\,SERIAL#\,USERNAME\,STATUS\,BLOCKING_INSTANCE\,BLOCKING_SESSION\, LAST_CALL_ET from gv$session where BLOCKING_SESSION >0) W\,  \\n\r\n(select INST_ID\,SID\,SERIAL#\,USERNAME\,STATUS\,LAST_CALL_ET from gv$session ) B  \\n\r\nwhere W.BLOCKING_INSTANCE=B.INST_ID and W.BLOCKING_SESSION=B.SID and B.username not in ('SYS'\,'SYSTEM'\,'DBSNMP'\,'RMAN'); \\n\r\ncursor distval is select distinct B.SID CSID\, B.USERNAME CUSER from (select INST_ID\,SID\,SERIAL#\,USERNAME\,STATUS\,BLOCKING_INSTANCE\,BLOCKING_SESSION\, LAST_CALL_ET  \\n\r\nfrom gv$session where BLOCKING_SESSION >0) W\, (select INST_ID\,SID\,SERIAL#\,USERNAME\,STATUS\,LAST_CALL_ET from gv$session ) B  \\n\r\nwhere W.BLOCKING_INSTANCE=B.INST_ID and W.BLOCKING_SESSION=B.SID and B.username not in ('SYS'\,'SYSTEM'\,'DBSNMP'\,'RMAN'); \\n\r\ncursor killcurs(v in varchar\, b in number) is select SID \,serial# SERIAL\,inst_id \,username \,to_char(logon_time\,'''DD-MON-YYYY HH24-MI-SS''') OTIME\,event\,status \,machine \,round(LAST_CALL_ET/60\,2) OMIN  \\n\r\nFROM gv$session where username is not null and username=v and sid=b order by inst_id; \\n\r\nbegin \\n\r\nDBMS_OUTPUT.put_line('Checking for blocking sessions on this database'); \\n\r\nDBMS_OUTPUT.put_line('-----------------------------------------------'); \\n\r\nselect count(*) into blockcount from (select * from gv$session where BLOCKING_SESSION >0) W\, \\n\r\n(select * from gv$session ) B where W.BLOCKING_INSTANCE=B.INST_ID and W.BLOCKING_SESSION=B.SID and B.username not in ('SYS'\,'SYSTEM'\,'DBSNMP'\,'RMAN'); \\n\r\n	IF blockcount > 0 THEN \\n\r\n		DBMS_OUTPUT.put_line('Found blocking sessions -> Fetching report for the same'); \\n\r\n		DBMS_OUTPUT.put_line('-------------------------------------------------------'); \\n\r\n		for v_rec in blk_curs LOOP \\n\r\n		dbms_output.put_line(v_rec.BUSER ||' ('||v_rec.BSID||'\,'||v_rec.BSERIAL||'\,@'||v_rec.BID||') is Currently '||v_rec.BSTAT||' for last '||v_rec.BLAST||' Sec and it''s BLOCKING user '|| v_rec.WUSER||' ('||v_rec.WSID||'\,'||v_rec.WSERIAL||'\,@'||v_rec.WID||')'); \\n\r\n		end loop; \\n\r\n		DBMS_OUTPUT.put_line('-'); \\n\r\n		DBMS_OUTPUT.put_line('-'); \\n\r\n		DBMS_OUTPUT.put_line('Further details on blocking sessions -> includes kill script of blocking session'); \\n\r\n		DBMS_OUTPUT.put_line('--------------------------------------------------------------------------------'); \\n\r\n		for v_rec2 in distval LOOP \\n\r\n			for v_rec3 in killcurs(v_rec2.CUSER\, v_rec2.CSID) loop \\n\r\n			dbms_output.put_line('alter system kill session '''||v_rec3.SID|| '\,' || v_rec3.SERIAL||'\,@'||v_rec3.inst_id|| ''' immediate; '||v_rec3.username||' '||v_rec3.OTIME||' '|| v_rec3.event||' '||v_rec3.status||' '||v_rec3.machine||' '||v_rec3.OMIN); \\n\r\n			end loop; \\n\r\n		end loop; \\n\r\n		DBMS_OUTPUT.put_line('-'); \\n\r\n		DBMS_OUTPUT.put_line('-'); \\n\r\n	ELSE \\n\r\n		DBMS_OUTPUT.put_line('-'); \\n\r\n		DBMS_OUTPUT.put_line('-'); \\n\r\n		DBMS_OUTPUT.put_line('Hurrey !!! No blocking sessions found'); \\n\r\n		DBMS_OUTPUT.put_line('-'); \\n\r\n		DBMS_OUTPUT.put_line('-'); \\n\r\n	END IF; \\n\r\nEND; \\n\r\n/ \\n\r\n,Kill_blocking_Session,,,0,
 SEND,set verify off lines 130 pages 1000 \\n\r\n\r\nselect b.sid\,b.serial#\,b.machine\,b.terminal\,b.username\,b.status\,b.osuser\,b.sql_id\,a.sql_text      \r\nfrom v$sqlarea a\,v$session b \r\nwhere a.address = b.sql_address and   a.hash_value = b.sql_hash_value and   b.sid = &sid;  \\n,findsql,,,0,1,
Z:"Busy"=00000001
 SEND,\r\nset linesize 300 \\n\r\ncol object_type for a15    \\n  \r\n\r\nselect * from ( \\n\r\nselect owner\,object_name\,subobject_name\,object_type\,tablespace_name\,value \\n\r\nfrom v$segment_statistics \\n\r\nwhere statistic_name ='buffer busy waits' \\n\r\norder by value DESC) \\n\r\nwhere rownum <= 10; \\n,Segment_Busy,,,0,
Z:"Code_Review_Questions"=00000001
 SEND,---1. Implementation Window  ?																\\n\r\n---2. What is the impact to the current applications during the change window ?             \\n\r\n---3. Is there any DBMS or scheduler job dependent on these New tables or DDL changes?      \\n\r\n---4. Is the code and performance of the queries are tested in QA environment ?             \\n\r\n---5. How the data flow happensfor the new tables ?                                         \\n\r\n---6. How much data flow happens per day ?                                                  \\n\r\n---7. Any Purge plan on these tables?                                                       \\n\r\n---8. What is the functionality change we are implementing ?                                \\n\r\n---9. what is rollback plan?                                                                \\n\r\n,Code_Review_Questions,,,0,
Z:"constraints"=00000002
 SEND,-- ALTER TABLE schemaname.table_name \r\nDISABLE CONSTRAINT constraint_name;,Disable_FK,,,0,
 SEND,--ALTER TABLE scott.emp enable novalidate  CONSTRAINT emp_FK_PROFILE ;,Enable_FK_Novalidate,,,0,1,
Z:"Control"=00000001
 SEND,set linesize 300 \\n\r\ncol name for a175 \\n\r\nselect inst_id\,name from gv$controlfile order by inst_id; \\n,controlfile_info,,,
Z:"ControlFile"=00000002
 SEND,SET TERMOUT OFF; \\n\r\nCOLUMN current_instance NEW_VALUE current_instance NOPRINT; \\n\r\nSELECT rpad(instance_name\, 17) current_instance FROM v$instance; \\n\r\nSET TERMOUT ON; \\n\r\n\r\nPROMPT  \\n\r\nPROMPT +------------------------------------------------------------------------+ \\n\r\nPROMPT | Report   : Control File Records                                        | \\n\r\nPROMPT | Instance : &current_instance                                           | \\n\r\nPROMPT +------------------------------------------------------------------------+ \\n\r\n\r\nSET ECHO        OFF \\n\r\nSET FEEDBACK    6 \\n\r\nSET HEADING     ON \\n\r\nSET LINESIZE    180 \\n\r\nSET PAGESIZE    50000 \\n\r\nSET TERMOUT     ON \\n\r\nSET TIMING      OFF \\n\r\nSET TRIMOUT     ON \\n\r\nSET TRIMSPOOL   ON \\n\r\nSET VERIFY      OFF \\n\r\n\r\nCLEAR COLUMNS \\n\r\nCLEAR BREAKS \\n\r\nCLEAR COMPUTES \\n\r\n\r\nCOLUMN type           FORMAT           a30   HEADING "Record Section Type" \\n\r\nCOLUMN record_size    FORMAT       999\,999   HEADING "Record Size|(in bytes)" \\n\r\nCOLUMN records_total  FORMAT       999\,999   HEADING "Records Allocated" \\n\r\nCOLUMN bytes_alloc    FORMAT   999\,999\,999   HEADING "Bytes Allocated" \\n\r\nCOLUMN records_used   FORMAT       999\,999   HEADING "Records Used" \\n\r\nCOLUMN bytes_used     FORMAT   999\,999\,999   HEADING "Bytes Used" \\n\r\nCOLUMN pct_used       FORMAT           B999  HEADING "% Used" \\n\r\nCOLUMN first_index                           HEADING "First Index" \\n\r\nCOLUMN last_index                            HEADING "Last Index" \\n\r\nCOLUMN last_recid                            HEADING "Last RecID" \\n\r\n\r\nBREAK ON report \\n\r\n\r\nCOMPUTE sum OF records_total ON report \\n\r\nCOMPUTE sum OF bytes_alloc   ON report \\n\r\nCOMPUTE sum OF records_used  ON report \\n\r\nCOMPUTE sum OF bytes_used    ON report \\n\r\nCOMPUTE avg OF pct_used      ON report \\n\r\n\r\nSELECT \\n\r\n    type \\n\r\n  \, record_size \\n\r\n  \, records_total \\n\r\n  \, (records_total * record_size) bytes_alloc \\n\r\n  \, records_used \\n\r\n  \, (records_used * record_size) bytes_used \\n\r\n  \, NVL(records_used/records_total * 100\, 0) pct_used \\n\r\n  \, first_index \\n\r\n  \, last_index \\n\r\n  \, last_recid \\n\r\nFROM v$controlfile_record_section \\n\r\nORDER BY type; \\n\r\n\r\n\r\n,ControlFile_Records,,,
 SEND,SET TERMOUT OFF; \\n\r\nCOLUMN current_instance NEW_VALUE current_instance NOPRINT; \\n\r\nSELECT rpad(instance_name\, 17) current_instance FROM v$instance; \\n\r\nSET TERMOUT ON; \\n\r\n\r\nPROMPT  \\n\r\nPROMPT +------------------------------------------------------------------------+ \\n\r\nPROMPT | Report   : Control Files                                               | \\n\r\nPROMPT | Instance : &current_instance                                           | \\n\r\nPROMPT +------------------------------------------------------------------------+ \\n\r\n\r\nSET ECHO        OFF \\n\r\nSET FEEDBACK    6 \\n\r\nSET HEADING     ON \\n\r\nSET LINESIZE    256 \\n\r\nSET PAGESIZE    50000 \\n\r\nSET TERMOUT     ON \\n\r\nSET TIMING      OFF \\n\r\nSET TRIMOUT     ON \\n\r\nSET TRIMSPOOL   ON \\n\r\nSET VERIFY      OFF \\n\r\n\r\nCLEAR COLUMNS \\n\r\nCLEAR BREAKS \\n\r\nCLEAR COMPUTES \\n\r\n\r\nCOLUMN name       FORMAT a85    HEADING "Controlfile Name" \\n\r\nCOLUMN status                   HEADING "Status" \\n\r\n\r\nSELECT \\n\r\n    name \\n\r\n  \, LPAD(status\, 7) status \\n\r\nFROM v$controlfile \\n\r\nORDER BY name; \\n\r\n\r\n,CF_Names,,,
Z:"Database_info"=00000005
 SEND,SET TERMOUT OFF; \\n\r\nCOLUMN current_instance NEW_VALUE current_instance NOPRINT; \\n\r\nSELECT rpad(instance_name\, 17) current_instance FROM v$instance; \\n\r\nSET TERMOUT ON; \\n\r\n\r\nPROMPT  \\n\r\nPROMPT +------------------------------------------------------------------------+ \\n\r\nPROMPT | Report   : Database Options                                            | \\n\r\nPROMPT | Instance : &current_instance                                           | \\n\r\nPROMPT +------------------------------------------------------------------------+ \\n\r\n\r\nSET ECHO        OFF \\n\r\nSET FEEDBACK    6 \\n\r\nSET HEADING     ON \\n\r\nSET LINESIZE    180 \\n\r\nSET PAGESIZE    50000 \\n\r\nSET TERMOUT     ON \\n\r\nSET TIMING      OFF \\n\r\nSET TRIMOUT     ON \\n\r\nSET TRIMSPOOL   ON \\n\r\nSET VERIFY      OFF \\n\r\n\r\nCLEAR COLUMNS \\n\r\nCLEAR BREAKS \\n\r\nCLEAR COMPUTES \\n\r\n\r\nCOLUMN parameter  FORMAT a45   HEADING 'Option Name' \\n\r\nCOLUMN value      FORMAT a10   HEADING 'Installed?' \\n\r\n\r\nSELECT \\n\r\n    parameter \\n\r\n  \, value \\n\r\nFROM \\n\r\n    v$option \\n\r\nORDER BY \\n\r\n    parameter; \\n\r\n\r\n,Database_Options,,,
 SEND,COL DIRECTORY_PATH FOR A90 \\n\r\nCOL DIRECTORY_NAME FOR A60 \\n\r\nSELECT DIRECTORY_NAME\,DIRECTORY_PATH FROM DBA_DIRECTORIES; \\n,DIRECTORIES,,,0,
 SEND,set linesize 300 \\n\r\ncol parameter for a30 \\n\r\ncol value for a20 \\n\r\nselect * from v$nls_parameters where parameter in ('NLS_CHARACTERSET'); \\n,nls_parameters,,,0,
 SEND,set linesize 300 \\n\r\nselect object_type \, count(*) from dba_objects where owner=upper('&owner') group by object_type; \\n,OBJECT_TYPE_COUNT,,,0,
 SEND,set linesize 300 \\n\r\ncol COMP_NAME for a40   \\n\r\nselect comp_name\, version\, status from dba_registry; \\n,dba_registry,,,0,
Z:"dba_jobs"=0000000b
 SEND,select job\,log_user\,last_date from dba_jobs where broken='Y'; \\n,chk_broken_jobs,,,
 SEND,--exec dbms_ijob.broken(5ksdfkkdf98\,false);  commit;,unbroke_job,,,
 SEND,set linesize 300 \\n\r\nset pagesize 100 \\n\r\ncol what for a100 \\n\r\nselect log_user\,what\,broken\,to_char(last_date\,'DD-MON-YYYY HH24:MI:SS') from dba_jobs where job='&Job_Number'; \\n,chk_job_Detais,,,
 SEND,SELECT 'BEGIN DBMS_iJOB.next_date (job => '|| job|| '\, next_date => TO_DATE (''01/01/2050 00:00''\, ''mm/dd/yyyy hh24:mi'')); COMMIT; END; /'  \\n\r\nFROM dba_jobs  \\n\r\nWHERE job NOT IN (&Job_Number) AND INTERVAL =  'null'; \\n   ,script_to_Postpone_jobs,,,0,
 SEND,set linesize 300 \\n\r\nselect * from dba_jobs_running; \\n,dba_jobs_running,,,
 SEND,SELECT owner\, job_name\, enabled FROM dba_scheduler_jobs; \\n,dba_scheduler_jobs,,,
 SEND,set linesize 300 \\n\r\ncol job_name for a30 \\n\r\ncol LAST_START_DATE for a40   \\n  \r\ncol NEXT_RUN_DATE for a40 \\n\r\ncol RAISE_EVENTS for a50 \\n\r\nSELECT owner\, job_name\, enabled\,NEXT_RUN_DATE\,RAISE_EVENTS\,LAST_START_DATE from dba_scheduler_jobs where JOB_NAME='&OP_of_dba_scheduler_jobs'; \\n,dba_scheduler_jobs_details,,,
 SEND,set pagesize 50 \\n\r\nset linesize 300 \\n\r\ncol owner for a25 \\n\r\ncol job_name for a35 \\n\r\nselect owner\, job_name from dba_scheduler_jobs order by 1; \\n\r\nset linesize 300 \\n\r\ncol REQ_START_DATE for a40 \\n\r\ncol ACTUAL_START_DATE for a65 \\n\r\ncol RUN_DURATION for a20 \\n\r\ncol status for a10 \\n\r\ncol job_name for a15 \\n\r\nselect log_date \\n\r\n\, job_name \\n\r\n\, status \\n\r\n\, actual_start_date \\n\r\n\, run_duration \\n\r\nfrom dba_scheduler_job_run_details  where job_name='&OP_of_dba_scheduler_jobs' order by 1; \\n,dba_scheduler_job_run_details,,,0,
 SEND,set pagesize 50 \\n\r\nselect job\,SCHEMA_USER\,instance from dba_jobs order by 3; \\n,Job_Status,,,
 SEND,set linesize 300 \\n\r\nselect name||' - '||instance_name||'@'||host_name||' - '||DB_UNIQUE_NAME||' - '||version||' - '||open_mode||' - '||to_char(startup_time\,'DD-MON-YYYY HH24:MI:SS') || ' - '|| database_role from v$database\, v$instance; \\n,instance_INFO,,,
 SEND,\r\nset pagesize 100 \\n\r\nset linesize 300  \\n\r\ncol owner for a25 \\n\r\ncol job_name for a35 \\n\r\ncol start_date for a50 \\n\r\ncol LAST_START_DATE for a50 \\n\r\ncol LAST_RUN_DURATION for a50 \\n\r\nSELECT owner\, job_name\, enabled\,start_date\,LAST_START_DATE\,last_run_duration FROM dba_scheduler_jobs where ENABLED='TRUE' and job_name like 'GATHER%' order by 5 desc; \\n\r\nSELECT owner\, job_name\, enabled\,start_date\,LAST_START_DATE\,last_run_duration FROM dba_scheduler_jobs where ENABLED='TRUE' order by 5 desc; \\n,DBA_Jobs_Runtime,,,0,
Z:"dblinks"=00000002
 SEND,set lines 300 \\n\r\ncol owner for a15 \\n\r\ncol db_link for a45 \\n\r\ncol username for a15 \\n\r\ncol host for a30 \\n\r\nselect * from dba_db_links; \\n,db_link_details,,,
 SEND,--Prompt password in double quotes \\n\r\n-- \\n\r\n--create  database link  \\n\r\n--  &DBLINK_NAME \\n\r\n--connect to  \\n\r\n--  &USERNAME \\n\r\n--identified by  \\n\r\n--  &password \\n\r\n--using '&Alias Name'; \\n,DB_Link_Create_Syntax,,,0,
Z:"DG"=0000000c
 SEND,SELECT ARCH.THREAD# "Thread"\, ARCH.SEQUENCE# "Last Sequence Received"\, APPL.SEQUENCE# "Last Sequence Applied"\, \\n\r\n(ARCH.SEQUENCE# - APPL.SEQUENCE#) "Difference" \\n\r\nFROM \\n\r\n(SELECT THREAD# \,SEQUENCE# FROM V$ARCHIVED_LOG WHERE (THREAD#\,FIRST_TIME ) IN (SELECT THREAD#\,MAX(FIRST_TIME)  \\n\r\nFROM V$ARCHIVED_LOG GROUP BY THREAD#)) ARCH\, \\n\r\n(SELECT THREAD# \,SEQUENCE# FROM V$LOG_HISTORY WHERE (THREAD#\,FIRST_TIME ) IN (SELECT THREAD#\,MAX(FIRST_TIME)  \\n\r\nFROM V$LOG_HISTORY GROUP BY THREAD#)) APPL \\n\r\nWHERE \\n\r\nARCH.THREAD# = APPL.THREAD# \\n\r\nORDER BY 1; \\n\r\n\r\nselect thread#\,applied\,max(sequence#) from gv$archived_log where resetlogs_change#=(select resetlogs_change# from v$database) group by thread#\,applied order by thread#\,applied; \\n\r\n,dg_gap,,,0,
 SEND,set linesize 300 \\n\r\ncol dest_name for a30 \\n\r\ncol error for a70 \\n\r\nselect dest_id\,dest_name\,status\,error from v$archive_dest where dest_id in (1\,2\,3\,4); \\n\r\nselect inst_id\,dest_name\,status\,error from gv$archive_dest where dest_id in (1\,2\,3\,4) and status='VALID' order by 1; \\n,err_dest,,,0,
 SEND,alter session set nls_date_format='MM/DD/YYYY HH24:MI:SS'; \\n,date_format,,,
 SEND,select distinct to_char(checkpoint_time\,'DD-MON-YYYY HH24:MI:SS') from v$datafile;  \\n,chk_time,,,
 SEND,--are  you sure you want to cancel recovery? then copy and paste below line with semicolon(;) \\n\r\n--recover managed standby database cancel ,cancel_MRP,,,
 SEND,-- are you sure you want to start recovery? if yes please copy and paste below line with semicolon(;) \\n\r\n--recover managed standby database disconnect using current logfile \\n\r\n--ALTER DATABASE RECOVER  managed standby database disconnect from session ,start_MRP,,,
 SEND,select process\, thread#\, sequence#\, status\,blocks\,block# from gv$managed_standby where process='MRP0';,check_MRP,,,
 SEND,set linesize 500 \\n\r\ncol item format a40 \\n\r\ncol type format a20 \\n\r\ncol total noprint \\n\r\ncol units format a20 \\n\r\ncol timestamp noprint \\n\r\ncol apply_rate_in_min 999.99 \\n\r\ncol "app_rt|red_sz_mb"  format a20 \\n\r\nselect start_time \, type \,item \, units \, sofar \, total\,timestamp \, (select  round( a.sofar/b.sofar /60 \,2)||' '||round(c.sofar/b.sofar) \\n\r\nfrom v$recovery_progress a \, v$recovery_progress  b  \, v$recovery_progress  c \\n\r\nwhere a.item='Elapsed Time' and b.item='Log Files' and c.item='Redo Applied' \\n\r\nand a.start_time = b.start_time and a.start_time = c.start_time and  d.start_time = c.start_time) "app_rt|red_sz_mb"  from v$recoverY_progress d; \\n,check_apply_redo_rate,,,
 SEND,set linesize 300 \\n\r\nselect name||' - '||instance_name||'@'||host_name||' - '||DB_UNIQUE_NAME||' - '||version||' - '||open_mode||' - '||to_char(startup_time\,'DD-MON-YYYY HH24:MI:SS') || ' - '|| database_role from v$database\, v$instance; \\n,instance_INFO,,,
 SEND,set linesize 300 \\n\r\n\r\nselect INST_ID\,INSTANCE_NAME\,host_name\,to_char(startup_time\,'DD-MON-YYYY HH24:MI:SS')\,INSTANCE_ROLE from gv$instance order by inst_id; \\n\r\n,gv_inst_info,,,
 SEND,select distinct thread#\,GROUP#\,BYTES/1024/1024/1024\,status from gv$standby_log order by 1\,2; \\n,Standby_Log_Det,,,0,
 SEND,--alter system set log_archive_dest_state_2=DEFER scope=BOTH sid='*'(semicolon;),Example:Defer,,,0,
Z:"DG_STby"=00000002
 SEND,select DB_UNIQUE_NAME\,database_role\,open_mode\,switchover_status from v$database;\r\n,SWITCHOVER_STatus,,,0,
 SEND,select thread#\,applied\,max(sequence#) from gv$archived_log where resetlogs_change#=(select resetlogs_change# from v$database) group by thread#\,applied order by thread#\,applied; \\n,GAP,,,0,
Z:"Dyn Scripts"=00000002
 SEND,\r\n-- Example : 'DEPT'\,'EMP'\,'SALGRADE' \\n \r\nSELECT 'GRANT SELECT\,INSERT\,UPDATE\,DELETE ON '||OWNER||'.'||OBJECT_NAME|| ' TO &To_Username;' FROM \\n\r\nDBA_OBJECTS WHERE owner='&OWNER' and object_name in (&Provide_Tables_Like_In_Example); \\n,Grant_Ins_Upd_Del_Sel_To_User,,,0,
 SEND,-- SELECT 'GRANT SELECT ON SCOTT'||'.'||OBJECT_NAME|| ' to SCOTT_RO_ROLE;' FROM    DBA_OBJECTS WHERE owner='SCOTT' and object_type='TABLE';,Grant_Select_ToRole_For_User,,,0,
Z:"Explain_plans"=00000008
 SEND,set linesize 300 \\n\r\nselect * from table (dbms_xplan.display_cursor ('&sqlid') ) ; \\n,dbms_xplan.display_cursor_for_SQLID-->HistoryOfSQLID,,,
 SEND,SET TERMOUT OFF; \\n\r\nCOLUMN current_instance NEW_VALUE current_instance NOPRINT; \\n\r\nSELECT rpad(instance_name\, 17) current_instance FROM v$instance; \\n\r\nSET TERMOUT ON; \\n\r\n\r\nPROMPT  \\n\r\nPROMPT +------------------------------------------------------------------------+ \\n\r\nPROMPT | Report   : User Session Trace File Location                            | \\n\r\nPROMPT | Instance : &current_instance                                           | \\n\r\nPROMPT +------------------------------------------------------------------------+ \\n\r\n\r\nSET ECHO        OFF \\n\r\nSET FEEDBACK    6 \\n\r\nSET HEADING     ON \\n\r\nSET LINESIZE    180 \\n\r\nSET PAGESIZE    50000 \\n\r\nSET TERMOUT     ON \\n\r\nSET TIMING      OFF \\n\r\nSET TRIMOUT     ON \\n\r\nSET TRIMSPOOL   ON \\n\r\nSET VERIFY      OFF \\n\r\n\r\nCLEAR COLUMNS \\n\r\nCLEAR BREAKS \\n\r\nCLEAR COMPUTES \\n\r\n\r\nCOLUMN "Trace File Path" FORMAT a80 HEADING 'Your trace file with path is:' \\n\r\n\r\nSELECT \\n\r\n    a.trace_path || ' > ' || b.trace_file "Trace File Path" \\n\r\nFROM \\n\r\n    (  SELECT value trace_path  \\n\r\n       FROM   v$parameter  \\n\r\n       WHERE  name='user_dump_dest' \\n\r\n    ) a \\n\r\n  \, (  SELECT c.instance || '_ora_' || spid ||'.trc' TRACE_FILE  \\n\r\n       FROM   v$process\, \\n\r\n              (select lower(instance_name) instance from v$instance)  c \\n\r\n       WHERE  addr = ( SELECT paddr  \\n\r\n                       FROM v$session  \\n\r\n                       WHERE (audsid\, sid) = (  SELECT \\n\r\n                                                    sys_context('USERENV'\, 'SESSIONID') \\n\r\n                                                  \, sys_context('USERENV'\, 'SID')  \\n\r\n                                                FROM dual \\n\r\n                                              ) \\n\r\n                     ) \\n\r\n    ) b; \\n\r\n\r\n\r\n,Trace_File_Locatin,,,
 SEND,Set linesize 300 \\n\r\nselect inst_id\, substr(sql_text\,1\,100) SQL_TEXT\, sql_id \\n\r\n	from gv$sqlarea where sql_text like '%&sql_text%' \\n\r\n	and sql_text not like '%sqlarea%'  \\n\r\norder by LAST_LOAD_TIME;  \\n\r\n,Find_SQLID,,,
 SEND,explain plan for &sql_statement;\r\n\r\n\r\n,explain_Plan_1,,,
 SEND, select plan_table_output from table(dbms_xplan.display('plan_table'\,null\,'serial')); \\n\r\n,explain_plan_2_output,,,
 SEND,Set pagesize 400 \\n\r\nset linesize 300 \\n \r\nselect * from table (dbms_xplan.display_awr ('&sqlid') ) ; \\n,Multiple_Plans_for_one_SQLID,,,
 SEND,-- copy and paste query..Result will be 1000+ lines based on condition \\n\r\n\r\n-- select distinct sql_id\,count(plan_hash_value)  from v$sql group by sql_id having count(plan_hash_value)>1 order by 2 desc  \\n,check_dist_hashvalues_in_DB_for_any_SQLID,,,0,
 SEND,select plan_hash_value from v$sqlarea where sql_id='&SQL_ID' \\n,find_latest_HashValue_for_SQLID,,,0,
Z:"exports"=0000000a
 SEND,SET TERMOUT OFF; \\n\r\nCOLUMN current_instance NEW_VALUE current_instance NOPRINT; \\n\r\nSELECT rpad(instance_name\, 17) current_instance FROM v$instance; \\n\r\nSET TERMOUT ON; \\n\r\n\r\nPROMPT  \\n\r\nPROMPT +------------------------------------------------------------------------+ \\n\r\nPROMPT | Report   : Data Pump Sessions                                          | \\n\r\nPROMPT | Instance : &current_instance                                           | \\n\r\nPROMPT +------------------------------------------------------------------------+ \\n\r\n\r\nSET ECHO        OFF \\n\r\nSET FEEDBACK    6 \\n\r\nSET HEADING     ON \\n\r\nSET LINESIZE    180 \\n\r\nSET PAGESIZE    50000 \\n\r\nSET TERMOUT     ON \\n\r\nSET TIMING      OFF \\n\r\nSET TRIMOUT     ON \\n\r\nSET TRIMSPOOL   ON \\n\r\nSET VERIFY      OFF \\n\r\n\r\nCLEAR COLUMNS \\n\r\nCLEAR BREAKS \\n\r\nCLEAR COMPUTES \\n\r\n\r\nCOLUMN instance_name     FORMAT a9         HEADING 'Instance' \\n\r\nCOLUMN owner_name        FORMAT a15        HEADING 'Owner Name' \\n\r\nCOLUMN job_name          FORMAT a20        HEADING 'Job Name' \\n\r\nCOLUMN session_type      FORMAT a15        HEADING 'Session Type' \\n\r\nCOLUMN sid               FORMAT 999999     HEADING 'SID' \\n\r\nCOLUMN serial_id         FORMAT 99999999   HEADING 'Serial ID' \\n\r\nCOLUMN oracle_username   FORMAT a18        HEADING 'Oracle User' \\n\r\nCOLUMN os_username       FORMAT a18        HEADING 'O/S User' \\n\r\nCOLUMN os_pid            FORMAT a8         HEADING 'O/S PID' \\n\r\n\r\nBREAK ON report ON instance_name_print ON owner_name ON job_name \\n\r\n\r\nSELECT \\n\r\n    i.instance_name    instance_name \\n\r\n  \, dj.owner_name      owner_name  \\n\r\n  \, dj.job_name        job_name \\n\r\n  \, ds.type            session_type \\n\r\n  \, s.sid              sid \\n\r\n  \, s.serial#          serial_id \\n\r\n  \, s.username         oracle_username \\n\r\n  \, s.osuser           os_username \\n\r\n  \, p.spid             os_pid \\n\r\nFROM \\n\r\n    gv$datapump_job         dj \\n\r\n  \, gv$datapump_session     ds \\n\r\n  \, gv$session              s \\n\r\n  \, gv$instance             i \\n\r\n  \, gv$process              p \\n\r\nWHERE \\n\r\n      s.inst_id  = i.inst_id \\n\r\n  AND s.inst_id  = p.inst_id \\n\r\n  AND ds.inst_id = i.inst_id \\n\r\n  AND dj.inst_id = i.inst_id \\n\r\n  AND s.saddr    = ds.saddr \\n\r\n  AND s.paddr    = p.addr (+) \\n\r\n  AND dj.job_id  = ds.job_id \\n\r\nORDER BY \\n\r\n    i.instance_name \\n\r\n  \, dj.owner_name \\n\r\n  \, dj.job_name \\n\r\n  \, ds.type; \\n\r\n,DataPump_Sessions,,,
 SEND,SET TERMOUT OFF; \\n\r\nCOLUMN current_instance NEW_VALUE current_instance NOPRINT; \\n\r\nSELECT rpad(instance_name\, 17) current_instance FROM v$instance; \\n\r\nSET TERMOUT ON; \\n\r\n\r\nPROMPT  \\n\r\nPROMPT +------------------------------------------------------------------------+ \\n\r\nPROMPT | Report   : Data Pump Job Progress                                      | \\n\r\nPROMPT | Instance : &current_instance                                           | \\n\r\nPROMPT +------------------------------------------------------------------------+ \\n\r\n\r\nSET ECHO        OFF \\n\r\nSET FEEDBACK    6 \\n\r\nSET HEADING     ON \\n\r\nSET LINESIZE    180 \\n\r\nSET PAGESIZE    50000 \\n\r\nSET TERMOUT     ON \\n\r\nSET TIMING      OFF \\n\r\nSET TRIMOUT     ON \\n\r\nSET TRIMSPOOL   ON \\n\r\nSET VERIFY      OFF \\n\r\n\r\nCLEAR COLUMNS \\n\r\nCLEAR BREAKS \\n\r\nCLEAR COMPUTES \\n\r\n\r\nCOLUMN instance_name     FORMAT a9                  HEADING 'Instance|Name' \\n\r\nCOLUMN owner_name        FORMAT a15                 HEADING 'Owner|Name' \\n\r\nCOLUMN job_name          FORMAT a20                 HEADING 'Job|Name' \\n\r\nCOLUMN session_type      FORMAT a8                  HEADING 'Session|Type' \\n\r\nCOLUMN start_time        FORMAT a19                 HEADING 'Start|Time' \\n\r\nCOLUMN time_remaining    FORMAT 9\,999\,999\,999       HEADING 'Time|Remaining (min.)' \\n\r\nCOLUMN sofar             FORMAT 9\,999\,999\,999\,999   HEADING 'Bytes Completed|So Far'\r\nCOLUMN totalwork         FORMAT 9\,999\,999\,999\,999   HEADING 'Total Bytes|for Job' \\n\r\nCOLUMN pct_completed     FORMAT a10                 HEADING 'Percent|Completed' \\n\r\n\r\nBREAK ON report ON instance_name_print ON owner_name ON job_name \\n\r\n\r\nSELECT \\n\r\n    i.instance_name                                        instance_name \\n\r\n  \, dj.owner_name                                          owner_name  \\n\r\n  \, dj.job_name                                            job_name \\n\r\n  \, ds.type                                                session_type \\n\r\n  \, TO_CHAR(sl.start_time\,'mm/dd/yyyy HH24:MI:SS')         start_time \\n\r\n  \, ROUND(sl.time_remaining/60\,0)                          time_remaining \\n\r\n  \, sl.sofar                                               sofar \\n\r\n  \, sl.totalwork                                           totalwork \\n\r\n  \, TRUNC(ROUND((sl.sofar/sl.totalwork) * 100\, 1)) || '%'  pct_completed \\n\r\nFROM \\n\r\n    gv$datapump_job         dj \\n\r\n  \, gv$datapump_session     ds \\n\r\n  \, gv$session              s \\n\r\n  \, gv$instance             i \\n\r\n  \, gv$session_longops      sl \\n\r\nWHERE \\n\r\n      s.inst_id  = i.inst_id \\n\r\n  AND ds.inst_id = i.inst_id \\n\r\n  AND dj.inst_id = i.inst_id \\n\r\n  AND sl.inst_id = i.inst_id \\n\r\n  AND s.saddr    = ds.saddr \\n\r\n  AND dj.job_id  = ds.job_id \\n\r\n  AND sl.sid     = s.sid \\n\r\n  AND sl.serial# = s.serial# \\n\r\n  AND ds.type    = 'MASTER' \\n\r\nORDER BY \\n\r\n    i.instance_name \\n\r\n  \, dj.owner_name \\n\r\n  \, dj.job_name \\n\r\n  \, ds.type; \\n\r\n,DataPump_Progress,,,
 SEND,set linesize 300 \\n\r\ncol state for a15 \\n\r\nSET TERMOUT OFF; \\n\r\nCOLUMN current_instance NEW_VALUE current_instance NOPRINT; \\n\r\nSELECT rpad(instance_name\, 17) current_instance FROM v$instance; \\n\r\nSET TERMOUT ON; \\n\r\n\r\nPROMPT  \\n\r\nPROMPT +------------------------------------------------------------------------+ \\n\r\nPROMPT | Report   : Data Pump Jobs                                              | \\n\r\nPROMPT | Instance : &current_instance                                           | \\n\r\nPROMPT +------------------------------------------------------------------------+ \\n\r\n\r\nSET ECHO        OFF \\n\r\nSET FEEDBACK    6 \\n\r\nSET HEADING     ON \\n\r\nSET LINESIZE    180 \\n\r\nSET PAGESIZE    50000 \\n\r\nSET TERMOUT     ON \\n\r\nSET TIMING      OFF \\n\r\nSET TRIMOUT     ON \\n\r\nSET TRIMSPOOL   ON \\n\r\nSET VERIFY      OFF \\n\r\n\r\nCLEAR COLUMNS \\n\r\nCLEAR BREAKS \\n\r\nCLEAR COMPUTES \\n\r\n\r\nCOLUMN owner_name         FORMAT a25            HEADING 'Owner Name' \\n\r\nCOLUMN job_name           FORMAT a20            HEADING 'Job Name' \\n\r\nCOLUMN operation          FORMAT a10            HEADING 'Operation' \\n\r\nCOLUMN job_mode           FORMAT a10            HEADING 'Job Mode' \\n\r\nCOLUMN state              FORMAT a15            HEADING 'State' \\n\r\nCOLUMN degree             FORMAT 999999         HEADING 'Degree' \\n\r\nCOLUMN attached_sessions  FORMAT 999\,999        HEADING 'Attached Sessions' \\n\r\n\r\nSELECT \\n\r\n    dpj.owner_name           owner_name \\n\r\n  \, dpj.job_name             job_name \\n\r\n  \, dpj.operation            operation \\n\r\n  \, dpj.job_mode             job_mode \\n\r\n  \, dpj.state                state \\n\r\n  \, dpj.degree               degree \\n\r\n  \, dpj.attached_sessions    attached_sessions \\n\r\nFROM \\n\r\n    dba_datapump_jobs      dpj \\n\r\nORDER BY \\n\r\n    dpj.owner_name \\n\r\n  \, dpj.job_name; \\n\r\n\r\n,DataPump_Jobs,,,0,
 SEND,set linesize 300 \\n\r\ncol owner format a10 \\n\r\ncol directory_name for a60 \\n\r\ncol directory_path format a100 \\n\r\n\r\nSELECT * FROM dba_directories; \\n,DBA_Direc,,,0,
 SEND,##expdp user/user123 directory=REF_DIR dumpfile=full.dmp logfile=full.log full=y compress=y,expdp_Full_BKup_Syn,,,0,
 SEND,set linesize 300 \\n\r\nselect name||' - '||instance_name||'@'||host_name||' - '||DB_UNIQUE_NAME||' - '||version||' - '||open_mode||' - '||to_char(startup_time\,'DD-MON-YYYY HH24:MI:SS') || ' - '|| database_role from v$database\, v$instance; \\n,instance_INFO,,,0,
 SEND,----create or replace directory DBA_EXPORT as '/backup2/export/ORCL' \\n\r\n-- GRANT WRITE ON DIRECTORY <directory_name> TO <schema_name> \\n,create_dire,,,0,
 SEND,##select job_name\,state from dba_datapump_jobs; \\n\r\n##impdp \\'/ as sysdba\\' attach=SYS_IMPORT_FULL_02,IMP_Attach_Job_EditButton_for_CorrectSyntax,,,0,
 SEND,##select job_name\,state from dba_datapump_jobs; \\n\r\n##expdp \\'/ as sysdba\\' attach=SYS_IMPORT_FULL_02,EXP_Attach_Job_EditButton_for_CorrectSyntax,,,0,
 SEND,col name for a30                 \\n\r\n set linesize 300                 \\n\r\n col sql_text for a100            \\n\r\n col status for a10               \\n\r\n col error_msg for a30            \\n\r\nselect name\,sql_text\,status\,error_msg from dba_resumable; \\n,Chk_IMPDP_Moving_or_Not,,,0,
Z:"exports_1"=00000002
 SEND,\r\n#cat  expdp_parfile_SCOTT_data.par      \\n\r\n#DIRECTORY=DBA_EXPORT \\n\r\n#EXCLUDE=STATISTICS \\n\r\n#CONSISTENT=Y \\n\r\n#PARALLEL=20  \\n\r\n#LOGFILE=exp_PUREPOC_SCOTT_DATA_08022017.log  \\n\r\n#DUMPFILE=exp_PUREPOC_SCOTT_DATA_08022017.dmp  \\n\r\n#schemas=SCOTT \\n\r\n#--COMPRESSION_ALGORITHM=HIGH \\n\r\n#compression=all \\n\r\n# \\n\r\n#nohup impdp \\"/ as sysdba\\" parfile=par_imp_SCOTT_GIS4PURE.par & \\n\r\n#nohup expdp \\"/ as sysdba\\" parfile=expdp_parfile_SCOTT_data.par & \\n,Example_EXPDP_IMPDP_Runn_Background,,,0,
 SEND,### cat scott_IMP.log | grep "ORA-" |egrep -v "ORA-01917|ORA-39083" ,Finding_Errors_in_imp_log,,,0,1,
Z:"FB"=0000000c
 SEND,set linesize 300 \\n\r\ncol file_type for a40 \\n\r\nselect * from V$FLASH_RECOVERY_AREA_USAGE; \\n,FRA_Usage,,,0,
 SEND,set linesize 300 \\n\r\ncol time for a35 \\n\r\nset numwidth 30 \\n\r\ncol name for a30 \\n\r\ncol RESTORE_POINT_TIME for a25 \\n\r\nselect SCN\,GUARANTEE_FLASHBACK_DATABASE\,STORAGE_SIZE\,TIME\,PRESERVED\,NAME from v$restore_point; \\n,chk_rest_Pt,,,0,
 SEND,set linesize 300 \\n\r\ncol name for a60 \\n\r\nset pagesize 100 \\n\r\nset numwidth 20 \\n\r\nselect NAME\,LOG#\,SEQUENCE#\,to_char(first_time\,'DD-MON-YYYY HH24:MI:SS')     from v$flashback_database_logfile; \\n,FB_DB_logfile,,,
 SEND,select OBJECT_NAME\, ORIGINAL_NAME\, TYPE\,owner\,CREATETIME\,DROPTIME from dba_recyclebin; \\n,dba_recyclebin,,,
 SEND,set linesize 300 \\n\r\nselect name||' - '||instance_name||'@'||host_name||' - '||DB_UNIQUE_NAME||' - '||version||' - '||open_mode||' - '||to_char(startup_time\,'DD-MON-YYYY HH24:MI:SS') || ' - '|| database_role from v$database\, v$instance; \\n,instance_INFO,,,
 SEND,select FLASHBACK_ON from v$database;\r\n,Check FB is on or not,,,
 SEND,--ALTER SYSTEM SET db_flashback_retention_target=1440 SCOPE=BOTH sid='*'  (example) ;,change_FB_Retention,,,
 SEND,--alter system set db_recovery_file_dest_size=300G scope=both sid='*' example ;,change_FB_Dest,,,
 SEND,show parameter reco \\n\r\nshow parameter flashback_retention \\n,parameter_reco,,,
 SEND,\r\n--Do tail of alert log in other session \\n\r\n--Review with your Team before working on this. \\n\r\n--show parameter reco  \\n\r\n--show parameter flashback_retention  \\n\r\n--Put DB in mount \\n\r\n--(take backup of current settings) Check if you have free space in ASM or filesystem or not #******READ THIS LINE*********# \\n\r\n--ALTER SYSTEM SET db_flashback_retention_target=1440 SCOPE=BOTH(semicolon;) (take backup of current settings)  \\n\r\n--ALTER SYSTEM SET db_recovery_file_dest_size=1024G SCOPE=BOTH(semicolon;)(take backup of current settings) Check if you have free space or not in ASM or filesystem. \\n\r\n--select FLASHBACK_ON from v$database(semicolon;) \\n\r\n--ALTER DATABASE RECOVER  managed standby database cancel(semicolon;) \\n\r\n--alter database flashback on(semicolon;) \\n\r\n--ALTER DATABASE RECOVER  managed standby database cancel(semicolon;) (if recovery is ON or MOVING) \\n\r\n--CREATE RESTORE POINT BEFORE_PROD_May0216 GUARANTEE FLASHBACK DATABASE(semicolon;) \\n\r\n--ALTER DATABASE RECOVER  managed standby database disconnect using current logfile(semicolon;) \\n,Create_Restore_Pt_for_Stby_Copy_to_NotePad,,,0,
 SEND,--Do tail of alert log in other session \\n\r\n--select name||' - '||instance_name||'@'||host_name||' - '||DB_UNIQUE_NAME||' - '||version||' - '||open_mode||' - '||to_char(startup_time\,'DD-MON-YYYY HH24:MI:SS') || ' - '|| database_role from v$database\, v$instance;  \\n\r\n--select * from v$restore_point;  \\n\r\n--shut immediate (make sure)\\n\r\n--startup mount (make sure) \\n\r\n--flashback database to restore point BEFORE_PROD_APR2816(semicolon;) \\n\r\n--recover managed standby database disconnect using current logfile(semicolon;) \\n\r\n--select distinct to_char(checkpoint_time\,'DD-MON-YYYY HH24:MI:SS') from v$datafile(semicolon;)   \\n,FLASHBACK_Standby_DB_to_restorePT_Copy_to_Notepad,,,0,
 SEND,set linesize 300 \\n\r\ncol name for a30 \\n\r\n\r\n select NAME\, ALLOCATION_UNIT_SIZE\, STATE\, TYPE\, TOTAL_MB\, FREE_MB\,(FREE_MB/TOTAL_MB)*100 PCt_FREE from v$asm_diskgroup order by PCt_FREE ;  \\n\r\n\r\nselect NAME\, ALLOCATION_UNIT_SIZE\, STATE\, TYPE\, TOTAL_MB/1024 TOTAL_GB \,FREE_MB/1024 FREE_GB\,(FREE_MB/TOTAL_MB)*100 PCt_FREE from v$asm_diskgroup order by PCt_FREE ; \\n\r\n,SQL>asm_free,,,0,
Z:"FB_1"=00000003
 SEND,\r\n--Do tail of alert log in other session \\n\r\n--Review with your Team before working on this. \\n\r\n--show parameter reco  \\n\r\n--show parameter flashback_retention  \\n\r\n--Put DB in mount \\n\r\n--(take backup of current settings) Check if you have free space in ASM or filesystem or not #******READ THIS LINE*********# \\n\r\n--ALTER SYSTEM SET db_flashback_retention_target=1440 SCOPE=BOTH(semicolon;) (take backup of current settings)  \\n\r\n--ALTER SYSTEM SET db_recovery_file_dest_size=1024G SCOPE=BOTH(semicolon;)(take backup of current settings) Check if you have free space or not in ASM or filesystem. \\n\r\n--select FLASHBACK_ON from v$database(semicolon;) \\n\r\n--ALTER DATABASE RECOVER  managed standby database cancel(semicolon;) \\n\r\n--alter database flashback on(semicolon;) \\n\r\n--ALTER DATABASE RECOVER  managed standby database cancel(semicolon;) (if recovery is ON or MOVING) \\n\r\n--CREATE RESTORE POINT BEFORE_PROD_May0216 GUARANTEE FLASHBACK DATABASE(semicolon;) \\n\r\n--ALTER DATABASE RECOVER  managed standby database disconnect using current logfile(semicolon;) \\n,Create_Restore_Pt_for_Stby_Copy_to_NotePad,,,0,
 SEND,--Do tail of alert log in other session \\n\r\n--select name||' - '||instance_name||'@'||host_name||' - '||DB_UNIQUE_NAME||' - '||version||' - '||open_mode||' - '||to_char(startup_time\,'DD-MON-YYYY HH24:MI:SS') || ' - '|| database_role from v$database\, v$instance;  \\n\r\n--select * from v$restore_point;  \\n\r\n--shut immediate (make sure)\\n\r\n--startup mount (make sure) \\n\r\n--flashback database to restore point BEFORE_PROD_APR2816(semicolon;) \\n\r\n--recover managed standby database disconnect using current logfile(semicolon;) \\n\r\n--select distinct to_char(checkpoint_time\,'DD-MON-YYYY HH24:MI:SS') from v$datafile(semicolon;)   \\n,FLASHBACK_Standby_DB_to_restorePT_Copy_to_Notepad,,,0,
 SEND,set numwidth 40 \\n\r\nselect current_scn from v$database; \\n,check_scn,,,0,
Z:"Find_Sess_Unix"=00000002
 SEND,select spid from v$process p\,v$session s where s.paddr=p.addr and s.sid=&sid; \\n,Find_SPID_for_SID,,,
 SEND,set linesize 300 \\n\r\nselect sid\,serial#\,username\,machine\,program from v$session where paddr in (select addr from v$process where spid = &spid); \\n,Find_SID_From_SPID,,,
Z:"Find_SQL"=00000009
 SEND,set long 100000 \\n\r\nselect distinct sql_text FROM gv$sql WHERE sql_id= '&SQL_ID'; \\n,findsqltxt_sqlid,,,
 SEND,select count(*)\,event from v$session where sql_id='&SQL_ID' group by event; \\n,find_event_count_for_SQLID,,,
 SEND,set linesize 300 \\n\r\ncol machine for a20 \\n\r\ncol username for a15 \\n\r\n\r\nSELECT P.SPID\, S.SID\, S.SERIAL#\,s.username\,s.machine\,s.status\,to_char(logon_time\,'DD-MON-YYYY HH24:MI:SS')\,s.sql_id \\n\r\nFROM V$PROCESS P\, V$SESSION S \\n\r\nWHERE P.ADDR = S.PADDR \\n\r\nAND S.SID in  (select  sid from gv$session where machine like '%&machine%' ) order by s.username; \\n,FindSPID_SQLID_for_Machine,,,
 SEND,set long 100000 \\n\r\n  select sql_id\,plan_hash_value\,SQL_FULLTEXT from v$sql where upper(sql_text) like upper('%&entersqltext%'); \\n,Find_SQLText_For_Pattern,,,
 SEND,set linesize 300  \\n\r\ncol machine for a30 \\n\r\nset pagesize 100 \\n\r\nSELECT s.inst_id\,P.SPID\, S.SID\, S.SERIAL#\,s.username\,s.machine\,s.status\,to_char(logon_time\,'DD-MON-YYYY HH24:MI:SS') \\n\r\nFROM gV$PROCESS P\, gV$SESSION S \\n\r\nWHERE P.ADDR = S.PADDR \\n\r\nAND S.SID in (select sid from gv$session where inst_id in (&inst_IDs_seperated_by_comma) and status = 'INACTIVE' )  \\n\r\nand s.inst_id in (&inst_IDs_seperated_by_comma)   \\n\r\nand s.username <>'SYS'  \\n\r\norder by 8; \\n,Find_Inactive_Sess_on_Clus,,,
 SEND,prompt "Please Enter The UNIX Process ID" \\n\r\nset pagesize 50000 \\n\r\nset linesize 30000 \\n\r\nset long 500000 \\n\r\nset head off \\n\r\nselect \\n\r\ns.username su\, \\n\r\nsubstr(sa.sql_text\,1\,540) txt \\n\r\nfrom v$process p\, \\n\r\nv$session s\, \\n\r\nv$sqlarea sa \\n\r\nwhere p.addr=s.paddr \\n\r\nand s.username is not null \\n\r\nand s.sql_address=sa.address(+) \\n\r\nand s.sql_hash_value=sa.hash_value(+) \\n\r\nand spid=&SPID; \\n,Find_SQLText_For_Unix_Proc_ID,,,
 SEND,select inst_id\,sid\,serial# from gv$session where sql_id='&SQL_ID';,Find_Session_Det_For_SQLID,,,
 SEND,set linesize 300 \\n\r\ncol execs for 999\,999\,999 \\n\r\nselect  \\n\r\nto_Char(begin_interval_time\,'DD-MON-YY') Time\, \\n\r\nround(sum(nvl(executions_delta\,0))\,2) execs \\n\r\nfrom DBA_HIST_SQLSTAT S\, DBA_HIST_SNAPSHOT SS \\n\r\nwhere sql_id = '&sql_id' \\n\r\nand ss.snap_id = S.snap_id \\n\r\nand s.instance_number = ss.instance_number \\n\r\nand ss.BEGIN_INTERVAL_TIME> sysdate-50 \\n\r\ngroup by \\n\r\n to_Char(begin_interval_time\,'DD-MON-YY') \\n\r\norder by 1; \\n\r\n,Find_No_of_Exe's_For_SQLID_Daily,,,
 SEND,col execs for 999\,999\,999 \\n\r\nset linesize 300 \\n\r\nselect  \\n\r\nto_Char(begin_interval_time\,'DD-MON-YY:HH24') Time\, \\n\r\nround(sum(nvl(executions_delta\,0))\,2) execs \\n\r\nfrom DBA_HIST_SQLSTAT S\, DBA_HIST_SNAPSHOT SS \\n\r\nwhere sql_id = '&sql_id' \\n\r\nand ss.snap_id = S.snap_id \\n\r\nand s.instance_number = ss.instance_number \\n\r\nand ss.BEGIN_INTERVAL_TIME> sysdate-30 \\n\r\ngroup by \\n\r\n to_Char(begin_interval_time\,'DD-MON-YY:HH24') \\n\r\norder by 1; \\n,Find_No_of_Exe's_For_SQLID_Hourly,,,
Z:"Find_SQL_History"=00000007
 SEND,set linesize 300 \\n\r\n set long 100000 \\n\r\n set pagesize 500 \\n\r\n select sql_id\,sql_text from    DBA_HIST_SQLTEXT where sql_id ='&SQL_ID'; \\n,findsqltxt_SQLID_History,,,
 SEND,set linesize 300 \\n\r\ncol a for a60 \\n\r\ncol machine for a20 \\n\r\ncol username for a20 \\n\r\ncol terminal for a20 \\n\r\ncol program for a20 \\n\r\ncol osuser for a20 \\n\r\n\r\nSELECT  \\n\r\ns.program\, \\n\r\ns.inst_id\, \\n\r\ns.sid\, \\n\r\ns.serial#\, \\n\r\nto_char(s.logon_time\,'DD-MON-YYYY HH24:MI:SS')\, \\n\r\ns.status\, \\n\r\ns.username\, \\n\r\ns.machine\, \\n\r\ns.program\, \\n\r\ns.osuser\,\\n\r\ns.sql_id \\n\r\nFROM gv$session s\, gv$process p \\n\r\nWHERE ( (p.addr(+) = s.paddr) AND (p.inst_id(+) = s.inst_id)) and s.username is not null and s.username not in ('SYS'\,'SYSTEM'\,'DBSNMP'\,'RMAN') \\n\r\nAND s.sql_id = '&sql_id'; \\n\r\n\r\n,find_SQL_ID_Details,,,
 SEND,set linesize 300 \\n\r\n set long 100000 \\n\r\n set pagesize 500 \\n\r\n select sql_id\,sql_text from    DBA_HIST_SQLTEXT where upper(sql_text) like upper('%&entersqltext%');  \\n,findsqltxt_SQL_Pattern_History,,,0,
 SEND,set linesize 300 \\n\r\nset pagesize 100 \\n\r\nselect  \\n\r\ns.instance_number\,to_Char(begin_interval_time\,'DD-MON-YY') Time\, \\n\r\nround(sum(nvl(executions_delta\,0))\,2) execs \\n\r\nfrom DBA_HIST_SQLSTAT S\, DBA_HIST_SNAPSHOT SS \\n\r\nwhere sql_id = '&sql_id' \\n\r\nand ss.snap_id = S.snap_id \\n\r\nAND s.instance_number = ss.instance_number \\n\r\nand ss.BEGIN_INTERVAL_TIME> sysdate-30 \\n\r\ngroup by s.instance_number\,\\n\r\n to_Char(begin_interval_time\,'DD-MON-YY') \\n\r\norder by 2; \\n,Find_No_of_Exe's_SQLID_by_Inst_Daily,,,0,
 SEND,col execs for 999\,999\,999 \\n\r\nset linesize 300 \\n\r\nselect \\n\r\nto_Char(begin_interval_time\,'DD-MON-YY:HH24:MI') Time\, \\n\r\nround(sum(nvl(executions_delta\,0))\,2) execs \\n\r\nfrom DBA_HIST_SQLSTAT S\, DBA_HIST_SNAPSHOT SS \\n\r\nwhere sql_id = '&sql_id' \\n\r\nand ss.snap_id = S.snap_id \\n\r\nand s.instance_number = ss.instance_number \\n\r\nand ss.BEGIN_INTERVAL_TIME> sysdate-30 \\n\r\ngroup by \\n\r\n to_Char(begin_interval_time\,'DD-MON-YY:HH24:MI') \\n\r\norder by 1; \\n,Find_No_of_Exe's_For_SQLID_MIN,,,0,
 SEND,set verify off lines 130 pages 1000 \\n\r\n   select sql_id\,sql_text from \r\n   DBA_HIST_SQLTEXT where sql_id in (select sql_id from dba_hist_active_sess_history \\n\r\n   where snap_id between &BeginSnapID and &EndSnapID); \\n,SQL_Text_for_SnapID's,,,0,
 SEND,\r\nset linesize 300 \\n\r\nselect sql_id sql\,min(sample_time)\,max(sample_time) from  V$ACTIVE_SESSION_HISTORY where sql_id in \r\n(select sql_id from v$sql where upper(sql_text) like upper('%&entersqltext%')) group by sql_id; \\n\r\n,find_exe_time_SQL_ID_for_SQLText_Pattern,,,0,
Z:"Flashback_Drop"=00000004
 SEND,set linesize 300 \\n\r\nset pagesize 300 \\n\r\ncol owner for a20 \\n\r\ncol object_name for a50 \\n\r\ncol original_name for a40 \\n\r\nSELECT object_name\, original_name\,type\,CREATETIME\,DROPTIME\,owner FROM dba_recyclebin WHERE owner = '&Owner'; \\n,Dropped_OBJ_Owner,,,0,
 SEND,--FLASHBACK TABLE SCOTT.EMP TO BEFORE DROP;,Ex_table_to_Restore,,,0,
 SEND,--FLASHBACK TABLE int_admin_emp TO BEFORE DROP \r\n   RENAME TO int2_admin_emp;,Ex_table_to_restore_Rename,,,0,
 SEND,--select 'FLASHBACK TABLE ATGCORE.'|| ORIGINAL_NAME || ' to before drop;' FROM dba_recyclebin WHERE owner = 'ATGCORE' and ORIGINAL_NAME like '%SVC%' and type='TABLE';,Script_to_RestoreTables_From_FB,,,0,
Z:"Fragmentation"=00000006
 SEND,col spoolname new_value spoolname \\n\r\nselect 'Fragmented_tables'||to_char(sysdate\, 'YYYYMONDD')||'.html' spoolname from dual; \\n\r\nspool '&spoolname' \\n\r\nset pagesize 200 \\n\r\nset markup html on \\n\r\nWITH STAT_SPACE AS( \\n\r\n  SELECT OWNER\, TABLE_NAME\, NUM_ROWS\, AVG_ROW_LEN\, NUM_ROWS*AVG_ROW_LEN/1024/1024/1024 tbl_STAT_SPACE \\n\r\n  FROM   DBA_TABLES  \\n\r\n  WHERE  OWNER='CRM')\, \\n\r\nSEG_SPACE AS ( \\n\r\n  SELECT OWNER\, SEGMENT_NAME\, SEGMENT_TYPE\, TABLESPACE_NAME\, BLOCKS\, BYTES/1024/1024/1024 SEGSIZE_GB  \\n\r\n  FROM DBA_SEGMENTS  \\n\r\n  WHERE 1=1 \\n\r\n  AND OWNER='CRM' \\n\r\n  AND SEGMENT_TYPE='TABLE') \\n\r\nSELECT sesp.tablespace_name\, StSp.TABLE_NAME\,  sesp.blocks\, StSp.NUM_ROWS\, StSp.AVG_ROW_LEN\, StSp.TBL_STAT_SPACE\, sesp.SEGSIZE_GB\, abs(STSP.TBL_STAT_SPACE - sesp.SEGSIZE_GB) claim_gb \\n\r\nFROM   STAT_SPACE STSP\, SEG_SPACE SESP \\n\r\nWHERE  abs(STSP.TBL_STAT_SPACE - sesp.SEGSIZE_GB) > 1 \\n\r\nAND    STSP.TABLE_NAME = SESP.SEGMENT_NAME \\n\r\nAND    STSP.OWNER = SESP.OWNER \\n\r\nORDER BY CLAIM_GB desc; \\n\r\nspool off \\n\r\nexit \\n,Fragmented_Tables_List in HTML,,,
 SEND,set linesize 300 \\n\r\nselect table_name\,round((blocks*8)\,2)||' KB' "Blocks Size"\,(round((blocks*8)\,2))/1024/1024 ||' GB' "Blocks Size" \\n\r\nfrom dba_tables \\n\r\nwhere owner='&OWNER' and table_name = upper('&table_name'); \\n,Blocks_Size,,,
 SEND,set linesize 300 \\n\r\nselect table_name\,round((num_rows*avg_row_len/1024)\,2)||' KB' "Rows Size"\,(round((num_rows*avg_row_len/1024)\,2))/1024/1024||' GB' "Rows Size" \\n\r\nfrom dba_tables \\n\r\nwhere owner='&OWNER' and table_name = upper('&table_name'); \\n,Rows_Size,,,
 SEND,BREAK ON REPORT \\n\r\n\r\nBREAK ON TABLESPACE_NAME SKIP 1 ON REPORT  \\n\r\n\r\nCOMPUTE SUM LABEL TOTAL OF SEGSIZE_GB TBL_STAT_SPACE CLAIM_GB ON tablespace_name \\n\r\n\r\nCOL TABLESPACE_NAME FORMAT A30 HEADING "Tablespace Name" \\n\r\n\r\nCOL TABLE_NAME FORMAT A30 HEADING "Table Name" \\n\r\n\r\nCOL BLOCKS FORMAT 999\,999\,999\,999 HEADING "Alloc|DB|Blocks" \\n\r\n\r\nCOL AVG_ROW_LEN FORMAT 9999 HEADING "Avg|Row|Length" \\n\r\n\r\nCOL NUM_ROWS FORMAT 999\,999\,999\,999 HEADING "Num Rows" \\n\r\n\r\nCOL TBL_STAT_SPACE FORMAT 99\,999.9999 HEADING "Space Calc|Statistics|in GB" \\n\r\n\r\nCOL SEGSIZE_GB FORMAT 99\,999.9999 HEADING "Space Calc|Allocated|in GB" \\n\r\n\r\ncol claim_gb format 99\,999.9999 heading "Claimable|Space|in GB" \\n\r\n\r\nset pagesize 300 \\n\r\n\r\nWITH STAT_SPACE AS( \\n\r\n  SELECT OWNER\, TABLE_NAME\, NUM_ROWS\, AVG_ROW_LEN\, NUM_ROWS*AVG_ROW_LEN/1024/1024/1024 tbl_STAT_SPACE \\n\r\n  FROM   DBA_TABLES  \\n\r\n  WHERE  OWNER='&OWNER')\, \\n\r\nSEG_SPACE AS ( \\n\r\n  SELECT OWNER\, SEGMENT_NAME\, SEGMENT_TYPE\, TABLESPACE_NAME\, BLOCKS\, BYTES/1024/1024/1024 SEGSIZE_GB  \\n\r\n  FROM DBA_SEGMENTS  \\n\r\n  WHERE 1=1 \\n\r\n  AND OWNER='&OWNER' \\n\r\n  AND SEGMENT_TYPE='TABLE') \\n\r\nSELECT sesp.tablespace_name\, StSp.TABLE_NAME\,  sesp.blocks\, StSp.NUM_ROWS\, StSp.AVG_ROW_LEN\, StSp.TBL_STAT_SPACE\, sesp.SEGSIZE_GB\, abs(STSP.TBL_STAT_SPACE - sesp.SEGSIZE_GB) claim_gb \\n\r\nFROM   STAT_SPACE STSP\, SEG_SPACE SESP \\n\r\nWHERE  abs(STSP.TBL_STAT_SPACE - sesp.SEGSIZE_GB) > 1 \\n\r\nAND    STSP.TABLE_NAME = SESP.SEGMENT_NAME \\n\r\nAND    STSP.OWNER = SESP.OWNER \\n\r\nORDER BY TABLESPACE_NAME asc\, CLAIM_GB desc; \\n\r\n\r\n\r\n,Fragmented_Tables_List in SQLPLUS,,,
 SEND,BREAK ON REPORT \\n\r\n\r\nBREAK ON TABLESPACE_NAME SKIP 1 ON REPORT  \\n\r\n\r\nCOMPUTE SUM LABEL TOTAL OF SEGSIZE_GB TBL_STAT_SPACE CLAIM_GB ON tablespace_name \\n\r\n\r\nCOL TABLESPACE_NAME FORMAT A30 HEADING "Tablespace Name" \\n\r\n\r\nCOL TABLE_NAME FORMAT A30 HEADING "Table Name" \\n\r\n\r\nCOL BLOCKS FORMAT 999\,999\,999\,999 HEADING "Alloc|DB|Blocks" \\n\r\n\r\nCOL AVG_ROW_LEN FORMAT 9999 HEADING "Avg|Row|Length" \\n\r\n\r\nCOL NUM_ROWS FORMAT 999\,999\,999\,999 HEADING "Num Rows" \\n\r\n\r\nCOL TBL_STAT_SPACE FORMAT 99\,999.9999 HEADING "Space Calc|Statistics|in GB" \\n\r\n\r\nCOL SEGSIZE_GB FORMAT 99\,999.9999 HEADING "Space Calc|Allocated|in GB" \\n\r\n\r\ncol claim_gb format 99\,999.9999 heading "Claimable|Space|in GB" \\n\r\n\r\nset pagesize 300 \\n\r\nset linesize 300 \\n\r\n\r\nWITH STAT_SPACE AS( \\n\r\n  SELECT OWNER\, TABLE_NAME\, NUM_ROWS\, AVG_ROW_LEN\, NUM_ROWS*AVG_ROW_LEN/1024/1024/1024 tbl_STAT_SPACE \\n\r\n  FROM   DBA_TABLES \\n\r\n  )\, \\n\r\nSEG_SPACE AS ( \\n\r\n  SELECT OWNER\, SEGMENT_NAME\, SEGMENT_TYPE\, TABLESPACE_NAME\, BLOCKS\, BYTES/1024/1024/1024 SEGSIZE_GB \\n\r\n  FROM DBA_SEGMENTS \\n\r\n  WHERE 1=1 \\n\r\n    AND SEGMENT_TYPE='TABLE') \\n\r\nSELECT sesp.tablespace_name\, StSp.TABLE_NAME\,  sesp.blocks\, StSp.NUM_ROWS\, StSp.AVG_ROW_LEN\, StSp.TBL_STAT_SPACE\, sesp.SEGSIZE_GB\, abs(STSP.TBL_STAT_SPACE - sesp.SEGSIZE_GB) claim_gb \\n\r\nFROM   STAT_SPACE STSP\, SEG_SPACE SESP \\n\r\nWHERE  abs(STSP.TBL_STAT_SPACE - sesp.SEGSIZE_GB) > 1 \\n\r\nAND    STSP.TABLE_NAME = SESP.SEGMENT_NAME \\n\r\nAND    STSP.OWNER = SESP.OWNER \\n\r\nORDER BY TABLESPACE_NAME asc\, CLAIM_GB desc;  \\n,Fragmented_Tables_in_DB,,,
 SEND,---- Below 30% is considered to be highly fragmented\, please de-fragment it.								\\n\r\n---- 100% means no fragmentation                                                                            \\n\r\n---- If that tablespace belongs to undo tablespace then drop and recreate it.                               \\n\r\n---- In case of sysaux OR system add new datafiles.                                                         \\n\r\n---- In case of user tablespaces\, take precaution to de-fragment it.                                        \\n\r\n---- Before Deframenting discuss with Team and take proper action											\\n\r\nset linesize 300 																							\\n\r\nset pagesize 300                                                                                            \\n\r\nSELECT                                                                                                      \\n\r\n tablespace_name\,                                                                                           \\n\r\n count(*) free_chunks\,                                                                                      \\n\r\n decode(round((max(bytes) / 1024000)\,2)\,                                                                    \\n\r\n null\,0\,                                                                                                    \\n\r\n round((max(bytes) / 1024000)\,2)) largest_chunk\,                                                            \\n\r\n nvl(round(sqrt(max(blocks)/sum(blocks))*(100/sqrt(sqrt(count(blocks)) ))\,2)\,0) fragmentation_index         \\n\r\n FROM                                                                                                       \\n\r\n sys.dba_free_space                                                                                         \\n\r\n group by                                                                                                   \\n\r\n tablespace_name                                                                                            \\n\r\n order by 2 desc\, 1;                                                                                        \\n,Tablespace_Fragmentation_Read_Notes_Above_Query,,,0,
Z:"GC Activity"=00000004
 SEND,\r\ncol segment_name format a40 \\n\r\ncol gc_blocks_received format 999\,999\,999  \\n\r\ncol pct format 99.99  \\n\r\nset pages 1000 \\n\r\nset lines 80 \\n\r\nset echo on  \\n\r\n \\n\r\nWITH segment_misses AS \\n\r\n        (SELECT owner || '.' || object_name segment_name\, \\n\r\n                SUM(VALUE) gc_blocks_received\, \\n\r\n                ROUND(  SUM(VALUE)* 100 \\n\r\n                      / SUM(SUM(VALUE)) OVER ()\, 2) pct \\n\r\n         FROM gv$segment_statistics \\n\r\n         WHERE statistic_name LIKE 'gc%received' AND VALUE > 0 \\n\r\n         GROUP BY owner || '.' || object_name) \\n\r\nSELECT segment_name\,gc_blocks_received\,pct \\n\r\n  FROM segment_misses \\n\r\n WHERE pct > 1 \\n\r\n ORDER BY pct DESC;  \\n,top_gc_segments,,,0,
 SEND,\r\n \r\ncolumn wait_type format a35 heading "Wait Type" \\n\r\ncolumn lock_name format a12 \\n\r\ncolumn waits_1000 format  99\,999\,999 heading "Waits|\\1000" \\n\r\ncolumn time_waited_hours format 99\,999.99 heading "Time|Hours" \\n\r\ncolumn pct_time format 99.99 Heading "Pct of|Time" \\n\r\ncolumn avg_wait_ms format 9\,999.99 heading "Avg Wait|Ms" \\n\r\nset pagesize 10000 \\n\r\nset lines 100 \\n\r\nset echo on \\n\r\n \\n\r\nWITH system_event AS  \\n\r\n   (SELECT CASE \\n\r\n             WHEN wait_class = 'Cluster' THEN event \\n\r\n             ELSE wait_class \\n\r\n           END  wait_type\, e.* \\n\r\n     FROM gv$system_event e) \\n\r\nSELECT wait_type\,  ROUND(total_waits/1000\,2) waits_1000 \, \\n\r\n       ROUND(time_waited_micro/1000000/3600\,2) time_waited_hours\, \\n\r\n       ROUND(time_waited_micro/1000/total_waits\,2) avg_wait_ms  \, \\n\r\n       ROUND(time_waited_micro*100 \\n\r\n          /SUM(time_waited_micro) OVER()\,2) pct_time   \\n\r\nFROM (SELECT wait_type\, SUM(total_waits) total_waits\, \\n\r\n             SUM(time_waited_micro) time_waited_micro \\n\r\n        FROM system_event e \\n\r\n       GROUP BY wait_type  \\n\r\n       UNION \\n\r\n      SELECT 'CPU'\,   NULL\, SUM(VALUE) \\n\r\n        FROM gv$sys_time_model \\n\r\n       WHERE stat_name IN ('background cpu time'\, 'DB CPU'))   \\n\r\nWHERE wait_type <> 'Idle' \\n\r\nORDER BY  time_waited_micro  DESC; \\n\r\n ,cluster_waits,,,0,
 SEND,\r\n\r\ncol event format a30 heading "Wait event" \\n\r\ncol total_waits format 999\,999\,999\,999 heading "Total|Waits" \\n\r\ncol time_waited_secs format  999\,999\,999 heading "Time|(secs)" \\n\r\ncol avg_ms format 9\,999.99 heading "Avg Wait|(ms)" \\n\r\nset pagesize 1000 \\n\r\nset lines 80 \\n\r\nset echo on \\n\r\n\r\nSELECT event\, SUM(total_waits) total_waits\, \\n\r\n       ROUND(SUM(time_waited_micro) / 1000000\, 2) time_waited_secs\, \\n\r\n       ROUND(SUM(time_waited_micro) / 1000 / SUM(total_waits)\, 2) avg_ms \\n\r\nFROM gv$system_event \\n\r\nWHERE    event LIKE 'gc%block%way' \\n\r\n      OR event LIKE 'gc%multi%' \\n\r\n      OR event LIKE 'gc%grant%' \\n\r\n      OR event = 'db file sequential read' \\n\r\nGROUP BY event \\n\r\nHAVING SUM(total_waits) > 0 \\n\r\nORDER BY event; \\n,Avg_Latency,,,0,
 SEND,\r\ncol value format 999\,999\,999\,999 \\n\r\ncol name format a30 \\n\r\nset echo on \\n\r\n \\n\r\nSELECT name\, SUM(VALUE) value \\n\r\nFROM gv$sysstat \\n\r\nWHERE    name LIKE 'gc%lost' \\n\r\n      OR name LIKE 'gc%received' \\n\r\n      OR name LIKE 'gc%served' \\n\r\nGROUP BY name \\n\r\nORDER BY name; \\n,gc_blocks_lost,,,0,
Z:"GG"=00000008
 SEND,sudo su - ggsuser,ggs,,,
 SEND,set linesize 300 \\n\r\nselect s.inst_id\,p.spid\, p.pid\, s.sid\, s.serial#\,s.program\, s.module\, s.username\,s.status  \\n\r\nfrom gv$session s\, gv$process p  \\n\r\nwhere p.addr=s.paddr    \\n\r\nand s.username = 'GG_ADMIN'    \\n\r\nand s.module like upper('%&module%') order by s.module; \\n,Check_DB_Details_for_Mod,,,
 SEND,select sql_id from gv$session where sid=&sid; \\n,Chk_sqlid_for_SID,,,
 SEND,set linesize 300 \\n\r\nselect sql_id\,plan_hash_value\,SQL_FULLTEXT from gv$sql where sql_id='&SQL_ID'; \\n,Chk_SQLText_SQLID,,,
 SEND,set linesize 300 \\n \r\nselect username\,service_name from gv$session where username like '%GG%'; \\n,check GG service,,,
 SEND,\r\nset linesize 300 \\n\r\n select s.sid\,s.username\,s.osuser\,t.start_time\, \\n\r\n  r.name\,t.xidusn\,t.used_ublk\,t.used_urec \\n\r\n  from v$session s\,v$transaction t\,v$rollname r \\n\r\n  where s.taddr=t.addr \\n\r\n  and t.xidusn=r.usn \\n\r\n  order by 7; \\n,Long_runng_Trans_blocks,,,
 SEND,zz  send <extract name>\, showtrans,showtrans,,,
 SEND,zz send <extract name> status,status,,,
Z:"GG-logdump"=00000009
 SEND,---- check trail file location from info <extract/replicat name>,Step1,,,
 SEND,---- go to trail file location and select old trail file for checking purpose,step2,,,
 SEND,logdump,step3 (from GG home) logdump,,,
 SEND,GHDR  ON,step4 (GHDR  ON),,,
 SEND,open <traile file with location>,step5 (open),,,
 SEND,detail on,step6 (detail on),,,
 SEND,detail data,step7 (detail data),,,
 SEND,usertoken on,step8 (usertoken on),,,
 SEND,n,step9 (n),,,
Z:"Hidden"=00000002
 SEND,SET TERMOUT OFF;  \\n\r\nCOLUMN current_instance NEW_VALUE current_instance NOPRINT; \\n\r\nSELECT rpad(instance_name\, 17) current_instance FROM v$instance; \\n\r\nSET TERMOUT ON; \\n\r\n\r\n\r\nSET ECHO        OFF \\n\r\nSET FEEDBACK    6 \\n\r\nSET HEADING     ON \\n\r\nSET LINESIZE    256 \\n\r\nSET PAGESIZE    50000 \\n\r\nSET TERMOUT     ON \\n\r\nSET TIMING      OFF \\n\r\nSET TRIMOUT     ON \\n\r\nSET TRIMSPOOL   ON \\n\r\nSET VERIFY      OFF \\n\r\n\r\nCLEAR COLUMNS \\n\r\nCLEAR BREAKS \\n\r\nCLEAR COMPUTES \\n\r\n\r\nCOLUMN ksppinm   FORMAT a55   HEAD 'Parameter Name' \\n\r\nCOLUMN ksppstvl  FORMAT a40   HEAD 'Value' \\n\r\nCOLUMN ksppdesc  FORMAT a60   HEAD 'Description'    TRUNC \\n\r\n\r\nSELECT \\n\r\n    ksppinm \\n\r\n  \, ksppstvl \\n\r\n  \, ksppdesc \\n\r\nFROM \\n\r\n    x$ksppi x \\n\r\n  \, x$ksppcv y \\n\r\nWHERE \\n\r\n      x.indx = y.indx  \\n\r\n  AND TRANSLATE(ksppinm\,'_'\,'#') like '#%' \\n\r\nORDER BY \\n\r\n  ksppinm; \\n\r\n\r\n,Hidden_Parameters,,,
 SEND,SET ECHO        OFF \\n\r\nSET FEEDBACK    6 \\n\r\nSET HEADING     ON \\n\r\nSET LINESIZE    256 \\n\r\nSET PAGESIZE    50000 \\n\r\nSET TERMOUT     ON \\n\r\nSET TIMING      OFF \\n\r\nSET TRIMOUT     ON \\n\r\nSET TRIMSPOOL   ON \\n\r\nSET VERIFY      OFF \\n\r\n\r\nCLEAR COLUMNS \\n\r\nCLEAR BREAKS \\n\r\nCLEAR COMPUTES \\n\r\n\r\nCOLUMN ksppinm   FORMAT a55   HEAD 'Parameter Name' \\n\r\nCOLUMN ksppstvl  FORMAT a40   HEAD 'Value' \\n\r\nCOLUMN ksppdesc  FORMAT a60   HEAD 'Description'    TRUNC \\n\r\nset linesize 300 \\n\r\nSELECT \\n\r\n    ksppinm \\n\r\n  \, ksppstvl \\n\r\n  \, ksppdesc \\n\r\nFROM \\n\r\n    x$ksppi x \\n\r\n  \, x$ksppcv y \\n\r\nWHERE \\n\r\n      x.indx = y.indx \\n\r\nand       x.ksppinm = '&value' \\n\r\n  AND TRANSLATE(ksppinm\,'_'\,'#') like '#%' ; \\n,Hidden_Para_Specific_Value,,,0,
Z:"HTML"=00000002
 SEND,-- spool /tmp/Oct29.html \\n\r\n-- set markup html on \\n\r\n-- select sysdate from dual; \\n\r\n-- spool off \\n,Generate_output_In_HTML,,,0,
 SEND,##sqlplus -s -m "HTML ON TABLE 'BORDER="2"'" scott @tmp.sql>hr.html \\n\r\n##$ cat tmp.sql \\n\r\n##select * from dual; \\n\r\n##exit \\n,Generate_Output_Html_from_Unix,,,0,
Z:"Increase_SWAP"=00000001
 SEND,\r\n##Increase SWAP Space in Linux \\n\r\n##Step1 : dd if=/dev/zero of= /u01/app/grid/myswapfile bs=1M count=4096 \\n\r\n##Step 2: chmod 600 /u01/app/grid/myswapfile \\n\r\n##Step 3: mkswap /u01/app/grid/myswapfile \\n\r\n##Step 4: swapon /u01/app/grid/myswapfile \\n\r\n##Step 5: cat /etc/fstab (To make it permanente) \\n\r\n##        /u01/app/grid/myswapfile               swap                    swap    defaults        0 0 \\n\r\n## Website : http://www.thegeekstuff.com/2010/08/how-to-add-swap-space/ \\n,Increase_Swap_In_Linux,,,0,
Z:"Index"=0000000a
 SEND,set linesize 300 \\n\r\ncol index_owner for a30 \\n\r\ncolumn index_name format a30 \\n\r\ncolumn columns format a50 \\n\r\ncolumn index_type format a25 heading type \\n\r\ncolumn owner format a10 \\n\r\ncolumn tablespace_name format a15 \\n\r\n \\n\r\nselect b.uniqueness\,b.index_type\,b.status\,a.* \\n\r\nfrom \\n\r\n(select index_name\,index_owner\, \\n\r\n        max(decode(column_position\,1\,column_name\,null))|| \\n\r\n        max(decode(column_position\,2\,'\, '||column_name\,null))|| \\n\r\n        max(decode(column_position\,3\,'\, '||column_name\,null))|| \\n\r\n        max(decode(column_position\,4\,'\, '||column_name\,null))|| \\n\r\n	max(decode(column_position\,5\,'\, '||column_name\,null))|| \\n\r\n        max(decode(column_position\,6\,'\, '||column_name\,null)) columns from dba_ind_columns  \\n\r\n        where  table_name = upper('&table_name')  \\n\r\ngroup by index_name\,index_owner) a\, \\n\r\ndba_indexes b \\n\r\nwhere a.index_name = b.index_name and \\n\r\na.index_owner='&OWNER' and \\n\r\na.index_owner=b.owner order by index_owner \\n\r\n/ \\n\r\n,Indexbytable,,,0,
 SEND, \r\nset linesize 300 \\n\r\ncol table_name for a25 \\n\r\ncol table_owner for a15 \\n\r\ncol column_name for a20 \\n\r\nselect table_name\,table_owner\,column_name from dba_ind_columns where   \\n\r\n	index_name=upper('&x') \r\n	order by table_owner\,column_position asc; \\n,indexbyname(Col's),,,
 SEND,set linesize 300 \\n\r\ncol table_name for a20 \\n\r\nselect TABLE_NAME \,  NUM_ROWS \, BLOCKS \, EMPTY_BLOCKS \,\r\n CHAIN_CNT\, AVG_ROW_LEN\, AVG_SPACE_FREELIST_BLOCKS\, NUM_FREELIST_BLOCKS\,\r\n CACHE\, LAST_ANALYZED\, BUFFER_POOL \r\nfrom  \\n\r\ndba_tables where table_name like upper('&tablename'); \\n,last_analyzed,,,
 SEND,set linesize 300 \\n\r\ncol owner for a30 \\n\r\ncol table_name for a30 \\n\r\ncol tablespace_name for a30 \\n\r\nselect owner\,table_name\,tablespace_name\,logging from dba_tables where table_name like upper('%&tablename%'); \\n,tablebyname,,,0,
 SEND,set linesize 300 \\n\r\nselect owner\,index_name\,status\,TO_CHAR(last_analyzed\,'DD-MON-YYYYHH24:MI:SS')\,tablespace_name \\n\r\nfrom dba_indexes where table_name = upper('&Table_Name'); \\n,Global_Index_Status,,,
 SEND,set linesize 300 \\n\r\ncol table_name for a30 \\n\r\ncol index_name for a30 \\n\r\ncol owner for a15 \\n\r\nselect table_name\,owner\,index_name\,status\,TO_CHAR(last_analyzed\,'DD-MON-YYYYHH24:MI:SS')\,tablespace_name \\n\r\nfrom dba_indexes where table_name like upper('%&Table_Name%') and owner='&ownername'; \\n,Index_Status_Owner_Analy,,,0,
 SEND,set ver off \\n\r\nset trimspool on \\n\r\nset lines 199 \\n\r\ncol owner for a15 \\n\r\ncol segment_name for a45 \\n\r\ncol segment_type for a15 \\n\r\ncol tablespace_name for a18 \\n\r\ncol partition_name for a30 \\n\r\ncompu sum of size_mb on report \\n\r\nbreak on report skip 2 \\n\r\n\r\nselect  \\n\r\nowner\, segment_name\,partition_name part_name\, buffer_pool\, segment_type\, tablespace_name\, extents\,  \\n\r\nround(bytes/1024/1024) size_mb \\n\r\nfrom dba_segments where  \\n\r\nsegment_name like upper('&segname');  \\n,segmentbyname,,,
 SEND,select index_name\,status from dba_ind_partitions where status <> 'USABLE'; \\n,Local_Part_Index_Status,,,
 SEND,set linesize 300 \\n\r\ncol owner for a40\\n\r\nselect owner\,count(*) from dba_indexes group by owner; \\n,Index_count,,,0,
 SEND,set linesize 300 \\n\r\ncol index_name for a30 \\n\r\nselect TABLE_NAME\,INDEX_NAME\,DEGREE from dba_indexes where OWNER=upper('&OWNER') and TABLE_NAME=upper('&TABLE_NAME');,Chk_Table_Index_Degree,,,0,
Z:"Inittrans"=00000008
 SEND,select owner\,INI_TRANS\,MAX_TRANS from dba_indexes where INDEX_NAME='&INDEX_NAME';,check_for_Index,,,0,
 SEND,SELECT 'ALTER INDEX '||OWNER||'.'||INDEX_NAME||' REBUILD ONLINE INITRANS &INITTRANS_VALUE;' FROM DBA_INDEXES WHERE OWNER=upper('&OWNER') AND INDEX_NAME=upper('&IND_NAME');,Index_Rebuild_Change_inittrans,,,0,
 SEND,--EXEC DBMS_Stats.Gather_Index_Stats('&Schema_name'\, '&INDEX_Name'); \\n,Gather_Index_Stats,,,0,
 SEND,set linesize 300 \\n\r\nalter session set nls_date_format='MM/DD/YYYY HH24:MI:SS'; \\n\r\nselect INDEX_NAME\,LAST_ANALYZED\,TABLE_NAME from dba_indexes where INDEX_NAME='&INDEX_name'; \\n,StatsDate_For_Index,,,0,
 SEND,select owner\,INI_TRANS\,MAX_TRANS from dba_tables where TABLE_NAME='&TABLE_NAME' and owner='&OWNER';,check_for_table,,,0,
 SEND,set linesize 300 \\n\r\ncol index_name for a30 \\n\r\ncol tablespace_name for a30 \\n\r\ncol index_type for a40 \\n\r\ncol status for a10 \\n\r\n\r\n select INDEX_NAME\,INDEX_TYPE\,TABLESPACE_NAME\,INI_TRANS\,STATUS from dba_indexes where OWNER='&OWNER' and TABLE_NAME='&TABLE_NAME' order by 1;\\n,InitTrans_Indexes_for_Table,,,0,
 SEND,set linesize 300 \\n\r\ncol table_name for a30\\n\r\nselect TABLE_NAME\,INI_TRANS\,TABLESPACE_NAME\,DEGREE\,STATUS from dba_tables where owner='&OWNER' and table_name='&TABLE_NAME';\\n,IniTrans_Table,,,0,
 SEND,select table_owner \,INI_TRANS\,MAX_TRANS from dba_tab_partitions  where TABLE_NAME='&TABLE_NAME' and table_owner='&table_owner'; \\n,init_trans_part_tables,,,0,1,
Z:"Invalid"=00000005
 SEND,select job\,log_user\,last_date from dba_jobs where broken='Y'; \\n,chk_broken_jobs,,,
 SEND,col object_name for a50 \\n\r\ncol owner for a25 \\n\r\nset pagesize 100 \\n\r\nset linesize 300 \\n\r\ncol object_type for a25 \\n\r\nselect owner\,object_name\,object_type\,last_ddl_time\,status from dba_objects where status <> 'VALID' order by 4; \\n,Inv_Obj,,,0,
 SEND,set linesize 300 \\n\r\nset pagesize 200 \\n\r\nselect \\n\r\n    decode( OBJECT_TYPE\, 'PACKAGE BODY'\, \\n\r\n    'alter package ' || OWNER||'.'||OBJECT_NAME || ' compile body;'\, \\n\r\n    'alter ' || OBJECT_TYPE || ' ' || OWNER||'.'||OBJECT_NAME || ' compile;' ) \\n\r\nfrom \\n\r\n    dba_objects  \\n\r\nwhere \\n\r\n    STATUS = 'INVALID' and \\n\r\n    OBJECT_TYPE in ( 'PACKAGE BODY'\, 'PACKAGE'\, 'FUNCTION'\, 'PROCEDURE'\, \\n\r\n                      'TRIGGER'\, 'VIEW' ) \\n\r\norder by \\n\r\n    OBJECT_TYPE\, \\n\r\n    OBJECT_NAME; \\n,Script_for_compliling_Inv_Obj's,,,
 SEND,set linesize 300 																														\\n\r\ncol OBJECT_NAME for a30                                                                                                                 \\n\r\ncol owner for a30                                                                                                                       \\n\r\ncol last_ddl_time for a25                                                                                                               \\n\r\nset pagesize 100                                                                                                                        \\n\r\nselect owner\,object_type\,status\,count(*) from dba_objects where status <> 'VALID' group by owner\,object_type\,status order by owner;     \\n,Invalid_Obj_count_In_DB,,,0,
 SEND,@$ORACLE_HOME/rdbms/admin/utlrp.sql,utlrp.sql,,,0,
Z:"IO's "=00000003
 SEND,SET ECHO        OFF \\n\r\nSET FEEDBACK    6 \\n\r\nSET HEADING     ON \\n\r\nSET LINESIZE    180 \\n\r\nSET PAGESIZE    50000 \\n\r\nSET TERMOUT     ON \\n\r\nSET TIMING      OFF \\n\r\nSET TRIMOUT     ON \\n\r\nSET TRIMSPOOL   ON \\n\r\nSET VERIFY      OFF \\n\r\n\r\nCLEAR COLUMNS \\n\r\nCLEAR BREAKS \\n\r\nCLEAR COMPUTES \\n\r\n\r\nCOLUMN sid               FORMAT 999999            HEADING 'SID' \\n\r\nCOLUMN serial_id         FORMAT 99999999          HEADING 'Serial ID' \\n\r\nCOLUMN session_status    FORMAT a9                HEADING 'Status' \\n\r\nCOLUMN oracle_username   FORMAT a12               HEADING 'Oracle User' \\n\r\nCOLUMN os_username       FORMAT a12               HEADING 'O/S User' \\n\r\nCOLUMN os_pid            FORMAT a8                HEADING 'O/S PID' \\n\r\nCOLUMN session_machine   FORMAT a25               HEADING 'Machine'          TRUNC \\n\r\nCOLUMN session_program   FORMAT a40               HEADING 'Session Program'  TRUNC \\n\r\nCOLUMN logical_io        FORMAT 999\,999\,999\,999   HEADING 'Logical I/O' \\n\r\nCOLUMN physical_reads    FORMAT 999\,999\,999\,999   HEADING 'Physical Reads' \\n\r\nCOLUMN physical_writes   FORMAT 999\,999\,999\,999   HEADING 'Physical Writes' \\n\r\n\r\nSELECT \\n\r\n    s.sid                 sid \\n\r\n  \, s.serial#             serial_id \\n\r\n  \, s.status              session_status \\n\r\n  \, s.username            oracle_username \\n\r\n  \, s.osuser              os_username \\n\r\n  \, p.spid                os_pid \\n\r\n  \, s.machine             session_machine \\n\r\n  \, s.program             session_program \\n\r\n  \, sstat1.value \\n\r\n    + sstat2.value        logical_io \\n\r\n  \, sstat3.value          physical_reads \\n\r\n  \, sstat4.value          physical_writes \\n\r\nFROM \\n\r\n    v$process  p \\n\r\n  \, v$session  s \\n\r\n  \, v$sesstat  sstat1 \\n\r\n  \, v$sesstat  sstat2 \\n\r\n  \, v$sesstat  sstat3 \\n\r\n  \, v$sesstat  sstat4 \\n\r\n  \, v$statname statname1 \\n\r\n  \, v$statname statname2 \\n\r\n  \, v$statname statname3 \\n\r\n  \, v$statname statname4 \\n\r\nWHERE \\n\r\n      p.addr (+)            = s.paddr \\n\r\n  AND s.sid                 = sstat1.sid \\n\r\n  AND s.sid                 = sstat2.sid \\n\r\n  AND s.sid                 = sstat3.sid \\n\r\n  AND s.sid                 = sstat4.sid \\n\r\n  AND statname1.statistic#  = sstat1.statistic# \\n\r\n  AND statname2.statistic#  = sstat2.statistic# \\n\r\n  AND statname3.statistic#  = sstat3.statistic# \\n\r\n  AND statname4.statistic#  = sstat4.statistic# \\n\r\n  AND statname1.name        = 'db block gets' \\n\r\n  AND statname2.name        = 'consistent gets' \\n\r\n  AND statname3.name        = 'physical reads' \\n\r\n  AND statname4.name        = 'physical writes' \\n\r\nORDER BY logical_io DESC; \\n\r\n,Check_Logical_PhyReads_PhyWrites_For_Sessions,,,
 SEND,\r\nSET ECHO        OFF \\n\r\nSET FEEDBACK    6 \\n\r\nSET HEADING     ON \\n\r\nSET LINESIZE    180 \\n\r\nSET PAGESIZE    50000 \\n\r\nSET TERMOUT     ON \\n\r\nSET TIMING      OFF \\n\r\nSET TRIMOUT     ON \\n\r\nSET TRIMSPOOL   ON \\n\r\nSET VERIFY      OFF \\n\r\n\r\nCLEAR COLUMNS \\n\r\nCLEAR BREAKS \\n\r\nCLEAR COMPUTES \\n\r\n\r\nCOLUMN sid               FORMAT 999999            HEADING 'SID' \\n\r\nCOLUMN serial_id         FORMAT 99999999          HEADING 'Serial ID' \\n\r\nCOLUMN session_status    FORMAT a9                HEADING 'Status' \\n\r\nCOLUMN oracle_username   FORMAT a12               HEADING 'Oracle User' \\n\r\nCOLUMN os_username       FORMAT a12               HEADING 'O/S User' \\n\r\nCOLUMN os_pid            FORMAT a8                HEADING 'O/S PID' \\n\r\nCOLUMN session_machine   FORMAT a25               HEADING 'Machine'          TRUNC \\n\r\nCOLUMN session_program   FORMAT a40               HEADING 'Session Program'  TRUNC \\n\r\nCOLUMN logical_io        FORMAT 999\,999\,999\,999   HEADING 'Logical I/O' \\n\r\nCOLUMN physical_reads    FORMAT 999\,999\,999\,999   HEADING 'Physical Reads' \\n\r\nCOLUMN physical_writes   FORMAT 999\,999\,999\,999   HEADING 'Physical Writes' \\n\r\n\r\nSELECT \\n\r\n    s.sid                 sid \\n\r\n  \, s.serial#             serial_id \\n\r\n  \, s.status              session_status \\n\r\n  \, s.username            oracle_username \\n\r\n  \, s.osuser              os_username \\n\r\n  \, p.spid                os_pid \\n\r\n  \, s.machine             session_machine \\n\r\n  \, s.program             session_program \\n\r\n  \, sstat1.value \\n\r\n    + sstat2.value        logical_io \\n\r\n  \, sstat3.value          physical_reads \\n\r\n  \, sstat4.value          physical_writes \\n\r\nFROM \\n\r\n    v$process  p \\n\r\n  \, v$session  s \\n\r\n  \, v$sesstat  sstat1 \\n\r\n  \, v$sesstat  sstat2 \\n\r\n  \, v$sesstat  sstat3 \\n\r\n  \, v$sesstat  sstat4 \\n\r\n  \, v$statname statname1 \\n\r\n  \, v$statname statname2 \\n\r\n  \, v$statname statname3 \\n\r\n  \, v$statname statname4 \\n\r\nWHERE \\n\r\n      p.addr (+)            = s.paddr \\n\r\n  AND s.sid                 = sstat1.sid \\n\r\n  AND s.sid                 = sstat2.sid \\n\r\n  AND s.sid                 = sstat3.sid \\n\r\n  AND s.sid                 = sstat4.sid \\n\r\n  AND statname1.statistic#  = sstat1.statistic# \\n\r\n  AND statname2.statistic#  = sstat2.statistic# \\n\r\n  AND statname3.statistic#  = sstat3.statistic# \\n\r\n  AND statname4.statistic#  = sstat4.statistic# \\n\r\n  AND statname1.name        = 'db block gets' \\n\r\n  AND statname2.name        = 'consistent gets' \\n\r\n  AND statname3.name        = 'physical reads' \\n\r\n  AND statname4.name        = 'physical writes' \\n\r\n  and s.sid=&sid \\n\r\nORDER BY logical_io DESC; \\n\r\n\r\n,Check_Logical_PhyReads_PhyWrites_For_Sessions,,,
 SEND,SET LINESIZE 145 \\n\r\nSET PAGESIZE 9999 \\n\r\nSET TIME ON \\n\r\n \\n\r\nCOLUMN sid                 FORMAT 999              HEADING 'SID' \\n\r\nCOLUMN session_status      FORMAT a8               HEADING 'Status'          JUSTIFY right \\n\r\nCOLUMN oracle_username     FORMAT a11              HEADING 'Oracle User'     JUSTIFY right \\n\r\nCOLUMN session_program     FORMAT a18              HEADING 'Session Program' TRUNC \\n\r\nCOLUMN cpu_value           FORMAT 999\,999\,999      HEADING 'CPU' \\n\r\nCOLUMN logical_io          FORMAT 999\,999\,999\,999  HEADING 'Logical I/O' \\n\r\nCOLUMN physical_reads      FORMAT 999\,999\,999\,999  HEADING 'Physical Reads' \\n\r\nCOLUMN physical_writes     FORMAT 999\,999\,999\,999  HEADING 'Physical Writes' \\n\r\nCOLUMN session_pga_memory  FORMAT 9\,999\,999\,999    HEADING 'PGA Memory'  \\n\r\nCOLUMN open_cursors        FORMAT 99\,999           HEADING 'Cursors' \\n\r\nCOLUMN num_transactions    FORMAT 999\,999          HEADING 'Txns' \\n\r\n\r\nprompt  \\n\r\nprompt +------------------------------------------------------+ \\n\r\nprompt | User Sessions and Statistics Ordered by Logical I/O  | \\n\r\nprompt +------------------------------------------------------+ \\n\r\n \\n\r\nSELECT \\n\r\n    s.sid                sid \\n\r\n  \, lpad(s.status\,8)     session_status \\n\r\n  \, lpad(s.username\,11)  oracle_username \\n\r\n  \, s.program            session_program \\n\r\n  \, sstat1.value         cpu_value \\n\r\n  \, sstat2.value + \\n\r\n    sstat3.value         logical_io \\n\r\n  \, sstat4.value         physical_reads \\n\r\n  \, sstat5.value         physical_writes \\n\r\n  \, sstat6.value         session_pga_memory \\n\r\n  \, sstat7.value         open_cursors \\n\r\n  \, sstat8.value         num_transactions \\n\r\nFROM  \\n\r\n    v$process  p \\n\r\n  \, v$session  s \\n\r\n  \, v$sesstat  sstat1 \\n\r\n  \, v$sesstat  sstat2 \\n\r\n  \, v$sesstat  sstat3 \\n\r\n  \, v$sesstat  sstat4 \\n\r\n  \, v$sesstat  sstat5 \\n\r\n  \, v$sesstat  sstat6 \\n\r\n  \, v$sesstat  sstat7 \\n\r\n  \, v$sesstat  sstat8 \\n\r\n  \, v$statname statname1 \\n\r\n  \, v$statname statname2 \\n\r\n  \, v$statname statname3 \\n\r\n  \, v$statname statname4 \\n\r\n  \, v$statname statname5 \\n\r\n  \, v$statname statname6 \\n\r\n  \, v$statname statname7 \\n\r\n  \, v$statname statname8 \\n\r\nWHERE \\n\r\n      p.addr                = s.paddr \\n\r\n  AND s.sid                 = sstat1.sid \\n\r\n  AND s.sid                 = sstat2.sid \\n\r\n  AND s.sid                 = sstat3.sid \\n\r\n  AND s.sid                 = sstat4.sid \\n\r\n  AND s.sid                 = sstat5.sid \\n\r\n  AND s.sid                 = sstat6.sid \\n\r\n  AND s.sid                 = sstat7.sid \\n\r\n  AND s.sid                 = sstat8.sid \\n\r\n  AND statname1.statistic#  = sstat1.statistic# \\n\r\n  AND statname2.statistic#  = sstat2.statistic# \\n\r\n  AND statname3.statistic#  = sstat3.statistic# \\n\r\n  AND statname4.statistic#  = sstat4.statistic# \\n\r\n  AND statname5.statistic#  = sstat5.statistic# \\n\r\n  AND statname6.statistic#  = sstat6.statistic# \\n\r\n  AND statname7.statistic#  = sstat7.statistic# \\n\r\n  AND statname8.statistic#  = sstat8.statistic# \\n\r\n  AND statname1.name        = 'CPU used by this session' \\n\r\n  AND statname2.name        = 'db block gets' \\n\r\n  AND statname3.name        = 'consistent gets' \\n\r\n  AND statname4.name        = 'physical reads' \\n\r\n  AND statname5.name        = 'physical writes' \\n\r\n  AND statname6.name        = 'session pga memory' \\n\r\n  AND statname7.name        = 'opened cursors current' \\n\r\n  AND statname8.name        = 'user commits' \\n\r\n  AND s.sid = &SID  \\n\r\nORDER BY logical_io DESC; \\n\r\n\r\n,chk_Log_Phy_PhyWr_For_Sess,,,0,
Z:"Killby.."=00000011
 SEND,,NR->NonRAC,,,0,
 SEND,set linesize 300 \\n\r\nselect name||' - '||instance_name||'@'||host_name||' - '||DB_UNIQUE_NAME||' - '||version||' - '||open_mode||' - '||to_char(startup_time\,'DD-MON-YYYY HH24:MI:SS') || ' - '|| database_role from v$database\, v$instance; \\n,ins_INFO,,,0,
 SEND,set linesize 300 \\n\r\n\r\nselect INST_ID\,INSTANCE_NAME\,host_name\,to_char(startup_time\,'DD-MON-YYYY HH24:MI:SS')\,INSTANCE_ROLE from gv$instance order by inst_id; \\n\r\n,gv_in_info,,,0,
 SEND,set feed on echo on \\n\r\nset lines 300 pages 200 \\n\r\ncol machine for a25 \\n\r\ncol sid for 9999999 \\n\r\ncol serial# for 9999999 \\n\r\ncol username for a15 \\n\r\ncol osuser for a15 \\n\r\nselect inst_id\,sid\, serial#\, username\, osuser\, status\, machine\, PROGRAM\,to_char(logon_time\,'YYYY-MM-DD HH24:MI:SS') login_time \\n\r\nfrom gv$session where status='ACTIVE' and username is not null \\n\r\norder by 1\,username\, login_time ; \\n,sa_Acti,,,
 SEND,set feed on echo on \\n\r\nset lines 300 pages 200 \\n\r\ncol machine for a45 \\n\r\ncol sid for 9999999 \\n\r\ncol serial# for 9999999 \\n\r\ncol username for a15 \\n\r\ncol osuser for a15 \\n\r\ncol program for a40 \\n\r\nselect inst_id\,sid\, serial#\, username\, osuser\, status\, machine\, PROGRAM\,to_char(logon_time\,'YYYY-MM-DD HH24:MI:SS') login_time \\n\r\nfrom gv$session where username is not null \\n\r\norder by 1\,username\, login_time ; \\n,sa_Ac_In,,,
 SEND,\r\nset feed on echo off \\n\r\nset lines 130 pages 1000 \\n\r\nshow parameter db_name \\n\r\nshow parameter instance_name  \\n\r\ncol machine for a40 \\n\r\nbreak on username skip 1 \\n\r\ncompute sum of count(1) on username \\n\r\n\r\nselect inst_id\, machine\,username\,count(1) from gv$session where username not like 'DBSN%' \\n\r\nand username is not null \\n\r\ngroup by inst_id\,machine\,username order by 1\,3\,2;  \\n\r\n\r\n,Sess_count_User,,,0,
 SEND,select username\,count(*) from gv$session group by username order by 1;\r\n,UserName_Count,,,0,
 SEND,select \r\n   sys_context('USERENV'\,'SID') \r\nfrom dual; \\n,my_SID,,,0,
 SEND,set linesize 300 \\n\r\ncol a for a60 \\n\r\ncol machine for a20 \\n\r\ncol username for a20 \\n\r\ncol terminal for a20 \\n\r\ncol program for a20 \\n\r\ncol osuser for a20 \\n\r\n\r\nSELECT 'alter system kill session ''' || s.sid || '\,' || s.SERIAL# || ''' immediate;' a\, \\n\r\ns.program\, \\n\r\nto_char(s.logon_time\,'DD-MON-YYYY HH24:MI:SS')\, \\n\r\ns.status\, \\n\r\ns.username\, \\n\r\ns.machine\, \\n\r\ns.program\, \\n\r\ns.osuser\, \\n\r\n'kill -9 ' || p.SPID \\n\r\nFROM v$session s\, v$process p \\n\r\nWHERE ( (p.addr(+) = s.paddr)) and s.username is not null and s.username not in ('SYSTEM'\,'DBSNMP'\,'RMAN') \\n\r\nAND s.sid = &sid; \\n\r\n,killbysid,,,0,
 SEND,SET lines 200 \\n\r\nSET pages 200 \\n\r\nSET ECHO OFF \\n\r\nSET FEEDBACK OFF \\n\r\nSELECT 'alter system kill session ''' || SID || '\,' || serial#|| ''' immediate;'\, ' '|| username user_name\,'  '||osuser\,''||status  \\n\r\nFROM v$session \\n\r\nwhere machine = '&machine' and username is not null and username not in ('SYS'\,'SYSTEM'); \\n,NR_killbyMACHINE,,,0,
 SEND,SET lines 200 \\n\r\nSET pages 200 \\n\r\nSET ECHO OFF \\n\r\nSET FEEDBACK OFF \\n\r\nSELECT 'alter system kill session ''' || SID || '\,' || serial#|| ''' immediate;' \, ' '|| username user_name\,'  '||osuser\,''||status \\n\r\nFROM v$session \\n\r\nwhere username = '&username'; \\n,NR_KillbyUSERNAME,,,0,
 SEND,SET lines 200 \\n\r\nSET pages 200 \\n\r\nSELECT 'alter system kill session ''' || SID || '\,' || serial#|| ''' immediate;'\, ' '|| username user_name\,'  '||osuser\,''||status \\n\r\nFROM v$session \\n\r\nwhere osuser = '&osuser' order by status; \\n,NR_Killby_OS_USER,,,0,
 SEND,SET lines 200 \\n\r\nSET pages 200 \\n\r\nSET ECHO OFF \\n\r\nSELECT 'alter system kill session ''' || SID || '\,' || serial#|| ''' immediate;'\, ' '|| username user_name\,'  '||osuser\,''||status  \\n\r\nFROM v$session \\n\r\nwhere program = '&program'; \\n,NR_KillbyProgram,,,0,
 SEND,SET lines 200 \\n\r\nSET pages 200 \\n\r\nSET ECHO OFF \\n\r\nSELECT 'alter system kill session ''' || SID || '\,' || serial#|| ''' immediate;'\, ' '|| username user_name\,'  '||osuser\,''||status  \\n\r\nFROM v$session \\n\r\nwhere status = '&status'; \\n,NR_KillByStatus,,,0,
 SEND,  \r\nSET lines 300 \\n\r\nSET pages 200 \\n\r\ncol user_name for a20 \\n\r\ncol kiill for a60 \\n\r\ncol login_time for a20 \\n\r\ncol event for a30 \\n\r\ncol status for a10 \\n\r\ncol machine for a35 \\n\r\n\r\nSELECT 'alter system kill session ''' || SID || '\,' || serial#||'\,@'||inst_id \\n\r\n       || ''' immediate;' Kiill\, ' '||username user_name\, \\n\r\n	   to_char(logon_time\,'DD-MON-YYYY HH24:MI:SS') login_time\,event\,status\,machine\,LAST_CALL_ET/60 in_MIN \\n\r\n  FROM gv$session where username is not null and  \\n\r\n  username not in ('SYSTEM'\,'DBSNMP'\,'RMAN') and username='&username' order by inst_id; \\n,RAC_Killbyusername,,,0,
 SEND,SET lines 300 \\n\r\nSET pages 200 \\n\r\ncol user_name for a20 \\n\r\ncol kiill for a60 \\n\r\ncol login_time for a20 \\n\r\ncol event for a30 \\n\r\ncol status for a10 \\n\r\ncol machine for a35 \\n\r\n\r\nSELECT 'alter system kill session ''' || SID || '\,' || serial#||'\,@'||inst_id \\n\r\n       || ''' immediate;' Kiill\, ' '||username user_name\, \\n\r\n	   to_char(logon_time\,'DD-MON-YYYY HH24:MI:SS') login_time\,event\,status\,machine\,LAST_CALL_ET/60 in_MIN \\n\r\n  FROM gv$session where username is not null and  \\n\r\n  username not in ('SYSTEM'\,'DBSNMP'\,'RMAN') and sql_id='&sql_id' order by inst_id; \\n,RAC_KillbySQLID,,,0,
 SEND,\r\nSET lines 300 \\n\r\nSET pages 200 \\n\r\ncol user_name for a20 \\n\r\ncol kiill for a60 \\n\r\ncol login_time for a20 \\n\r\ncol event for a30 \\n\r\ncol status for a10 \\n\r\ncol machine for a35 \\n\r\n\r\nSELECT 'alter system kill session ''' || SID || '\,' || serial#||'\,@'||inst_id \\n\r\n       || ''' immediate;' Kiill\, ' '||username user_name\, \\n\r\n	   to_char(logon_time\,'DD-MON-YYYY HH24:MI:SS') login_time\,event\,status\,machine\,LAST_CALL_ET/60 in_MIN \\n\r\n  FROM gv$session where username is not null and  \\n\r\n  username not in ('SYSTEM'\,'DBSNMP'\,'RMAN') and osuser='&osuser' order by inst_id; \\n,RAC_KillbyOSUSER,,,0,
Z:"killby_1"=00000005
 SEND,set linesize 300 \\n\r\nset pagesize 100 \\n\r\ncol service_name for a40 \\n\r\nselect inst_id\,service_name\,count(*) from gv$session  group by inst_id\,service_name order by 1\,3; \\n,Service_Conn's_Count,,,0,
 SEND,set linesize 300 \\n\r\ncol service_name for a40 \\n\r\nset pagesize 100 \\n\r\nselect inst_id\,service_name\,username\,count(*) from gv$session  group by inst_id\,service_name\,username order by 1\,4; \\n,Service_user_count,,,0,
 SEND,\r\nSET lines 300 \\n\r\nSET pages 200 \\n\r\ncol user_name for a20 \\n\r\ncol kiill for a60 \\n\r\ncol login_time for a20 \\n\r\ncol event for a30 \\n\r\ncol status for a10 \\n\r\ncol machine for a35 \\n\r\n\r\nSELECT 'alter system kill session ''' || SID || '\,' || serial#||'\,@'||inst_id \\n\r\n       || ''' immediate;' Kiill\, ' '||username user_name\, \\n\r\n	   to_char(logon_time\,'DD-MON-YYYY HH24:MI:SS') login_time\,event\,status\,machine\,LAST_CALL_ET/60 in_MIN \\n\r\n  FROM gv$session where service_name='&service_name'  order by inst_id; \\n,RAC_Killby_ServiceName,,,0,
 SEND,SET lines 300 \\n\r\nSET pages 200 \\n\r\ncol user_name for a20 \\n\r\ncol kiill for a60 \\n\r\ncol login_time for a20 \\n\r\ncol event for a30 \\n\r\ncol status for a10 \\n\r\ncol machine for a35 \\n\r\n\r\nSELECT 'alter system kill session ''' || SID || '\,' || serial#||'\,@'||inst_id \\n\r\n       || ''' immediate;' Kiill\, ' '||username user_name\, \\n\r\n	   to_char(logon_time\,'DD-MON-YYYY HH24:MI:SS') login_time\,event\,status\,machine\,LAST_CALL_ET/60 in_MIN \\n\r\n  FROM gv$session where username is not null and  \\n\r\n  username not in ('SYS'\,'SYSTEM'\,'DBSNMP'\,'RMAN') and LAST_CALL_ET/60 >30 order by inst_id; \\n,RAC_Kill_Session>30_MINUTES,,,0,
 SEND,  \r\nSET lines 300 \\n\r\nSET pages 200 \\n\r\ncol user_name for a20 \\n\r\ncol kiill for a60 \\n\r\ncol login_time for a20 \\n\r\ncol event for a30 \\n\r\ncol status for a10 \\n\r\ncol machine for a35 \\n\r\n\r\nSELECT 'alter system kill session ''' || SID || '\,' || serial#||'\,@'||inst_id \\n\r\n       || ''' immediate;' Kiill\, ' '||username user_name\, \\n\r\n	   to_char(logon_time\,'DD-MON-YYYY HH24:MI:SS') login_time\,event\,status\,machine\,LAST_CALL_ET/60 in_MIN \\n\r\n  FROM gv$session where username is not null and  \\n\r\n  username not in ('SYSTEM'\,'DBSNMP'\,'RMAN') and username='&username'  and status='INACTIVE'  order by inst_id; \\n,RAC_Killbyusername_Inactive,,,0,
Z:"listener"=00000002
 SEND,--alter system set remote_listener='rac-clus-scan:1521' scope=both(;),set_remote_listener,,,0,
 SEND,--alter system set local_listener='(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=rac11g1)(PORT=1521)))' scope=both sid='orcl1'(;),set_local_listener,,,0,
Z:"Locking_Stats"=00000007
 SEND,--example : 'DEPT'\,'EMP'\,'SALGRADE' \\n\r\nset linesize 300 \\n\r\nset pagesize 100 \\n \r\ncol owner for a15  \\n\r\ncol LAST_ANALYZED for a30 \\n\r\ncol table_name for a40 \\n\r\nselect OWNER\,TABLE_NAME \,  NUM_ROWS \, BLOCKS \, EMPTY_BLOCKS \, \\n\r\nCHAIN_CNT\, AVG_ROW_LEN \\n\r\nCACHE\, to_char(LAST_ANALYZED\,'DD-MON-YYYY HH24:MI:SS') LAST_ANALYZED \\n\r\nfrom dba_tables where table_name in (&Selected_Tables_Check_Example) and owner='&OWNER'; \\n\r\n,Check_Stats_of_Table,,,0,
 SEND,--exec dbms_stats.create_stat_table ( ownname => 'SCOTT' \, stattab => 'DEPT_stat' ) ; \\n\r\n--exec dbms_stats.export_table_stats ( ownname => 'SCOTT' \, stattab => 'DEPT_stat'\, tabname => 'DEPT'\, statid => 'stats04252016')\\n\r\n--select count(*) from scott.DEPT_stat;\\n,Bkup_existing_Stats,,,0,
 SEND,set linesize 300 \\n\r\ncol table_name for a40 \\n\r\nSELECT stattype_locked\,table_name\,last_analyzed  FROM dba_tab_statistics WHERE owner = '&OWNER' and stattype_locked='ALL';  \\n,Check_Table_Stats_Locked_Or_not,,,0,
 SEND,--exec dbms_stats.lock_table_stats('SCOTT'\, 'DEPT');,Lock_the_Stats,,,0,
 SEND,--exec dbms_stats.unlock_table_stats('SCOTT'\, 'DEPT'); \\n\r\nexec dbms_stats.unlock_table_stats('&OWNER'\,'&TABLE');,Unlock_Stats_for_Table,,,0,
 SEND,-- It's example only. \\n\r\n--Options to execute below command will change from Environment to Environment \\n\r\n--exec dbms_stats.gather_table_stats(ownname=>'SCOTT'\,tabname=>'DEPT'\,estimate_percent=>100\, cascade=> TRUE\, DEGREE => 16 \,granularity => 'ALL' \, method_opt=>'for all columns size auto'); \\n,Gather_Stats,,,0,
 SEND,---exec dbms_stats.import_table_stats('SCOTT'\,'DEPT'\,NULL\,'DEPT_STAT'\,'stats04252016'\,CASCADE=>TRUE); ,Import_Old_Stats,,,0,
Z:"LSB"=00000008
 SEND,set numwidth 12 \\n\r\nset lines 300 pages 200 \\n\r\nselect a.inst_id\, \\n\r\n       a.xid\, \\n\r\n       a.start_time\, \\n\r\n       a.start_scn\, \\n\r\n       a.used_ublk\, \\n\r\n       a.status\, \\n\r\n       b.sid\, \\n\r\n       b.username\, \\n\r\n       b.module \\n\r\nfrom gv$transaction a \, \\n\r\n     gv$session  b \\n\r\nwhere a.addr=b.taddr \\n\r\norder by a.start_time; \\n,Pri>Active,,,
 SEND,\r\n\r\n set linesize 200 \\n\r\nset numwidth 20 \\n\r\ncol APPLIED_TIME for a22 \\n\r\ncol RESTART_TIME for a22 \\n\r\ncol LATEST_TIME for a22 \\n\r\ncol MINING_TIME for a22 \\n\r\n alter session set nls_date_format='dd-mon-yyyy hh24:mi:ss'; \\n\r\nselect * from v$logstdby_progress;     \\n  ,Log>Lag,,,
 SEND,set linesize 300 \\n\r\nselect name||' - '||instance_name||'@'||host_name||' - '||DB_UNIQUE_NAME||' - '||version||' - '||open_mode||' - '||to_char(startup_time\,'DD-MON-YYYY HH24:MI:SS') || ' - '|| database_role from v$database\, v$instance; \\n,instance_INFO,,,
 SEND,ALTER SESSION SET NLS_DATE_FORMAT = 'DD-MON-YY HH24:MI:SS'; \\n\r\nSET LINESIZE 200 \\n\r\nSET PAGESIZE 0 \\n\r\ncol EVENT_TIME format a15 \\n\r\ncol CURRENT_SCN FORMAT 99999999999 \\n\r\nCOL COMMIT_SCN FORMAT 99999999999 \\n\r\nCOL STATUS format a50 \\n\r\nCOL EVENT FORMAT a30 \\n\r\nSELECT EVENT_TIME\, CURRENT_SCN\, COMMIT_SCN\, STATUS\, EVENT FROM DBA_LOGSTDBY_EVENTS ORDER BY EVENT_TIMESTAMP\, COMMIT_SCN; \\n\r\n\r\n,Log>List of LSB Events,,,
 SEND,\r\nset linesize 300 \\n\r\nselect LOCAL_TRAN_ID\,GLOBAL_TRAN_ID\,STATE\,FAIL_TIME\,RETRY_TIME\,OS_USER\,OS_TERMINAL\,HOST\,DB_USER from dba_2pc_pending where state='prepared'; \\n,Pri>Prepared,,,
 SEND,select ' commit force '''|| LOCAL_TRAN_ID || ''';' FROM dba_2pc_pending where state='prepared';,Force_Commit_For_Prepared,,,
 SEND,set feed on echo on \\n\r\nset lines 300 pages 200 \\n\r\ncol machine for a25 \\n\r\ncol sid for 9999999 \\n\r\ncol serial# for 9999999 \\n\r\ncol username for a15 \\n\r\ncol osuser for a15 \\n\r\nselect inst_id\,sid\, serial#\, username\, osuser\, status\, machine\, PROGRAM\,to_char(logon_time\,'YYYY-MM-DD HH24:MI:SS') login_time \\n\r\nfrom gv$session where status='ACTIVE' and username is not null and sid='&sid' \\n\r\norder by 1\,username\, login_time ; \\n,sa_Acti,,,
 SEND,----select LOCAL_TRAN_ID from dba_2pc_pending; \\n\r\n----EXECUTE dbms_transaction.purge_lost_db_entry('&Output_of_AboveQuery'); \\n\r\n---- commit(semicolon) \\n\r\n--SELECT 'EXECUTE DBMS_TRANSACTION.PURGE_LOST_DB_ENTRY('''||LOCAL_TRAN_ID || ''');' from dba_2pc_pending; \\n,dba_2pc_pending,,,0,
Z:"Memory_Advice"=00000003
 SEND,set linesize 300 \\n\r\nset pagesize 100 \\n\r\n\r\nselect shared_pool_size_for_estimate est_size\, shared_pool_size_factor factor\, \\n\r\nestd_lc_size\, estd_lc_time_saved\, estd_lc_memory_object_hits hits \\n\r\nfrom v$shared_pool_advice \\n\r\n/ \\n,shared_pool_advice,,,0,
 SEND,set linesize 300 \\n\r\nset pagesize 100 \\n\r\nselect \\n\r\n   size_for_estimate          c1\, \\n\r\n   buffers_for_estimate       c2\, \\n\r\n   estd_physical_read_factor  c3\, \\n\r\n   estd_physical_reads        c4 \\n\r\nfrom \\n\r\n   v$db_cache_advice \\n\r\nwhere \\n\r\n   name = 'DEFAULT' \\n\r\nand \\n\r\n   block_size  = (SELECT value FROM V$PARAMETER \\n\r\n                   WHERE name = 'db_block_size') \\n\r\nand \\n\r\n   advice_status = 'ON'; \\n,db_cache_advice,,,0,
 SEND,set linesize 300 \\n\r\nset pagesize 100 \\n\r\n\r\nSELECT round(PGA_TARGET_FOR_ESTIMATE/1024/1024) target_mb\, \\n\r\n      ESTD_PGA_CACHE_HIT_PERCENTAGE cache_hit_perc\, \\n\r\n      ESTD_OVERALLOC_COUNT \\n\r\nFROM   v$pga_target_advice; \\n,pga_target_advice,,,0,
Z:"METADATA_Oracle"=0000000b
 SEND,set pagesize 0                                                                      \\n\r\nset long 90000                                                                      \\n\r\nselect dbms_metadata.get_ddl('TABLE'\,'&TABLE_NAME'\,'&OWNER') FROM DUAL;             \\n,Table_Defn,,,0,
 SEND,set pagesize 0																		\\n\r\nset long 90000                                                                      \\n\r\nselect dbms_metadata.get_ddl('PROCEDURE'\,'&PROCEDURE_NAME'\,'&OWNER') FROM DUAL;     \\n\r\n,Procedure_Defn,,,0,
 SEND,set pagesize 0                                                                      \\n\r\nset long 90000                                                                      \\n\r\nselect dbms_metadata.get_ddl('TABLESPACE'\,'&TABLESPACE_NAME') FROM DUAL;            \\n\r\n,Tablespace_Defn,,,0,
 SEND,set pagesize 0                                                                      \\n\r\nset long 90000                                                                      \\n\r\nselect dbms_metadata.get_ddl('INDEX'\,'&INDEX_NAME'\,'&OWNER') FROM DUAL;             \\n\r\n,Index_Defn,,,0,
 SEND,set pagesize 0 																		\\n\r\nset long 90000																		\\n\r\nSELECT DBMS_METADATA.GET_DDL('USER'\,'&OWNER') FROM dual;							\\n,User_Defn,,,0,
 SEND,set pagesize 0  \\n\r\nset long 90000 \\n\r\nselect dbms_metadata.get_granted_ddl('OBJECT_GRANT'\,'&USERNAME') from dual; \\n,Obj_Grant_Username,,,0,
 SEND,set pagesize 0   \\n\r\nset long 90000  \\n\r\nselect dbms_metadata.get_granted_ddl('ROLE_GRANT'\,'&USERNAME') from dual; \\n,Role_Grant_Username,,,0,
 SEND,set pagesize 0   \\n\r\nset long 90000  \\n\r\nselect dbms_metadata.get_granted_ddl('SYSTEM_GRANT'\,'&USERNAME') from dual; \\n,System_Grant_Username,,,0,
 SEND,-------------------------------------------------------------------- \\n,----,,,0,
 SEND,set pagesize 0																		\\n\r\nset long 90000                                                                      \\n\r\nselect dbms_metadata.get_ddl('USER'\,username) AS ddl from   dba_users;     \\n\r\n,USERS_Defn,,,0,
 SEND,set pagesize 0																		\\n\r\nset long 90000                                                                      \\n\r\nselect dbms_metadata.get_ddl('FUNCTION'\,'&FUNCTION_NAME'\,'&OWNER') FROM DUAL;     \\n\r\n,Function_Defn,,,0,
Z:"Object_Dependencies"=00000001
 SEND,SET LINESIZE 200 \\n\r\nSET PAGESIZE 500  \\n\r\nCOL CONSTRAINT_NAME FOR A50 \\n\r\nCOL TABLE_NAME FOR A35 \\n\r\nCOL OWNER FOR A30 \\n\r\ncol validated for a30 \\n\r\n\r\nselect table_name\, constraint_name\, status\, owner\,VALIDATED \\n\r\nfrom all_constraints \\n\r\nwhere r_owner = '&ENTER_OWNER' \\n\r\nand constraint_type = 'R' \\n\r\nand r_constraint_name in \\n\r\n(\\n\r\n   select constraint_name from all_constraints \\n\r\n   where constraint_type in ('P'\, 'U') \\n\r\n   and table_name = '&ENTER_TABLE' \\n\r\n   and owner = '&ENTER_OWNER' \\n\r\n) \\n\r\norder by table_name\, constraint_name; \\n\r\n,Table_dependencies,,,0,
Z:"Object_info"=0000000a
 SEND,set linesize 300 \\n\r\ncol object_name format a33 \\n\r\ncol owner format a22 \\n\r\ncol last_ddl_time format a14 \\n\r\ncol object_type for a20 \\n\r\nset pagesize 100 \\n\r\ncol last_ddl_time for a20 \\n\r\nselect object_id\,object_name\, object_type\, owner\, created\, last_ddl_time\,status from dba_objects where object_name like upper('%&obj_name%') order by object_name; \\n,ObjectByName,,,0,
 SEND,SET TERMOUT OFF; \\n\r\nCOLUMN current_instance NEW_VALUE current_instance NOPRINT; \\n\r\nSELECT rpad(instance_name\, 17) current_instance FROM v$instance; \\n\r\nSET TERMOUT ON; \\n\r\n\r\nPROMPT  \\n\r\nPROMPT +------------------------------------------------------------------------+ \\n\r\nPROMPT | Report   : Object Summary                                              | \\n\r\nPROMPT | Instance : &current_instance                                           | \\n\r\nPROMPT +------------------------------------------------------------------------+ \\n\r\n\r\nSET ECHO        OFF \\n\r\nSET FEEDBACK    6 \\n\r\nSET HEADING     ON \\n\r\nSET LINESIZE    180 \\n\r\nSET PAGESIZE    50000 \\n\r\nSET TERMOUT     ON \\n\r\nSET TIMING      OFF \\n\r\nSET TRIMOUT     ON \\n\r\nSET TRIMSPOOL   ON \\n\r\nSET VERIFY      OFF \\n\r\n\r\nCLEAR COLUMNS \\n\r\nCLEAR BREAKS \\n\r\nCLEAR COMPUTES \\n\r\n\r\nCOLUMN owner           FORMAT A20               HEADING "Owner" \\n\r\nCOLUMN object_type     FORMAT A25               HEADING "Object Type" \\n\r\nCOLUMN obj_count       FORMAT 999\,999\,999\,999   HEADING "Object Count" \\n\r\n\r\nBREAK ON report ON owner SKIP 2 \\n\r\n\r\nCOMPUTE sum LABEL ""               OF obj_count ON owner \\n\r\nCOMPUTE sum LABEL "Grand Total: "  OF obj_count ON report \\n\r\n\r\nSELECT \\n\r\n    owner \\n\r\n  \, object_type \\n\r\n  \, count(*)    obj_count \\n\r\nFROM \\n\r\n    dba_objects \\n\r\nGROUP BY \\n\r\n    owner \\n\r\n  \, object_type \\n\r\nORDER BY \\n\r\n    owner \\n\r\n  \, object_type; \\n\r\n\r\n\r\n,Objects_Summary,,,
 SEND,set linesize 300 \\n\r\nselect *   from dba_tab_modifications t  \\n\r\nwhere table_owner not in ('SYS'\, 'OUTLN'\, 'SYSTEM') \\n\r\nand table_name='&Table_Name';  \\n,Last_time_DML_On_Table,,,
 SEND,set linesize 300 \\n\r\ncol object_name for a40 \\n\r\nselect object_name\,to_char(last_ddl_time\,'DD-MON-YYYY HH24:MI:SS')\,OBJECT_TYPE from dba_objects where LAST_DDL_TIME > sysdate -2 order by 2; \\n,Objects_modified_in_Last_Two_Days,,,
 SEND,set linesize 300 \\n\r\nset pagesize 100 \\n\r\ncol owner for a25 \\n\r\ncol r_owner for a25 \\n\r\ncol child_table for a25 \\n\r\ncol PRIMARY_TABLE for a25 \\n\r\ncol PRIMARY_CONSTRAINT for a25 \\n\r\ncol CONSTRAINT_NAME for a25 \\n\r\ncol owner for a25 \\n\r\nselect distinct c.owner\, c.constraint_name\, C.TABLE_NAME child_table\, \\n\r\nc.delete_rule\, c.r_owner\, cc.constraint_name primary_constraint\, cc.table_name primary_table\, cc.constraint_type \\n\r\nfrom dba_constraints c\, dba_constraints cc \\n\r\nwhere c.r_owner=upper('&owner') and c.table_name=upper('&table_name') and c.r_constraint_name=cc.constraint_name \\n\r\nand c.OWNER not in ('SYS'\,'SYSTEM'\,'OUTLN'\,'PERFSTAT'\,'WEBSYS'\,'DBSNMP'); \\n,Foreign_Key_Cons's_for_Table,,,0,
 SEND,set linesize 300 																										\\n\r\nset pagesize 100                                                                                                        \\n\r\ncol owner for a15                                                                                                       \\n\r\ncol r_owner for a15                                                                                                     \\n\r\ncol constraint_name for a25                                                                                             \\n\r\ncol primary_constraint for a25                                                                                          \\n\r\ncol child_table for a25                                                                                                 \\n\r\ncol primary_table for a25                                                                                               \\n\r\n                                                                                                                        \\n\r\nselect c.owner\, c.constraint_name\, C.TABLE_NAME child_table\,                                                            \\n\r\nc.r_owner\, cc.constraint_name primary_constraint\, cc.table_name primary_table\, cc.constraint_type                       \\n\r\nfrom dba_constraints c\, dba_constraints cc                                                                              \\n\r\nwhere c.r_owner=upper('&owner') and c.table_name=upper('&table_name') and c.r_constraint_name=cc.constraint_name        \\n\r\nand c.OWNER not in ('SYS'\,'SYSTEM'\,'OUTLN'\,'PERFSTAT'\,'WEBSYS'\,'DBSNMP');                                               \\n,Chk_Primary_table,,,0,
 SEND,col table_name for a30 \\n																														\r\n\r\nset linesize 300 																					\\n\r\nset pagesize 100 																					\\n							\r\ncol owner for a15                                                                                   \\n\r\ncol constraint_name for a35  																		\\n										\r\ncol r_owner for a15                                                                                 \\n\r\ncol r_constraint_name for a25                                                                       \\n\r\nselect owner\,constraint_name\,status\,constraint_type\,table_name\,r_owner\,r_constraint_name                 \\n\r\nfrom all_constraints                                                                            \\n\r\nwhere constraint_type='R'                                                                        \\n\r\nand r_constraint_name in (select constraint_name from all_constraints                            \\n\r\nwhere constraint_type in ('P'\,'U') and table_name=upper('&TABLE_NAME')) and owner='&OWNER';                                 \\n\r\n\r\n,Chk_Child_tables,,,0,
 SEND,set linesize 300																				\\n	\r\ncol column_name for a30                                                                         \\n\r\ncol owner for a30 \\n\r\ncol table_name for a25 \\n\r\nSELECT distinct cols.table_name\, cols.column_name\, cols.position\, cons.status\, cons.owner       \\n\r\nFROM all_constraints cons\, all_cons_columns cols                                                \\n\r\nWHERE cols.table_name = upper('&TABLE_NAME')                                                    \\n\r\nAND cons.constraint_type = 'P'                                                                  \\n\r\nAND cons.constraint_name = cols.constraint_name                                                 \\n\r\nAND cons.owner = upper('&OWNER_NAME')                                                           \\n\r\nORDER BY cols.table_name\, cols.position;                                                        \\n\r\n,Chk_Primary_Key_col,,,0,
 SEND,select object_type\,count(*) from dba_objects where owner=upper('&username') group by object_type order by 1;,No_of_obj_ForUser,,,0,
 SEND,set linesize 300 \\n\r\nCOLUMN TABLE_NAME FORMAT A30 \\n\r\nCOLUMN CONSTRAINT_NAME FORMAT A30 \\n\r\nSET PAGESIZ 100 \\n\r\ncol owner for a30 \\n\r\nselect OWNER\,TABLE_NAME\, CONSTRAINT_NAME\, CONSTRAINT_TYPE\,status from DBA_CONSTRAINTS WHERE upper(TABLE_NAME) = upper('&TABLE_NAME') and upper(owner)=upper('&OWNER') ORDER BY 1\,4; \\n\r\n,Table_constraints,,,0,
Z:"Old_sessions"=00000003
 SEND,  \r\n\r\nSET lines 300  \\n\r\nSET pages 200  \\n\r\ncol user_name for a20  \\n\r\ncol login_time for a20  \\n\r\ncol event for a30  \\n\r\ncol status for a10  \\n\r\ncol machine for a35  \\n\r\n\r\nSELECT sid\,serial#\,username user_name\,  \\n\r\n	   to_char(logon_time\,'DD-MON-YYYY HH24:MI:SS') login_time\,event\,status\,machine\,LAST_CALL_ET/60 in_MIN  \\n\r\n  FROM gv$session where username is not null and  (LAST_CALL_ET/60)>(&No_ofDays*24*60) order by 4 desc;  \\n\r\n  ,Check_old_Sessions_For_last_N_days,,,
 SEND,  \r\n\r\nSET lines 300  \\n\r\nSET pages 200  \\n\r\ncol user_name for a20  \\n\r\ncol login_time for a20  \\n\r\ncol event for a30  \\n\r\ncol status for a10  \\n\r\ncol machine for a35  \\n\r\n\r\nSELECT sid\,serial#\,username user_name\,  \\n\r\n	   to_char(logon_time\,'DD-MON-YYYY HH24:MI:SS') login_time\,event\,status\,machine\,LAST_CALL_ET/60 in_MIN  \\n\r\n  FROM gv$session where username is not null and  (LAST_CALL_ET/60)<=80 order by 4 desc;  \\n\r\n  ,Check_old_Sessions_For_last_N_days,,,
 SEND, \r\n\r\nSET lines 300  \\n\r\nSET pages 200  \\n\r\ncol user_name for a20  \\n\r\ncol login_time for a20  \\n\r\ncol event for a50  \\n\r\ncol status for a10  \\n\r\ncol machine for a35  \\n\r\n\r\nSELECT sid\,serial#\,username user_name\,  \\n\r\n	   to_char(logon_time\,'DD-MON-YYYY HH24:MI:SS') login_time\,event\,status\,machine\,LAST_CALL_ET/60 in_MIN  \\n\r\n  FROM gv$session where username is not null and  (LAST_CALL_ET/60)<(&No_ofDays*24*60)  and username='&Username' order by 4 desc;  \\n\r\n   ,Old_Sessions_For_Username,,,
Z:"OS and HW info"=00000004
 SEND,lscpu \\n\r\nlscpu | grep 'On-line' \\n\r\nlscpu | grep 'Off-line' \\n,Linux_CPU's,,,0,
 SEND,grep --color 'processor' /proc/cpuinfo ,Linux_CPUs_Online,,,0,
 SEND,egrep --color 'Mem|Cache|Swap' /proc/meminfo,Linux_Memory,,,0,
 SEND,cat /proc/net/bonding/bond0,Linux_Checking_Bond0_Status,,,0,
Z:"OS Version"=00000001
 SEND, cat /etc/issue \\n\r\nlsb_release -a \\n,RedHat??,,,0,
Z:"OS_Performance"=00000004
 SEND,## for ((;;)) do sar 2 30; sleep 10; done  \\n,Sar_CPU_2Sec_30SecInter_Infinite,,,0,
 SEND,## Choose date and modify sa07 as per requirement \\n\r\n#sar -u -f /var/log/sa/sa07 \\n\r\n## sar -u -f /var/log/sa/sa27 > cpu27.txt,Linux->CPU Utilization(sar),,,0,
 SEND,\r\n## sar -r -f /var/log/sa/sa02,Linux -> RAM Utilization (sar),,,0,
 SEND,###  sar -u -f /var/log/sa/sa07  > /tmp/cpu07_N4.txt \\n\r\n### sar -r -f /var/log/sa/sa07 > /tmp/Mem07_N4.txt,Sar_Data_Generate,,,0,
Z:"Parallel"=00000008
 SEND,--show parameter parallel_max_servers \\n\r\n--create table owner.tablename_bkp as select /*+ parallel(tablename\,64) */ * from owner.tablename ; \\n,create_table,,,
 SEND,set linesize 300  \\n\r\ncol username for a19  \\n\r\ncol terminal for a15  \\n\r\ncol osuser for a15  \\n\r\ncol program for a45 \\n\r\ncol time for a25 \\n\r\n\r\nselect inst_id\,sid\,sql_id\,program\,username\,to_char(LOGON_TIME\,'DD-MON-YYYY HH24:MI:SS') time\,TERMINAL\,OSUSER   \\n\r\nfrom gv$session where program like '%P0%' and sql_id is not null;  \\n ,Finding_Parallel_Queries,,,0,
 SEND,--select /*+ parallel( UTIL_SESSIONS\,4) */ * from scott.UTIL_SESSIONS;  \\n\r\n,Example_for_Select_Query_with_ParallelOption,,,0,
 SEND,set long 100000 \\n\r\nselect distinct sql_text FROM gv$sql WHERE sql_id= '&SQL_ID'; \\n,findsqltxt_sqlid,,,0,
 SEND,--alter session enable parallel dml;,Sess_Enable_Parallel_DML,,,0,
 SEND,--alter session disable parallel dml;,sess_Disable_Parallel_DML,,,0,
 SEND,set linesize 300 \\n\r\nSELECT SID\, SERIAL#\, opname\, SOFAR\, TOTALWORK\, \\n\r\nROUND(SOFAR/TOTALWORK*100\,2) COMPLETE \\n\r\nFROM V$SESSION_LONGOPS \\n\r\nWHERE \\n\r\nTOTALWORK != 0 \\n\r\nAND SOFAR != TOTALWORK \\n\r\norder by 1; \\n,longops,,,0,
 SEND,--alter session enable parallel dml; \\n\r\n--insert /*+ append */ into scott.DEPT1 select /*+ parallel(DEPT\,4) */ * from  scott.dept;\\n,Insert_FAST_Syntax,,,0,
Z:"Partitions"=00000009
 SEND,set linesize 300 \\n\r\ncol table_owner format a15 \\n\r\ncol partition_name for a25 \\n\r\ncol table_name format a28 \\n\r\ncol high_value format a90 \\n\r\ncol COLUMN_name format a30 \\n\r\nselect  \\n\r\n        pt.table_owner\,  \\n\r\n        pt.partition_name \, \\n\r\n        pt.buffer_pool\,  \\n\r\n        pt.high_value\,  \\n\r\n        pt.partition_position\,  \\n\r\n        pt.num_rows \, \\n\r\n        pt.LAST_ANALYZED\, \\n\r\n        pc.COLUMN_NAME\, \\n\r\n        pc.COLUMN_POSITION \\n\r\nfrom  \\n\r\n        dba_tab_partitions pt\, \\n\r\n        dba_part_key_columns pc \\n\r\nwhere  \\n\r\n        table_name=upper('&table_name')  \\n\r\n        AND pt.table_name=pc.name \\n\r\norder by partition_position \\n\r\n/ \\n\r\n,Chk_Partitions,,,0,
 SEND,set linesize 300 \\n\r\ncol table_owner for a30 \\n\r\ncol table_name for a30 \\n\r\nselect distinct table_name\,TABLE_OWNER from dba_tab_partitions where table_owner not in ('SYSTEM'\,'SYS'); \\n,Check_Parti_Tables,,,0,1,
 SEND,set linesize 300 \\n\r\nselect name||' - '||instance_name||'@'||host_name||' - '||DB_UNIQUE_NAME||' - '||version||' - '||open_mode||' - '||to_char(startup_time\,'DD-MON-YYYY HH24:MI:SS') || ' - '|| database_role from v$database\, v$instance; \\n,instance_INFO,,,
 SEND,set linesize 300 \\n\r\n SELECT * FROM v$option WHERE parameter = 'Partitioning'; \\n\r\n\r\n,Chk_Partition_Enabled_Disa,,,
 SEND,set linesize 300 \\n\r\ncol partition_name for a40 \\n\r\ncol TABLE_OWNER for a20 \\n\r\nSELECT table_owner\,partition_name\, num_rows FROM DBA_tab_partitions WHERE table_name = '&TABLE_NAME' and table_owner='&OWNER'; \\n,Partition_Row_Cnt,,,0,
 SEND,--select count(*) from vinod.emp_part partition(YNULL); \\n,select_partition,,,0,
 SEND,--ALTER TABLE scott.EMP   TRUNCATE PARTITION P_COMPLETE DROP STORAGE cascade  UPDATE INDEXES;,Ex:truncate_Partition,,,0,
 SEND,SELECT DBMS_ROWID.ROWID_OBJECT(ROWID) data_object_id FROM &table_name WHERE &column_name = &value; \\n,Step1:Finding_part_name_for_value,,,0,
 SEND,set linesize 300 \\n\r\ncol subobject_name for a30 \\n\r\nSELECT OWNER\, OBJECT_NAME\, SUBOBJECT_NAME\, OBJECT_ID\, DATA_OBJECT_ID\, OBJECT_TYPE\, STATUS FROM DBA_OBJECTS WHERE DATA_OBJECT_ID = &data_object_id; \\n,Step2:Finding_part_name_for_value,,,0,
Z:"password_reset"=00000004
 SEND,col username for a30 \\n\r\nselect user_id\,username from dba_users where username=upper('&USERNAME'); \\n,Finding_UserID,,,0,
 SEND,col password for a40 \\n\r\nselect user# \,password from user$ where user#=&user_id; \\n,password_Value,,,0,
 SEND,--alter user <USERNAME> identified by values 'value of password from user$ view'; \\n,password_reset,,,0,
 SEND,set linesize 300  \\n\r\nset pagesize 100 \\n\r\ncol username for a40 \\n\r\n\r\n   SELECT USERNAME\, ACCOUNT_STATUS\, TO_CHAR(EXPIRY_DATE\,'MM/DD/YYYY') EXPIRY_DATE\, \\n\r\n          DECODE(SIGN(TRUNC(expiry_date)-trunc(SYSDATE))\,-1\,'<---YES') "Pwd chg reqd.?" \\n\r\n   FROM   DBA_USERS \\n\r\n   WHERE  USERNAME NOT IN ('SYS'\,'SYSTEM'\,'DBSNMP'\,'WMSYS'\,'MDSYS'\,'SYSBACKUP'\,'OUTLN'\,'CTXSYS'\,'ANONYMOUS'\,'APPQOSSYS'\,'OLAPSYS') \\n\r\n   AND    ACCOUNT_STATUS NOT LIKE '%LOCKED' \\n\r\n   AND TRUNC(EXPIRY_DATE)  <= TRUNC(SYSDATE) + 100; \\n,Password_expiry,,,0,
Z:"patching"=0000000d
 SEND,SET linesize 200 pagesize 200 \\n\r\ncol action_time FOR a28 \\n\r\ncol version FOR a10 \\n\r\ncol comments FOR a35 \\n\r\ncol action FOR a25 \\n\r\ncol namespace FOR a12 \\n\r\nSELECT * FROM registry$history;  \\n,check_Patch,,,
 SEND,set linesize 300 \\n\r\nselect name||' - '||instance_name||'@'||host_name||' - '||DB_UNIQUE_NAME||' - '||version||' - '||open_mode||' - '||to_char(startup_time\,'DD-MON-YYYY HH24:MI:SS') || ' - '|| database_role from v$database\, v$instance; \\n,instance_INFO,,,
 SEND,set linesize 300 \\n\r\ncol comp_name for a80 \\n\r\nselect comp_name\,version\,status from dba_registry; \\n,dba_registry,,,
 SEND,$ORACLE_HOME/OPatch/opatch lsinventory,opatch_inven,,,
 SEND,select * from v$timezone_file; \\n,Timezone,,,
 SEND,set linesize 300 \\n\r\ncol PROPERTY_NAME for a50   \\n\r\ncol value for a30 \\n\r\nSELECT PROPERTY_NAME\, SUBSTR(property_value\, 1\, 30) value \\n\r\nFROM DATABASE_PROPERTIES \\n\r\nWHERE PROPERTY_NAME LIKE 'DST_%' \\n\r\nORDER BY PROPERTY_NAME; \\n,Chk_DST_Time,,,0,
 SEND,col comments for a50 \\n\r\nset linesize 300 \\n\r\n\r\nselect comments\, version\, bundle_series \\n\r\nfrom sys.registry$history \\n\r\nwhere bundle_series = 'PSU' \\n\r\norder by action_time; \\n,registry$history,,,0,
 SEND,export ORACLE_BASE=/opt/oracle,export O_B,,,0,
 SEND,ls -ltr $ORACLE_HOME/oracore/zoneinfo/time*,how to check timezone at OS,,,0,
 SEND,select * from DBA_REGISTRY_SQLPATCH; \r\n,Check_PSU_Details,,,0,1,
 SEND,###crsctl query crs activeversion -f,crsctl_active_version,,,0,1,
 SEND,###/u01/app/grid/product/12102/bin/kfod op=patches ,Chk_patch_Lev-1,,,0,1,
 SEND,####/u01/app/grid/product/12102/bin/kfod op=patchlvl ,chk_patch_level-2,,,0,1,
Z:"PERF"=0000000e
 SEND,set linesize 300 \\n\r\nSELECT SID\, SERIAL#\, opname\, SOFAR\, TOTALWORK\, \\n\r\nROUND(SOFAR/TOTALWORK*100\,2) COMPLETE \\n\r\nFROM V$SESSION_LONGOPS \\n\r\nWHERE \\n\r\nTOTALWORK != 0 \\n\r\nAND SOFAR != TOTALWORK \\n\r\norder by 1; \\n,longops,,,
 SEND,set linesize 300 \\n\r\nselect TABLE_NAME \,  NUM_ROWS \, BLOCKS \, EMPTY_BLOCKS \, \\n\r\n CHAIN_CNT\, AVG_ROW_LEN\, AVG_SPACE_FREELIST_BLOCKS\, NUM_FREELIST_BLOCKS\, \\n\r\n CACHE\, LAST_ANALYZED\, BUFFER_POOL  \\n\r\nfrom dba_tables where table_name like upper('&tablename'); \\n,StatsByTable,,,
 SEND,SET TERMOUT OFF; \\n\r\nCOLUMN current_instance NEW_VALUE current_instance NOPRINT; \\n\r\nSELECT rpad(instance_name\, 17) current_instance FROM v$instance; \\n\r\nSET TERMOUT ON; \\n\r\n\r\nPROMPT  \\n\r\nPROMPT +------------------------------------------------------------------------+ \\n\r\nPROMPT | Report   : User Sessions Ordered by Current PGA Size                   | \\n\r\nPROMPT | Instance : &current_instance                                           | \\n\r\nPROMPT +------------------------------------------------------------------------+ \\n\r\n\r\nSET ECHO        OFF \\n\r\nSET FEEDBACK    6 \\n\r\nSET HEADING     ON \\n\r\nSET LINESIZE    180 \\n\r\nSET PAGESIZE    50000 \\n\r\nSET TERMOUT     ON \\n\r\nSET TIMING      OFF \\n\r\nSET TRIMOUT     ON \\n\r\nSET TRIMSPOOL   ON \\n\r\nSET VERIFY      OFF \\n\r\n\r\nCLEAR COLUMNS \\n\r\nCLEAR BREAKS \\n\r\nCLEAR COMPUTES \\n\r\n\r\nCOLUMN sid                      FORMAT 999999         HEADING 'SID' \\n\r\nCOLUMN serial_id                FORMAT 99999999       HEADING 'Serial ID' \\n\r\nCOLUMN session_status           FORMAT a9             HEADING 'Status' \\n\r\nCOLUMN oracle_username          FORMAT a12            HEADING 'Oracle User' \\n\r\nCOLUMN os_username              FORMAT a12            HEADING 'O/S User' \\n\r\nCOLUMN os_pid                   FORMAT a8             HEADING 'O/S PID' \\n\r\nCOLUMN session_machine          FORMAT a20            HEADING 'Machine'          TRUNC \\n\r\nCOLUMN session_program          FORMAT a30            HEADING 'Session Program'  TRUNC \\n\r\nCOLUMN session_pga_memory       FORMAT 9\,999\,999\,999  HEADING 'PGA Memory' \\n\r\nCOLUMN session_pga_memory_max   FORMAT 9\,999\,999\,999  HEADING 'PGA Memory Max' \\n\r\nCOLUMN session_uga_memory       FORMAT 9\,999\,999\,999  HEADING 'UGA Memory' \\n\r\nCOLUMN session_uga_memory_max   FORMAT 9\,999\,999\,999  HEADING 'UGA Memory MAX' \\n\r\n\r\nSELECT \\n\r\n    s.sid             sid \\n\r\n  \, s.serial#         serial_id \\n\r\n  \, s.status          session_status \\n\r\n  \, s.username        oracle_username \\n\r\n  \, s.osuser          os_username \\n\r\n  \, p.spid            os_pid \\n\r\n  \, s.machine         session_machine \\n\r\n  \, s.program         session_program \\n\r\n  \, sstat1.value      session_pga_memory \\n\r\n  \, sstat2.value      session_pga_memory_max \\n\r\n  \, sstat3.value      session_uga_memory \\n\r\n  \, sstat4.value      session_uga_memory_max \\n\r\nFROM  \\n\r\n    v$process  p \\n\r\n  \, v$session  s \\n\r\n  \, v$sesstat  sstat1 \\n\r\n  \, v$sesstat  sstat2 \\n\r\n  \, v$sesstat  sstat3 \\n\r\n  \, v$sesstat  sstat4 \\n\r\n  \, v$statname statname1 \\n\r\n  \, v$statname statname2 \\n\r\n  \, v$statname statname3 \\n\r\n  \, v$statname statname4 \\n\r\nWHERE \\n\r\n      p.addr (+)            = s.paddr \\n\r\n  AND s.sid                 = sstat1.sid \\n\r\n  AND s.sid                 = sstat2.sid \\n\r\n  AND s.sid                 = sstat3.sid \\n\r\n  AND s.sid                 = sstat4.sid \\n\r\n  AND statname1.statistic#  = sstat1.statistic# \\n\r\n  AND statname2.statistic#  = sstat2.statistic# \\n\r\n  AND statname3.statistic#  = sstat3.statistic# \\n\r\n  AND statname4.statistic#  = sstat4.statistic# \\n\r\n  AND statname1.name        = 'session pga memory' \\n\r\n  AND statname2.name        = 'session pga memory max' \\n\r\n  AND statname3.name        = 'session uga memory' \\n\r\n  AND statname4.name        = 'session uga memory max' \\n\r\nORDER BY session_pga_memory DESC; \\n\r\n\r\n\r\n,PGA_Usage_Per_Sess,,,
 SEND,SET TERMOUT OFF; \\n\r\nCOLUMN current_instance NEW_VALUE current_instance NOPRINT; \\n\r\nSELECT rpad(instance_name\, 17) current_instance FROM v$instance; \\n\r\nSET TERMOUT ON; \\n\r\n\r\nPROMPT  \\n\r\nPROMPT +------------------------------------------------------------------------+ \\n\r\nPROMPT | Report   : User Sessions Ordered by Number of Open Cursors             | \\n\r\nPROMPT | Instance : &current_instance                                           | \\n\r\nPROMPT +------------------------------------------------------------------------+ \\n\r\n\r\nSET ECHO        OFF \\n\r\nSET FEEDBACK    6 \\n\r\nSET HEADING     ON \\n\r\nSET LINESIZE    180 \\n\r\nSET PAGESIZE    50000 \\n\r\nSET TERMOUT     ON \\n\r\nSET TIMING      OFF \\n\r\nSET TRIMOUT     ON \\n\r\nSET TRIMSPOOL   ON \\n\r\nSET VERIFY      OFF \\n\r\n\r\nCLEAR COLUMNS \\n\r\nCLEAR BREAKS \\n\r\nCLEAR COMPUTES \\n\r\n\r\nCOLUMN sid               FORMAT 999999            HEADING 'SID' \\n\r\nCOLUMN serial_id         FORMAT 99999999          HEADING 'Serial ID' \\n\r\nCOLUMN session_status    FORMAT a9                HEADING 'Status' \\n\r\nCOLUMN oracle_username   FORMAT a18               HEADING 'Oracle User' \\n\r\nCOLUMN os_username       FORMAT a18               HEADING 'O/S User' \\n\r\nCOLUMN os_pid            FORMAT a8                HEADING 'O/S PID' \\n\r\nCOLUMN session_machine   FORMAT a30               HEADING 'Machine'          TRUNC \\n\r\nCOLUMN session_program   FORMAT a40               HEADING 'Session Program'  TRUNC \\n\r\nCOLUMN open_cursors      FORMAT 99\,999            HEADING 'Open Cursors' \\n\r\nCOLUMN open_pct          FORMAT 999               HEADING 'Open %' \\n\r\n\r\nSELECT \\n\r\n    s.sid                             sid \\n\r\n  \, s.serial#                         serial_id \\n\r\n  \, s.status                          session_status \\n\r\n  \, s.username                        oracle_username \\n\r\n  \, s.osuser                          os_username \\n\r\n  \, p.spid                            os_pid \\n\r\n  \, s.machine                         session_machine \\n\r\n  \, s.program                         session_program \\n\r\n  \, sstat.value                       open_cursors \\n\r\n  \, ROUND((sstat.value/u.value)*100)  open_pct \\n\r\nFROM  \\n\r\n    v$process  p \\n\r\n  \, v$session  s \\n\r\n  \, v$sesstat  sstat \\n\r\n  \, v$statname statname \\n\r\n  \, (select name\, value \\n\r\n     from v$parameter) u \\n\r\nWHERE \\n\r\n      p.addr (+)          = s.paddr \\n\r\n  AND s.sid               = sstat.sid \\n\r\n  AND statname.statistic# = sstat.statistic# \\n\r\n  AND statname.name       = 'opened cursors current' \\n\r\n  AND u.name              = 'open_cursors' \\n\r\nORDER BY open_cursors DESC; \\n\r\n\r\n\r\n,No.of_Cursors_Per_Sess,,,
 SEND,SET TERMOUT OFF; \\n\r\nCOLUMN current_instance NEW_VALUE current_instance NOPRINT; \\n\r\nSELECT rpad(instance_name\, 17) current_instance FROM v$instance; \\n\r\nSET TERMOUT ON; \\n\r\n\r\nPROMPT  \\n\r\nPROMPT +------------------------------------------------------------------------+ \\n\r\nPROMPT | Report   : User Sessions Ordered by Number of Transactions             | \\n\r\nPROMPT | Instance : &current_instance                                           | \\n\r\nPROMPT +------------------------------------------------------------------------+ \\n\r\n\r\nSET ECHO        OFF \\n\r\nSET FEEDBACK    6 \\n\r\nSET HEADING     ON \\n\r\nSET LINESIZE    180 \\n\r\nSET PAGESIZE    50000 \\n\r\nSET TERMOUT     ON \\n\r\nSET TIMING      OFF \\n\r\nSET TRIMOUT     ON \\n\r\nSET TRIMSPOOL   ON \\n\r\nSET VERIFY      OFF \\n\r\n\r\nCLEAR COLUMNS \\n\r\nCLEAR BREAKS \\n\r\nCLEAR COMPUTES \\n\r\n\r\nCOLUMN sid               FORMAT 999999            HEADING 'SID' \\n\r\nCOLUMN serial_id         FORMAT 99999999          HEADING 'Serial ID' \\n\r\nCOLUMN session_status    FORMAT a9                HEADING 'Status' \\n\r\nCOLUMN oracle_username   FORMAT a18               HEADING 'Oracle User' \\n\r\nCOLUMN os_username       FORMAT a18               HEADING 'O/S User' \\n\r\nCOLUMN os_pid            FORMAT a8                HEADING 'O/S PID' \\n\r\nCOLUMN session_machine   FORMAT a30               HEADING 'Machine'          TRUNC \\n\r\nCOLUMN session_program   FORMAT a40               HEADING 'Session Program'  TRUNC \\n\r\nCOLUMN num_transactions  FORMAT 999\,999\,999\,999   HEADING '# Transactions' \\n\r\n\r\nSELECT \\n\r\n    s.sid             sid \\n\r\n  \, s.serial#         serial_id \\n\r\n  \, s.status          session_status \\n\r\n  \, s.username        oracle_username \\n\r\n  \, s.osuser          os_username \\n\r\n  \, p.spid            os_pid \\n\r\n  \, s.machine         session_machine \\n\r\n  \, s.program         session_program \\n\r\n  \, sstat.value       num_transactions \\n\r\nFROM  \\n\r\n    v$process  p \\n\r\n  \, v$session  s \\n\r\n  \, v$sesstat  sstat \\n\r\n  \, v$statname statname \\n\r\nWHERE \\n\r\n      p.addr (+)           = s.paddr \\n\r\n  AND s.sid                = sstat.sid \\n\r\n  AND statname.statistic#  = sstat.statistic# \\n\r\n  AND statname.name        = 'user commits' \\n\r\nORDER BY num_transactions DESC;  \\n\r\n\r\n\r\n,No.of Tran_per_Session,,,
 SEND,SET TERMOUT OFF; \\n\r\nCOLUMN current_instance NEW_VALUE current_instance NOPRINT; \\n\r\nSELECT rpad(instance_name\, 17) current_instance FROM v$instance; \\n\r\nSET TERMOUT ON; \\n\r\n\r\nPROMPT  \\n\r\nPROMPT +------------------------------------------------------------------------+ \\n\r\nPROMPT | Report   : User Sessions Ordered by CPU                                | \\n\r\nPROMPT | Instance : &current_instance                                           | \\n\r\nPROMPT +------------------------------------------------------------------------+ \\n\r\n\r\nSET ECHO        OFF \\n\r\nSET FEEDBACK    6 \\n\r\nSET HEADING     ON \\n\r\nSET LINESIZE    180 \\n\r\nSET PAGESIZE    50000 \\n\r\nSET TERMOUT     ON \\n\r\nSET TIMING      OFF \\n\r\nSET TRIMOUT     ON \\n\r\nSET TRIMSPOOL   ON \\n\r\nSET VERIFY      OFF \\n\r\n\r\nCLEAR COLUMNS \\n\r\nCLEAR BREAKS \\n\r\nCLEAR COMPUTES \\n\r\n\r\nCOLUMN sid               FORMAT 999999            HEADING 'SID' \\n\r\nCOLUMN serial_id         FORMAT 99999999          HEADING 'Serial ID' \\n\r\nCOLUMN session_status    FORMAT a9                HEADING 'Status' \\n\r\nCOLUMN oracle_username   FORMAT a18               HEADING 'Oracle User' \\n\r\nCOLUMN os_username       FORMAT a18               HEADING 'O/S User' \\n\r\nCOLUMN os_pid            FORMAT a8                HEADING 'O/S PID' \\n\r\nCOLUMN session_machine   FORMAT a30               HEADING 'Machine'          TRUNC \\n\r\nCOLUMN session_program   FORMAT a20               HEADING 'Session Program'  TRUNC \\n\r\nCOLUMN cpu_value         FORMAT 999\,999\,999\,999   HEADING 'CPU' \\n\r\nCOLUMN cpu_mins          FORMAT 999\,999\,999\,999   HEADING 'CPU MINS' \\n\r\n\r\nSELECT \\n\r\n    s.sid           sid \\n\r\n  \, s.serial#       serial_id \\n\r\n  \, s.status        session_status \\n\r\n  \, s.username      oracle_username \\n\r\n  \, s.osuser        os_username \\n\r\n  \, p.spid          os_pid \\n\r\n  \, s.machine       session_machine \\n\r\n  \, s.program       session_program \\n\r\n  \, sstat.value     cpu_value \\n\r\n  \, sstat.value/(100 * 60)     cpu_mins \\n\r\nFROM  \\n\r\n    v$process  p \\n\r\n  \, v$session  s \\n\r\n  \, v$sesstat  sstat \\n\r\n  \, v$statname statname \\n\r\nWHERE \\n\r\n      p.addr (+)          = s.paddr \\n\r\n  AND s.sid               = sstat.sid \\n\r\n  AND statname.statistic# = sstat.statistic# \\n\r\n  AND statname.name       = 'CPU used by this session' \\n\r\nORDER BY cpu_value DESC;  \\n\r\n\r\n\r\n,CPU_Usage_per_Sess,,,
 SEND,SET LINESIZE 145 \\n\r\nSET PAGESIZE 9999 \\n\r\nSET FEEDBACK off \\n\r\nSET VERIFY   off \\n\r\n\r\nCOLUMN bytes   FORMAT  999\,999\,999\,999\,999 \\n\r\nCOLUMN percent FORMAT  999.99999 \\n\r\n\r\nbreak on report \\n\r\n\r\ncompute sum of bytes on report \\n\r\ncompute sum of percent on report \\n\r\n\r\nSELECT \\n\r\n    a.name \\n\r\n  \, a.bytes \\n\r\n  \, a.bytes/(b.sum_bytes*100)  Percent   \\n\r\nFROM sys.v_$sgastat a \\n\r\n   \, (SELECT SUM(value)sum_bytes FROM sys.v_$sga) b  \\n\r\nORDER BY bytes DESC; \\n\r\n\r\n\r\n,SGA_Usage,,,
 SEND,SET lines 200 \\n\r\n\r\nCOL start_scn format 999999999999999999999999 \\n\r\nSELECT vs.inst_id\, vs.SID\, vs.serial#\, vt.xid\, vt.start_time\, vt.start_scn\, \\n\r\nvt.used_ublk\, vs.module\, vs.schemaname\, vs.status session_status\, \\n\r\nvt.status undo_status\, vs.sql_id\, vs.prev_sql_id\, last_call_et \\n\r\nFROM gv$transaction vt\, gv$session vs \\n\r\nWHERE vt.status = 'ACTIVE' \\n\r\nAND vs.inst_id = vt.inst_id \\n\r\nAND vs.taddr = vt.addr \\n\r\nAND vs.last_call_et > 10 \\n\r\nAND vs.module != 'Data Pump Worker' \\n\r\nAND vs.schemaname NOT IN ('SYS'\, 'DBSNMP'\, 'DBA_UTIL') \\n\r\n--and service_name like 'atgprd%' \\n\r\nAND vs.schemaname NOT IN ('SYS'\, 'SYSTEM') \\n\r\nORDER BY start_time\, used_ublk\, start_scn; \\n,Long_runn_Tran's,,,0,
 SEND,\r\nset linesize 300 \\n\r\n select s.sid\,s.username\,s.osuser\,t.start_time\, \\n\r\n  r.name\,t.xidusn\,t.used_ublk\,t.used_urec \\n\r\n  from v$session s\,v$transaction t\,v$rollname r \\n\r\n  where s.taddr=t.addr \\n\r\n  and t.xidusn=r.usn \\n\r\n  order by 7; \\n,Long_runng_Trans_blocks,,,
 SEND,set linesize 300 \\n\r\ncol NAME for a10 \\n\r\ncol VALUE_STRING for a70 \\n\r\nSELECT  \\n\r\n a.PLAN_HASH_VALUE\, \\n\r\nb.name\,  \\n\r\nb.position\,  \\n\r\nb.datatype_string\,  \\n\r\nb.value_string  \\n\r\nFROM \\n\r\nv$sql_bind_capture b\, \\n\r\nv$sqlarea a \\n\r\nWHERE \\n\r\nb.sql_id = '& sql_id' \\n\r\nAND  \\n\r\nb.sql_id = a.sql_id; \\n,Bind_info,,,
 SEND,SET lines 200 \\n\r\n\r\nCOL start_scn format 999999999999999999999999 \\n\r\nSELECT vs.inst_id\, vs.SID\, vs.serial#\, vt.xid\, vt.start_time\, vt.start_scn\, \\n\r\nvs.module\, vs.schemaname\, vs.status session_status\, \\n\r\nlast_call_et \\n\r\nFROM gv$transaction vt\, gv$session vs \\n\r\nWHERE vt.status = 'ACTIVE' \\n\r\nAND vs.inst_id = vt.inst_id \\n\r\nAND vs.taddr = vt.addr \\n\r\nAND vs.last_call_et > 10 \\n\r\nAND vs.module != 'Data Pump Worker' \\n\r\nAND vs.schemaname NOT IN ('SYS'\, 'DBSNMP'\, 'DBA_UTIL') \\n\r\n--and service_name like 'atgprd%' \\n\r\nAND vs.schemaname NOT IN ('SYS'\, 'SYSTEM') \\n\r\nORDER BY start_time\, used_ublk\, start_scn; \\n,Long_runn_Tran's_Selec_columns,,,0,
 SEND,set linesize 300                                                                                  \\n\r\ncol sql_text for a40                                                                              \\n\r\ncol machine for a35                                                                               \\n\r\ncol curr_user for a15                                                                             \\n\r\nset pagesize 100                                                                                  \\n\r\nselect s.INST_ID\,s.sid\,s.username curr_user\,s.sql_id\,s.status\, s.machine\, sql_text\, executions\,   \\n\r\nround(decode(executions\,0\,0\,(disk_reads/executions))) reads_per\,                                  \\n\r\nround(decode(executions\,0\,0\,(buffer_gets/executions))) buff_per\,                                  \\n\r\nround(decode(executions\,0\,0\,(rows_processed/executions))) rows_per\,                               \\n\r\nfirst_load_time                                                                                   \\n\r\nfrom gv$sqlarea v\, dba_users d\, gv$session s                                                      \\n\r\nwhere d.user_id = v.parsing_user_id                                                               \\n\r\nand s.sql_address=v.address and s.sql_hash_value=v.hash_value                                     \\n\r\norder by decode(executions\,0\,0\,(rows_processed/executions)) desc;                                 \\n,G_Sess_Current_Utili,,,0,
 SEND,col FIRST_LOAD_TIME for a20 \\n\r\nset linesize 300                                                                                  \\n\r\ncol sql_text for a40                                                                              \\n\r\ncol machine for a35                                                                               \\n\r\ncol curr_user for a15                                                                             \\n\r\nset pagesize 100                                                                                  \\n\r\nselect s.sid\,s.username curr_user\,s.sql_id\,s.status\, s.machine\, sql_text\, executions\,   \\n\r\nround(decode(executions\,0\,0\,(disk_reads/executions))) reads_per\,                                  \\n\r\nround(decode(executions\,0\,0\,(buffer_gets/executions))) buff_per\,                                  \\n\r\nround(decode(executions\,0\,0\,(rows_processed/executions))) rows_per\,                               \\n\r\nfirst_load_time                                                                                   \\n\r\nfrom v$sqlarea v\, dba_users d\, v$session s                                                      \\n\r\nwhere d.user_id = v.parsing_user_id                                                               \\n\r\nand s.sql_address=v.address and s.sql_hash_value=v.hash_value                                     \\n\r\norder by decode(executions\,0\,0\,(rows_processed/executions)) desc;                                 \\n,Sess_Current_Utili,,,0,
 SEND,\r\nset linesize 300 \\n\r\ncol name for a25 \\n\r\ncol value_string for a40 \\n\r\n\r\nSELECT \\n\r\n a.PLAN_HASH_VALUE\, \\n\r\nb.name\, \\n\r\nb.position\, \\n\r\nb.datatype_string\, \\n\r\nb.value_string \\n\r\nFROM \\n\r\nDBA_HIST_SQLBIND b\, \\n\r\nDBA_HIST_SQL_PLAN a \\n\r\nWHERE \\n\r\nb.sql_id = '& sql_id' \\n\r\nAND \\n\r\nb.sql_id = a.sql_id; \\n\r\n,Bind_info_Hist,,,0,
Z:"perf_1"=00000002
 SEND,col FIRST_LOAD_TIME for a20 \\n\r\nset linesize 300                                                                                  \\n\r\ncol sql_text for a40                                                                              \\n\r\ncol machine for a35                                                                               \\n\r\ncol curr_user for a15                                                                             \\n\r\nset pagesize 100                                                                                  \\n\r\nselect s.sid\,s.username curr_user\,s.sql_id\,s.status\, s.machine\, sql_text\, executions\,   \\n\r\nround(decode(executions\,0\,0\,(disk_reads/executions))) reads_per\,                                  \\n\r\nround(decode(executions\,0\,0\,(buffer_gets/executions))) buff_per\,                                  \\n\r\nround(decode(executions\,0\,0\,(rows_processed/executions))) rows_per\,                               \\n\r\nfirst_load_time                                                                                   \\n\r\nfrom v$sqlarea v\, dba_users d\, v$session s                                                      \\n\r\nwhere d.user_id = v.parsing_user_id                                                               \\n\r\nand s.sql_address=v.address and s.sql_hash_value=v.hash_value  \r\nand s.sid='&SID'                                     \\n\r\norder by decode(executions\,0\,0\,(rows_processed/executions)) desc;                                 \\n,Sess_Current_Utili,,,0,
 SEND,set linesi 200 pages 999 feed off verify off											\\n\r\ncol bind_name format a20                                                                \\n\r\ncol end_time format a19                                                                 \\n\r\ncol start_time format a19                                                               \\n\r\ncol peeked format a20                                                                   \\n\r\ncol passed format a20                                                                   \\n\r\n                                                                                        \\n\r\nalter session set nls_date_format='YYYY/MM/DD HH24:MI:SS';                              \\n\r\nalter session set nls_timestamp_format='YYYY/MM/DD HH24:MI:SS';                         \\n\r\n                                                                                        \\n\r\nselect                                                                                  \\n\r\npee.sql_id\,                                                                             \\n\r\nash.starting_time\,                                                                      \\n\r\nash.end_time\,                                                                           \\n\r\n(EXTRACT(HOUR FROM ash.run_time) * 3600                                                 \\n\r\n                    + EXTRACT(MINUTE FROM ash.run_time) * 60                            \\n\r\n                    + EXTRACT(SECOND FROM ash.run_time)) run_time_sec\,                  \\n\r\npee.plan_hash_value\,                                                                    \\n\r\npee.bind_name\,                                                                          \\n\r\npee.bind_pos\,                                                                           \\n\r\npee.bind_data peeked\,                                                                   \\n\r\nrun_t.bind_data passed                                                                  \\n\r\nfrom                                                                                    \\n\r\n(                                                                                       \\n\r\nselect                                                                                  \\n\r\np.sql_id\,                                                                               \\n\r\np.sql_child_address\,                                                                    \\n\r\np.sql_exec_id\,                                                                          \\n\r\nc.bind_name\,                                                                            \\n\r\nc.bind_pos\,                                                                             \\n\r\nc.bind_data                                                                             \\n\r\nfrom                                                                                    \\n\r\nv$sql_monitor p\,                                                                        \\n\r\nxmltable                                                                                \\n\r\n(                                                                                       \\n\r\n'/binds/bind' passing xmltype(p.binds_xml)                                              \\n\r\ncolumns bind_name varchar2(30) path '/bind/@name'\,                                      \\n\r\nbind_pos number path '/bind/@pos'\,                                                      \\n\r\nbind_data varchar2(30) path '/bind'                                                     \\n\r\n) c                                                                                     \\n\r\nwhere                                                                                   \\n\r\np.binds_xml is not null                                                                 \\n\r\n) run_t                                                                                 \\n\r\n\,                                                                                       \\n\r\n(                                                                                       \\n\r\nselect                                                                                  \\n\r\np.sql_id\,                                                                               \\n\r\np.child_number\,                                                                         \\n\r\np.child_address\,                                                                        \\n\r\nc.bind_name\,                                                                            \\n\r\nc.bind_pos\,                                                                             \\n\r\np.plan_hash_value\,                                                                      \\n\r\ncase                                                                                    \\n\r\n     when c.bind_type = 1 then utl_raw.cast_to_varchar2(c.bind_data)                    \\n\r\n     when c.bind_type = 2 then to_char(utl_raw.cast_to_number(c.bind_data))             \\n\r\n     when c.bind_type = 96 then to_char(utl_raw.cast_to_varchar2(c.bind_data))          \\n\r\n     else 'Sorry: Not printable try with DBMS_XPLAN.DISPLAY_CURSOR'                     \\n\r\nend bind_data                                                                           \\n\r\nfrom                                                                                    \\n\r\nv$sql_plan p\,                                                                           \\n\r\nxmltable                                                                                \\n\r\n(                                                                                       \\n\r\n'/*/peeked_binds/bind' passing xmltype(p.other_xml)                                     \\n\r\ncolumns bind_name varchar2(30) path '/bind/@nam'\,                                       \\n\r\nbind_pos number path '/bind/@pos'\,                                                      \\n\r\nbind_type number path '/bind/@dty'\,                                                     \\n\r\nbind_data  raw(2000) path '/bind'                                                       \\n\r\n) c                                                                                     \\n\r\nwhere                                                                                   \\n\r\np.other_xml is not null                                                                 \\n\r\n) pee\,                                                                                  \\n\r\n(                                                                                       \\n\r\nselect                                                                                  \\n\r\nsql_id\,                                                                                 \\n\r\nsql_exec_id\,                                                                            \\n\r\nmax(sample_time - sql_exec_start) run_time\,                                             \\n\r\nmax(sample_time) end_time\,                                                              \\n\r\nsql_exec_start starting_time                                                            \\n\r\nfrom                                                                                    \\n\r\nv$active_session_history                                                                \\n\r\ngroup by sql_id\,sql_exec_id\,sql_exec_start                                              \\n\r\n) ash                                                                                   \\n\r\nwhere                                                                                   \\n\r\npee.sql_id=run_t.sql_id and                                                             \\n\r\npee.sql_id=ash.sql_id and                                                               \\n\r\nrun_t.sql_exec_id=ash.sql_exec_id and                                                   \\n\r\npee.child_address=run_t.sql_child_address and                                           \\n\r\npee.bind_name=run_t.bind_name and                                                       \\n\r\npee.bind_pos=run_t.bind_pos and                                                         \\n\r\npee.sql_id like nvl('&sql_id'\,pee.sql_id)                                               \\n\r\norder by 1\,2\,3\,7 ;                                                                      \\n,Bind_Info_from_v$,,,0,
Z:"profile"=0000000a
 SEND,set linesize 300 \\n\r\ncol resource_name for a20 \\n\r\ncol limit for a12 \\n\r\ncol username for a30 \\n\r\n \\n\r\nselect  \\n\r\n	profile\,  \\n\r\n	profile\, \\n\r\n	RESOURCE_NAME\,LIMIT \\n\r\nfrom 	 \\n\r\n	dba_profiles \\n\r\nwhere  \\n\r\n	resource_name='SESSIONS_PER_USER' \\n\r\nunion all \\n\r\nselect  \\n\r\n	a.username\,a.profile\,b.RESOURCE_NAME\,b.LIMIT \\n\r\nfrom  \\n\r\n	dba_users a\, \\n\r\n	dba_profiles b \\n\r\nwhere  \\n\r\n	a.profile=b.profile \\n\r\n	and b.resource_name='SESSIONS_PER_USER'; \\n\r\n\r\n,softlimit,,,
 SEND,SELECT * FROM DBA_PROFILES WHERE PROFILE ='&PROFILE'; \\n,profile_details,,,
 SEND,SELECT * FROM DBA_TAB_PRIVS WHERE TABLE_NAME='&tbl_name'; \\n,Table_Priv's,,,
 SEND, select * from V$PWFILE_USERS; \\n,How_to_check_Sysdba_Priv,,,
 SEND,set linesize 300 \\n\r\nset pagesize 100 \\n\r\n SELECT * FROM DBA_ROLES; \\n,DBA_ROLES,,,0,
 SEND,set linesize 300 \\n\r\nset pagesize 300 \\n\r\nSELECT * FROM ROLE_TAB_PRIVS WHERE ROLE = '&ROLE_NAME';,Role_Details,,,0,
 SEND,set linesize 300 \\n\r\nselect grantee\, privilege\, admin_option from dba_sys_privs where grantee='&Role'; ,dba_sys_privs,,,0,
 SEND,set linesize 300 \\n\r\ncol grantee for a40 \\n\r\ncol GRANTED_ROLE for a30 \\n\r\nSELECT grantee\, granted_role FROM dba_role_privs where grantee='&User'; \\n,Roles_Granted_for_User,,,0,
 SEND,set linesize 300 \\n\r\ncol ACCOUNT_STATUS for a20 \\n\r\ncol username for a30 \\n\r\ncol EXPIRY_DATE for a20 \\n\r\nset pagesize 100 \\n\r\nselect username\,ACCOUNT_STATUS\,EXPIRY_DATE from dba_users where EXPIRY_DATE is not null order by 3; \\n,User_Details_Expiry,,,0,
 SEND,col PROFILE for a30 \\n\r\ncol RESOURCE_NAME for a30 \\n\r\ncol LIMIT for a30 \\n\r\nset linesize 300 \\n\r\nselect * from dba_profiles where profile='DEFAULT'; \\n,DBA_PROFILES,,,0,
Z:"RAC"=00000011
 SEND,crsctl query css votedisk,VD_Location,,,
 SEND,ocrcheck,ocr_location,,,
 SEND,srvctl config database \\n\r\n#srvctl config database -d <> \\n\\n,config,,,
 SEND,# srvctl config service -d <output of config> \\n,config service,,,
 SEND,srvctl status service -d <DBNAME>,status_service,,,
 SEND,# srvctl stop instance -d ORCL1 -i ORCL -o immediate  (config output) \\n,stop instance,,,
 SEND,cat /etc/llthosts,vcs,,,
 SEND,##srvctl relocate service -d rag11g -s serv_1 -i rag11g1 -t rag11g2 \\n,relocate_Servi,,,
 SEND,##/u01/app/grid/112/11203/bin> ./cemutlo -n \\n,check_Clu_Name,,,
 SEND,####cat  /var/opt/oracle/scls_scr/vinod-server-1/root/ohasdstr  \\n,Cluster_Enabled_Or_Not,,,0,
 SEND,##srvctl stop  service -d <db Unique Name> -s serv_task -i ORCL_2  \\n,stop_service,,,
 SEND,####srvctl disable database -d rag11g \\n,disable_DB,,,
 SEND,srvctl status asm,chk_ASM,,,
 SEND,for i in `srvctl config`; do echo $i; srvctl status database -d $i; done; ,All_DB's_Status_ForLoop,,,
 SEND,for i in `srvctl config`; do echo $i; srvctl status service -d $i; done;,All_DB's_Services_ForLoop,,,
 SEND, srvctl config scan ,Scan_Name,,,
 SEND,srvctl status scan \\n\r\nsrvctl status scan_listener \\n,Scan_status,,,0,
Z:"RAC_1"=0000000a
 SEND,#srvctl add service -d rag11g -s serv_1 -r rag11g1 -a rag11g2 ,Add_Service_Syntax,,,0,
 SEND,#srvctl start service -s serv_1 -d rag11g,start_service,,,0,
 SEND,####ocrconfig -showbackup,show_OCR_bkup,,,0,
 SEND,##srvctl config service -d <DB Uniq Name> | egrep 'Service|Preferred',Service_Details,,,0,
 SEND,##srvctl stop service -s app_ser -d ORCL_DBUni \\n,stop_service,,,0,
 SEND,#srvctl remove service -d ORCL_DBUni -s app_ser \\n,remove_Service,,,0,
 SEND,#srvctl status service -s app_ser -d ORCL_DBUni \\n,status_Specific_service,,,0,
 SEND,##[root@node1 ~]# cd /u01/app/grid/product/12102/bin \\n\r\n##[root@node1 bin]# ./crsctl start crs \\n,Start_CRS,,,0,
 SEND,###srvctl start instance -d ORCL -i ORCL1,Start_Instancce,,,0,
 SEND,###srvctl modify service -s prod_svc -n -d ORCLDB -i ORCLDB1 \\n\r\n###srvctl start service -s prod_svc -d ORCLDB -i ORCLDB2 \\n,modify_service,,,0,1,
Z:"Random"=00000002
 SEND,-----  load table with 1\,000\,000 rows                                                            \\n\r\n---begin                                                                                         \\n\r\n---        for i in 1 .. 1000                                                                    \\n\r\n---        loop                                                                                  \\n\r\n---            for j in 1 .. 1000                                                                \\n\r\n---            loop                                                                              \\n\r\n---insert into unpar_table values ( i\, j\, dbms_random.random\, sysdate-j );                       \\n\r\n---            end loop;                                                                         \\n\r\n---        end loop;                                                                             \\n\r\n--end;                                                                                           \\n\r\n--commit																						 \\n	,Load_1_Million_Rec,,,0,1,
 SEND,---CREATE TABLE unpar_table (																	 \\n\r\n---  a NUMBER\, y number\,                                                                         \\n\r\n---  name VARCHAR2(100)\, date_used date);                                                        \\n\r\n---                                                                                              \\n,TempTable,,,0,1,
Z:"Redo-Arc"=0000000f
 SEND,set pages 1000 \\n column stime format a10 \\n col name for a100 \\n \r\nset linesize 300 \\n\r\n\r\nselect SEQUENCE#\,FIRST_TIME\,to_char(first_time\,'HH24:MI') Stime\,APPLIED\,name from v$archived_log where name is not null order by sequence#;\r\n,arc_time,,,0,
 SEND,set pagesize 30  \\n\r\ncol MidN format 999 \\n\r\ncol 1AM format 999 \\n\r\ncol 2AM format 999 \\n\r\ncol 3AM format 999 \\n\r\ncol 4AM format 999 \\n\r\ncol 5AM format 999 \\n\r\ncol 6AM format 999 \\n\r\ncol 7AM format 999 \\n\r\ncol 8AM format 999 \\n\r\nset linesize 300 \\n\r\ncol 9AM format 999 \\n\r\ncol 10AM format 999 \\n\r\ncol 11AM format 999 \\n\r\ncol Noon format 999 \\n\r\ncol 1PM format 999 \\n \r\ncol 2PM format 999 \\n\r\ncol 3PM format 999 \\n\r\ncol 4PM format 999 \\n\r\ncol 5PM format 999 \\n\r\ncol 6PM format 999 \\n\r\ncol 7PM format 999 \\n\r\ncol 8PM format 999 \\n\r\ncol 9PM format 999 \\n\r\ncol 10PM format 999 \\n\r\ncol 11PM format 999 \\n\r\nselect to_char(first_time\,'mm/dd/yy') logdate\, \\n\r\nsum(decode(to_char(first_time\,'hh24')\,'00'\,1\,0)) "MidN"\, \\n\r\nsum(decode(to_char(first_time\,'hh24')\,'01'\,1\,0)) "1AM"\, \\n\r\nsum(decode(to_char(first_time\,'hh24')\,'02'\,1\,0)) "2AM"\, \\n\r\nsum(decode(to_char(first_time\,'hh24')\,'03'\,1\,0)) "3AM"\, \\n\r\nsum(decode(to_char(first_time\,'hh24')\,'04'\,1\,0)) "4AM"\, \\n\r\nsum(decode(to_char(first_time\,'hh24')\,'05'\,1\,0)) "5AM"\, \\n\r\nsum(decode(to_char(first_time\,'hh24')\,'06'\,1\,0)) "6AM"\, \\n\r\nsum(decode(to_char(first_time\,'hh24')\,'07'\,1\,0)) "7AM"\, \\n\r\nsum(decode(to_char(first_time\,'hh24')\,'08'\,1\,0)) "8AM"\, \\n\r\nsum(decode(to_char(first_time\,'hh24')\,'09'\,1\,0)) "9AM"\, \\n\r\nsum(decode(to_char(first_time\,'hh24')\,'10'\,1\,0)) "10AM"\, \\n\r\nsum(decode(to_char(first_time\,'hh24')\,'11'\,1\,0)) "11AM"\, \\n\r\nsum(decode(to_char(first_time\,'hh24')\,'12'\,1\,0)) "Noon"\, \\n\r\nsum(decode(to_char(first_time\,'hh24')\,'13'\,1\,0)) "1PM"\, \\n\r\nsum(decode(to_char(first_time\,'hh24')\,'14'\,1\,0)) "2PM"\, \\n\r\nsum(decode(to_char(first_time\,'hh24')\,'15'\,1\,0)) "3PM"\, \\n\r\nsum(decode(to_char(first_time\,'hh24')\,'16'\,1\,0)) "4PM"\, \\n\r\nsum(decode(to_char(first_time\,'hh24')\,'17'\,1\,0)) "5PM"\, \\n\r\nsum(decode(to_char(first_time\,'hh24')\,'18'\,1\,0)) "6PM"\, \\n\r\nsum(decode(to_char(first_time\,'hh24')\,'19'\,1\,0)) "7PM"\, \\n\r\nsum(decode(to_char(first_time\,'hh24')\,'20'\,1\,0)) "8PM"\, \\n\r\nsum(decode(to_char(first_time\,'hh24')\,'21'\,1\,0)) "9PM"\, \\n\r\nsum(decode(to_char(first_time\,'hh24')\,'22'\,1\,0)) "10PM"\, \\n\r\nsum(decode(to_char(first_time\,'hh24')\,'23'\,1\,0)) "11PM" \\n\r\nfrom v$log_history \\n\r\ngroup by to_char(first_time\,'mm/dd/yy') \\n\r\norder by 1;  \\n\r\n,log_sw_Hr,,,
 SEND,SELECT A.*\, \\n\r\nRound(A.Count#*B.AVG#/1024/1024) Daily_Avg_Mb \\n\r\nFROM \\n\r\n( \\n\r\n   SELECT \\n\r\n   To_Char(First_Time\,'YYYY-MM-DD') DAY\, \\n\r\n   Count(1) Count#\, \\n\r\n   Min(RECID) Min#\, \\n\r\n   Max(RECID) Max# \\n\r\nFROM \\n\r\n   gv$log_history \\n\r\nGROUP BY  \\n\r\n   To_Char(First_Time\,'YYYY-MM-DD') \\n\r\nORDER \\n\r\nBY 1 DESC \\n\r\n) A\, \\n\r\n( \\n\r\nSELECT \\n\r\nAvg(BYTES) AVG#\, \\n\r\nCount(1) Count#\, \\n\r\nMax(BYTES) Max_Bytes\, \\n\r\nMin(BYTES) Min_Bytes \\n\r\nFROM \\n\r\nv$log \\n\r\n) B \\n\r\n; \\n\r\n,redo_count_Size,,,
 SEND,rman nocatalog  target /,rman_nocat_command,,,
 SEND,#will keep only 6 Hrs. --> delete archivelog until time 'sysdate-6/24' use semicolon here   \\n\r\n#will keep only 12 Hrs. --> delete archivelog until time 'sysdate-12/24' use semicolon here    \\n\r\n#will keep only 18 Hrs. --> delete archivelog until time 'sysdate-18/24' use semicolon here     \\n\r\n#Keeping archives for one day. --> delete archivelog until time 'sysdate-1' use semicolon here    \\n\r\n# delete noprompt force archivelog all use semicolon here \\n \r\n## delete noprompt force archivelog until time 'sysdate-1' semicolon \\n,arch_dele_Syntax,,,0,
 SEND,# script --> crosscheck archivelog all;,crosscheck,,,
 SEND,alter system archive log current,Switch_Log_for_RAC,,,
 SEND,set linesize 300 \\n\r\ncol status for a10 \\n\r\nSELECT inst_id\,group#\, sequence#\, bytes/1024\, members\, status FROM gv$log order by 1\,2; \\n,gv$log_info,,,
 SEND,\r\nset linesize 300 \\n\r\nCOLUMN member FORMAT A90; \\n\r\nCOLUMN status FORMAT A10; \\n\r\nset pagesize 100 \\n\r\nSELECT type\,inst_id\,group#\,member\, status FROM gv$logfile order by 3\,1; \\n\r\n ,gv$logfile_info,,,0,
 SEND,set linesize 300 \\n\r\nselect name||' - '||instance_name||'@'||host_name||' - '||DB_UNIQUE_NAME||' - '||version||' - '||open_mode||' - '||to_char(startup_time\,'DD-MON-YYYY HH24:MI:SS') || ' - '|| database_role from v$database\, v$instance; \\n,instance_INFO,,,0,
 SEND,set linesize 300 \\n\r\ncol host_name for a40 \\n\r\ncol instance_role for a20 \\n\r\ncol startup_time for a25 \\n\r\nselect INST_ID\,INSTANCE_NAME\,host_name\,to_char(startup_time\,'DD-MON-YYYY HH24:MI:SS') startup_Time\, INSTANCE_ROLE from gv$instance order by inst_id; \\n\r\n,gv_inst_info,,,0,
 SEND,SELECT SUM_ARCH.DAY\, \\n\r\n         SUM_ARCH.GENERATED_GB\, \\n\r\n         SUM_ARCH_DEL.DELETED_GB\, \\n\r\n         SUM_ARCH.GENERATED_GB - SUM_ARCH_DEL.DELETED_GB "REMAINING_GB" \\n\r\n    FROM (  SELECT TO_CHAR (COMPLETION_TIME\, 'DD/MM/YYYY') DAY\, \\n\r\n                   SUM (ROUND ( (blocks * block_size) / (1024 * 1024 * 1024)\, 2)) \\n\r\n                      GENERATED_GB \\n\r\n              FROM V$ARCHIVED_LOG \\n\r\n             WHERE ARCHIVED = 'YES' \\n\r\n          GROUP BY TO_CHAR (COMPLETION_TIME\, 'DD/MM/YYYY')) SUM_ARCH\, \\n\r\n         (  SELECT TO_CHAR (COMPLETION_TIME\, 'DD/MM/YYYY') DAY\, \\n\r\n                   SUM (ROUND ( (blocks * block_size) / (1024 * 1024 * 1024)\, 2)) \\n\r\n                      DELETED_GB \\n\r\n              FROM V$ARCHIVED_LOG \\n\r\n             WHERE ARCHIVED = 'YES' AND DELETED = 'YES' \\n\r\n          GROUP BY TO_CHAR (COMPLETION_TIME\, 'DD/MM/YYYY')) SUM_ARCH_DEL \\n\r\n   WHERE SUM_ARCH.DAY = SUM_ARCH_DEL.DAY(+) \\n\r\nORDER BY TO_DATE (DAY\, 'DD/MM/YYYY'); \\n,Redo_Count_Size_New,,,0,
 SEND, select force_logging from v$database; \\n,check_forcelogging,,,0,
 SEND,set linesize 300 \\n\r\nSELECT DISTINCT THREAD#\,GROUP#\,MEMBERS FROM V$LOG ORDER BY 1\,2; \\n,Chk_Groups_info,,,0,
 SEND,set linesize 300 \\n\r\nset pagesize 100 \\n\r\nselect GROUP#\,THREAD#   \,SEQUENCE#\,STATUS from v$log order by 1; ,Group_Status,,,0,
Z:"Redo-Arc_2"=00000002
 SEND,select sysdate-1/10 from dual;							\\n\r\nSELECT C.INSTANCE\,										\\n\r\n         C.THREAD#\,count(*)                             \\n\r\n    FROM V$LOG_HISTORY A\, V$LOG_HISTORY B\, V$THREAD C   \\n\r\n   WHERE     A.SEQUENCE# = B.SEQUENCE# + 1              \\n\r\n         AND A.THREAD# = C.THREAD#                      \\n\r\n         AND B.THREAD# = C.THREAD#                      \\n\r\n         AND A.FIRST_TIME > sysdate-1/24                \\n\r\n            group by C.INSTANCE\,C.THREAD#               \\n\r\nORDER BY 3 desc;                                        \\n,Log_Switches_in_RAC,,,0,
 SEND,set linesize 300  \\n\r\nset pagesize 100  \\n\r\ncol status for a20 \\n\r\nselect group#\, sequence#\,members\,thread#\,bytes/(1024*1024) megabytes\,blocksize\,archived\,status\,first_time\,next_time\,  \\n\r\n(next_time-first_time)*(24*60*60) seconds  \\n\r\nfrom v$log order by first_time;  \\n,log_switch_time_in_SECONDS,,,0,
Z:"RMAN"=00000005
 SEND,select status\, bytes from v$block_change_tracking; \\n,check_block_change_Tracking,,,
 SEND,SET TERMOUT OFF; \\n\r\nCOLUMN current_instance NEW_VALUE current_instance NOPRINT; \\n\r\nSELECT rpad(instance_name\, 17) current_instance FROM v$instance; \\n\r\nSET TERMOUT ON; \\n\r\n\r\nPROMPT  \\n\r\nPROMPT +------------------------------------------------------------------------+ \\n\r\nPROMPT | Report   : RMAN Backup Progress                                        | \\n\r\nPROMPT | Instance : &current_instance                                           | \\n\r\nPROMPT | Note     : A listing of all current RMAN operations and their          | \\n\r\nPROMPT |            estimated timings.                                          | \\n\r\nPROMPT +------------------------------------------------------------------------+ \\n\r\n\r\nSET ECHO        OFF \\n\r\nSET FEEDBACK    6 \\n\r\nSET HEADING     ON \\n\r\nSET LINESIZE    180 \\n\r\nSET PAGESIZE    50000 \\n\r\nSET TERMOUT     ON \\n\r\nSET TIMING      OFF \\n\r\nSET TRIMOUT     ON \\n\r\nSET TRIMSPOOL   ON \\n\r\nSET VERIFY      OFF \\n\r\n\r\nCLEAR COLUMNS \\n\r\nCLEAR BREAKS \\n\r\nCLEAR COMPUTES \\n\r\n\r\nCOLUMN instance_name      FORMAT a10      HEADING 'Instance' \\n\r\nCOLUMN sid                                HEADING 'Oracle|SID' \\n\r\nCOLUMN serial_num                         HEADING 'Serial|#' \\n\r\nCOLUMN opname             FORMAT a30      HEADING 'RMAN|Operation' \\n\r\nCOLUMN start_time         FORMAT a18      HEADING 'Start|Time' \\n\r\nCOLUMN totalwork                          HEADING 'Total|Work' \\n\r\nCOLUMN sofar                              HEADING 'So|Far' \\n\r\nCOLUMN pct_done                           HEADING 'Percent|Done' \\n\r\nCOLUMN elapsed_seconds                    HEADING 'Elapsed|Seconds' \\n\r\nCOLUMN time_remaining                     HEADING 'Seconds|Remaining' \\n\r\nCOLUMN done_at            FORMAT a18      HEADING 'Done|At' \\n\r\n\r\nSELECT \\n\r\n    i.instance_name                                 instance_name \\n\r\n  \, sid                                             sid \\n\r\n  \, serial#                                         serial_num \\n\r\n  \, b.opname                                        opname \\n\r\n  \, TO_CHAR(b.start_time\, 'mm/dd/yy HH24:MI:SS')    start_time \\n\r\n  \, b.totalwork                                     totalwork \\n\r\n  \, b.sofar                                         sofar \\n\r\n  \, ROUND( (b.sofar/DECODE(   b.totalwork \\n\r\n                            \, 0 \\n\r\n                            \, 0.001 \\n\r\n                            \, b.totalwork)*100)\,2)  pct_done \\n\r\n  \, b.elapsed_seconds                               elapsed_seconds \\n\r\n  \, b.time_remaining                                time_remaining \\n\r\n  \, DECODE(   b.time_remaining \\n\r\n            \, 0 \\n\r\n            \, TO_CHAR((b.start_time + b.elapsed_seconds/3600/24)\, 'mm/dd/yy HH24:MI:SS') \\n\r\n            \, TO_CHAR((SYSDATE + b.time_remaining/3600/24)\, 'mm/dd/yy HH24:MI:SS') \\n\r\n    ) done_at \\n\r\nFROM \\n\r\n       gv$session         a\r\n  JOIN gv$session_longops b USING (sid\,serial#) \\n\r\n  JOIN gv$instance        i ON (      i.inst_id = a.inst_id \\n\r\n                                  AND i.inst_id = b.inst_id) \\n\r\nWHERE \\n\r\n      a.program LIKE 'rman%' \\n\r\n  AND b.opname LIKE 'RMAN%' \\n\r\n  AND b.opname NOT LIKE '%aggregate%' \\n\r\n  AND b.totalwork > 0 \\n\r\nORDER BY \\n\r\n    i.instance_name \\n\r\n  \, b.start_time; \\n\r\n\r\n\r\n,RMAN_Progress,,,
 SEND,set linesize 300 \\n\r\nSET TERMOUT OFF; \\n\r\nCOLUMN current_instance NEW_VALUE current_instance NOPRINT; \\n\r\nSELECT rpad(instance_name\, 17) current_instance FROM v$instance; \\n\r\nSET TERMOUT ON; \\n\r\n\r\nPROMPT  \\n\r\nPROMPT +------------------------------------------------------------------------+ \\n\r\nPROMPT | Report   : RMAN Status                                            | \\n\r\nPROMPT | Instance : &current_instance                                           | \\n\r\nPROMPT +------------------------------------------------------------------------+ \\n\r\n\r\nSET ECHO        OFF \\n\r\nSET FEEDBACK    6 \\n\r\nSET HEADING     ON \\n\r\nSET LINESIZE    180 \\n\r\nSET PAGESIZE    50000 \\n\r\nSET TERMOUT     ON \\n\r\nSET TIMING      OFF \\n\r\nSET TRIMOUT     ON \\n\r\nSET TRIMSPOOL   ON \\n\r\nSET VERIFY      OFF \\n\r\nCOL Backup_Size FORMAT A30 \\n\r\nCOL Backup_Time FORMAT A30 \\n\r\ncol start_time for a20 \\n\r\ncol input_type for a20 \\n\r\ncol status for a25 \\n\r\ncol end_time for a20 \\n\r\nselect session_key\, \\n\r\n       input_type\, \\n\r\n       status\, \\n\r\n       to_char(start_time\,'yyyy-mm-dd hh24:mi') start_time\, \\n\r\n       to_char(end_time\,'yyyy-mm-dd hh24:mi')   end_time\, \\n\r\n       output_bytes_display Backup_Size\, \\n\r\n       time_taken_display Backup_Time \\n\r\nfrom v$rman_backup_job_details \\n\r\norder by session_key asc; \\n\r\n\r\nselect ctime "Date" \\n\r\n       \, decode(backup_type\, 'L'\, 'Archive Log'\, 'D'\, 'Full'\, 'Incremental') backup_type \\n\r\n       \, bsize "Size MB" \\n\r\n  from (select trunc(bp.completion_time) ctime \\n\r\n      \, backup_type \\n\r\n      \, round(sum(bp.bytes/1024/1024)\,2) bsize \\n\r\n     from v$backup_set bs\, v$backup_piece bp \\n\r\n     where bs.set_stamp = bp.set_stamp \\n\r\n     and bs.set_count  = bp.set_count \\n\r\n     and bp.status = 'A' \\n\r\n     group by trunc(bp.completion_time)\, backup_type) \\n\r\n  order by 1\, 2; \\n\r\n,RMAN_BKUP_Size,,,0,
 SEND,SET TERMOUT OFF; \\n\r\nCOLUMN current_instance NEW_VALUE current_instance NOPRINT; \\n\r\nSELECT rpad(instance_name\, 17) current_instance FROM v$instance; \\n\r\nSET TERMOUT ON; \\n\r\n\r\nPROMPT  \\n\r\nPROMPT +------------------------------------------------------------------------+ \\n\r\nPROMPT | Report   : RMAN Registered Databases                                   | \\n\r\nPROMPT | Instance : &current_instance                                           | \\n\r\nPROMPT | Note     : Listing of all databases in the RMAN recovery catalog.      | \\n\r\nPROMPT +------------------------------------------------------------------------+ \\n\r\n\r\nSET ECHO        OFF \\n\r\nSET FEEDBACK    6 \\n\r\nSET HEADING     ON \\n\r\nSET LINESIZE    180 \\n\r\nSET PAGESIZE    50000 \\n\r\nSET TERMOUT     ON \\n\r\nSET TIMING      OFF \\n\r\nSET TRIMOUT     ON \\n\r\nSET TRIMSPOOL   ON \\n\r\nSET VERIFY      OFF \\n\r\n\r\nCLEAR COLUMNS \\n\r\nCLEAR BREAKS \\n\r\nCLEAR COMPUTES \\n\r\n\r\nCOLUMN db_key                 FORMAT 999999                 HEADING 'DB|Key' \\n\r\nCOLUMN dbinc_key              FORMAT 999999                 HEADING 'DB Inc|Key' \\n\r\nCOLUMN dbid                                                 HEADING 'DBID' \\n\r\nCOLUMN name                   FORMAT a12                    HEADING 'Database|Name' \\n\r\nCOLUMN resetlogs_change_num                                 HEADING 'Resetlogs|Change Num' \\n\r\nCOLUMN resetlogs              FORMAT a21                    HEADING 'Reset Logs|Date/Time' \\n\r\n\r\nSELECT \\n\r\n    rd.db_key \\n\r\n  \, rd.dbinc_key \\n\r\n  \, rd.dbid \\n\r\n  \, rd.name \\n\r\n  \, rd.resetlogs_change#                                 resetlogs_change_num \\n\r\n  \, TO_CHAR(rd.resetlogs_time\, 'DD-MON-YYYY HH24:MI:SS') resetlogs \\n\r\nFROM \\n\r\n    rc_database   rd \\n\r\nORDER BY \\n\r\n    rd.name; \\n\r\n\r\n\r\n,RMAN_Regi'ds_DB_info,,,
 SEND,set lines 220                                                                                              \\n\r\nset pages 1000                                                                                             \\n\r\ncol cf for 9\,999                                                                                           \\n\r\ncol df for 9\,999                                                                                           \\n\r\ncol elapsed_seconds heading "ELAPSED|SECONDS"                                                              \\n\r\ncol i0 for 9\,999                                                                                           \\n\r\ncol i1 for 9\,999                                                                                           \\n\r\ncol l for 9\,999                                                                                            \\n\r\ncol output_mbytes for 9\,999\,999 heading "OUTPUT|MBYTES"                                                    \\n\r\ncol session_recid for 999999 heading "SESSION|RECID"                                                       \\n\r\ncol session_stamp for 99999999999 heading "SESSION|STAMP"                                                  \\n\r\ncol status for a10 trunc                                                                                   \\n\r\ncol time_taken_display for a10 heading "TIME|TAKEN"                                                        \\n\r\ncol output_instance for 9999 heading "OUT|INST"                                                            \\n\r\ncol START_TIME for a30 \\n\r\ncol end_time for a30 \\n\r\ncol dow for a15 \\n\r\ncol INPUT_TYPE for a15 \\n\r\nselect                                                                                                     \\n\r\n  j.session_recid\, j.session_stamp\,                                                                        \\n\r\n  to_char(j.start_time\, 'yyyy-mm-dd hh24:mi:ss') start_time\,                                               \\n\r\n  to_char(j.end_time\, 'yyyy-mm-dd hh24:mi:ss') end_time\,                                                   \\n\r\n  (j.output_bytes/1024/1024) output_mbytes\, j.status\, j.input_type\,                                        \\n\r\n  decode(to_char(j.start_time\, 'd')\, 1\, 'Sunday'\, 2\, 'Monday'\,                                             \\n\r\n                                     3\, 'Tuesday'\, 4\, 'Wednesday'\,                                         \\n\r\n                                     5\, 'Thursday'\, 6\, 'Friday'\,                                           \\n\r\n                                     7\, 'Saturday') dow\,                                                   \\n\r\n  j.elapsed_seconds\, j.time_taken_display\,                                                                 \\n\r\n  x.cf\, x.df\, x.i0\, x.i1\, x.l\,                                                                             \\n\r\n  ro.inst_id output_instance                                                                               \\n\r\nfrom V$RMAN_BACKUP_JOB_DETAILS j                                                                           \\n\r\n  left outer join (select                                                                                  \\n\r\n                     d.session_recid\, d.session_stamp\,                                                     \\n\r\n                     sum(case when d.controlfile_included = 'YES' then d.pieces else 0 end) CF\,            \\n\r\n                     sum(case when d.controlfile_included = 'NO'                                           \\n\r\n                               and d.backup_type||d.incremental_level = 'D' then d.pieces else 0 end) DF\,  \\n\r\n                     sum(case when d.backup_type||d.incremental_level = 'D0' then d.pieces else 0 end) I0\, \\n\r\n                     sum(case when d.backup_type||d.incremental_level = 'I1' then d.pieces else 0 end) I1\, \\n\r\n                     sum(case when d.backup_type = 'L' then d.pieces else 0 end) L                         \\n\r\n                   from                                                                                    \\n\r\n                     V$BACKUP_SET_DETAILS d                                                                \\n\r\n                     join V$BACKUP_SET s on s.set_stamp = d.set_stamp and s.set_count = d.set_count        \\n\r\n                   where s.input_file_scan_only = 'NO'                                                     \\n\r\n                   group by d.session_recid\, d.session_stamp) x                                            \\n\r\n    on x.session_recid = j.session_recid and x.session_stamp = j.session_stamp                             \\n\r\n  left outer join (select o.session_recid\, o.session_stamp\, min(inst_id) inst_id                           \\n\r\n                   from GV$RMAN_OUTPUT o                                                                   \\n\r\n                   group by o.session_recid\, o.session_stamp)                                              \\n\r\n    ro on ro.session_recid = j.session_recid and ro.session_stamp = j.session_stamp                        \\n\r\nwhere j.start_time > trunc(sysdate)-&NUMBER_OF_DAYS                                                        \\n\r\norder by j.start_time;                                                                                     \\n\r\n,RMAN_BACKUP_HISTORY,,,0,
Z:"sequences"=00000001
 SEND,set pagesize 100 																												\\n\r\nset numwidth 40                                                                                                                 \\n\r\ncol sequence_owner for a15                                                                                                      \\n\r\nset linesize 300                                                                                                                \\n\r\nselect sequence_owner\,sequence_name\,min_value\,max_value\,increment_by\,last_number from dba_sequences order by SEQUENCE_name;     \\n,Seq's_info,,,0,
Z:"sessions"=0000000d
 SEND,set linesize 300 \\n\r\ncol a for a60 \\n\r\ncol machine for a20 \\n\r\ncol username for a20 \\n\r\ncol terminal for a20 \\n\r\ncol program for a20 \\n\r\ncol osuser for a20 \\n\r\n\r\nSELECT  \\n\r\ns.program\, \\n\r\ns.inst_id\, \\n\r\ns.sid\, \\n\r\ns.serial#\, \\n\r\nto_char(s.logon_time\,'DD-MON-YYYY HH24:MI:SS')\, \\n\r\ns.status\, \\n\r\ns.username\, \\n\r\ns.machine\, \\n\r\ns.program\, \\n\r\ns.osuser\,\\n\r\ns.sql_id \\n\r\nFROM gv$session s\, gv$process p \\n\r\nWHERE ( (p.addr(+) = s.paddr) AND (p.inst_id(+) = s.inst_id)) and s.username is not null and s.username not in ('SYS'\,'SYSTEM'\,'DBSNMP'\,'RMAN') \\n\r\nAND s.sid = &sid; \\n\r\n\r\n,chk_sess_details,,,
 SEND,set linesize 300 \\n\r\ncol machine for a40 \\n\r\nset pagesize 100 \\n\r\nselect sid\,to_char(LOGON_TIME\,'DD-MON-YYYY HH24:MI:SS')\,status\,machine\,username from v$session where username='&username' and machine='&machine' order by 3\,2; \\n,SID_logon_time_For_USER_Machine,,,
 SEND,select inst_id\, status\, count(1) Total_session from gv$session  group by inst_id\, status order by 1;  \\n\r\nselect inst_id\, status\, count(1) Total_session from gv$session where username is not null group by inst_id\, status order by 1; \\n,Act_InA_sess,,,0,
 SEND,set feed on echo off \\n\r\nset lines 130 pages 1000 \\n\r\nshow parameter db_name \\n\r\nshow parameter instance_name  \\n\r\ncol machine for a40 \\n\r\nbreak on username skip 1 \\n\r\ncompute sum of count(1) on username \\n\r\n\r\nselect inst_id\, machine\,username\,count(1) from gv$session where status ='ACTIVE' \\n\r\nand username not like 'DBSN%' \\n\r\nand username is not null \\n\r\ngroup by inst_id\,machine\,username order by 1\,3\,2;  \\n\r\n\r\n,Act_Sess,,,
 SEND,select sql_id\,count(*) from v$session where username='&username' group by sql_id; \\n,SQLID_Count_Username,,,
 SEND,\r\nset feed on echo off \\n\r\nset lines 130 pages 1000 \\n\r\nshow parameter db_name \\n\r\nshow parameter instance_name  \\n\r\ncol machine for a40 \\n\r\nbreak on username skip 1 \\n\r\ncompute sum of count(1) on username \\n\r\n\r\nselect inst_id\, machine\,username\,count(1) from gv$session where username not like 'DBSN%' \\n\r\nand username is not null \\n\r\ngroup by inst_id\,machine\,username order by 1\,3\,2;  \\n\r\n\r\n,Sess_count_Username,,,
 SEND,set linesize 300 pagesize 1000 \\n\r\n\r\nshow parameter db_name \\n\r\nshow parameter instance_name  \\n\r\n\r\ncol sid format 9999 \\n\r\ncol inst_id format 999 \\n\r\ncol serial format 99999 \\n\r\ncol orauser format a12 \\n\r\ncol osuser format a14 \\n\r\ncol fgrd_pid format a10 heading "FGRD|PID" \\n\r\ncol bgrd_pid format a5 heading "BGRD|PID" \\n\r\ncol terminal format a15 \\n\r\ncol program format a28 \\n\r\ncol stat format a4 \\n\r\ncol command format a15 \\n\r\nset numwidth 8 \\n\r\ncol service_name for a25 \\n\r\n\r\nselect  s.inst_id\, \\n\r\n        s.sid\, \\n\r\n        s.SERIAL# serial\, \\n\r\n        s.USERNAME orauser\, \\n\r\n        decode(s.STATUS\,'ACTIVE'\,'ACTV'\,'INACTIVE'\,'INAC') stat\, \\n\r\n        s.OSUSER\, \\n\r\n        s.PROCESS fgrd_pid\, \\n\r\n        p.SPID bgrd_pid\, \\n\r\n        s.TERMINAL\, \\n\r\n        s.PROGRAM\,  \\n\r\n		s.service_name\, \\n\r\n        decode(s.COMMAND\,0\,NULL\, \\n\r\n                1\,'create table'\, \\n\r\n                2\,'insert'\, \\n\r\n                3\,'select'\, \\n\r\n                4\,'create cluster'\, \\n\r\n                5\,'alter cluster'\, \\n\r\n                6\,'update'\, \\n\r\n                7\,'delete'\, \\n\r\n                8\,'drop cluster'\, \\n\r\n                9\,'create index'\, \\n\r\n                10\,'drop index'\, \\n\r\n                11\,'alter index'\, \\n\r\n                12\,'drop table'\, \\n\r\n                13\,'create sequence'\, \\n\r\n                14\,'alter sequence'\, \\n\r\n                15\,'alter table'\, \\n\r\n                16\,'drop sequence'\, \\n\r\n                17\,'grant'\, \\n\r\n                18\,'revoke'\, \\n\r\n                19\,'create synonym'\, \\n\r\n                20\,'drop synonym'\, \\n\r\n                21\,'create view'\, \\n\r\n                22\,'drop view'\, \\n\r\n                23\,'validate index'\, \\n\r\n                24\,'create procedure'\, \\n\r\n                25\,'alter procedure'\, \\n\r\n                26\,'lock table'\, \\n\r\n                27\,'no operation'\,   \\n            \r\n                28\,'rename'\, \\n\r\n                29\,'comment'\, \\n\r\n                30\,'audit'\, \\n\r\n                31\,'noaudit'\, \\n\r\n                32\,'create database link'\, \\n\r\n                33\,'drop database link'\, \\n\r\n                34\,'create database'\, \\n\r\n                35\,'alter database'\, \\n\r\n                36\,'create rollback segment'\, \\n\r\n                37\,'alter rollback segment'\, \\n\r\n                38\,'drop rollback segment'\, \\n\r\n                39\,'create tablespace'\, \\n\r\n                40\,'alter tablespace'\, \\n\r\n                41\,'drop tablespace'\, \\n\r\n                42\,'alter session'\, \\n\r\n                43\,'alter user'\, \\n\r\n                44\,'commit'\, \\n\r\n                45\,'rollback'\, \\n\r\n                46\,'savepoint'\, \\n\r\n                47\,'pl/sql execute'\, \\n\r\n                48\,'set transaction'\, \\n\r\n                49\,'alter system switch log'\, \\n\r\n                50\,'explain'\, \\n\r\n                51\,'create user'\, \\n\r\n                52\,'create role'\, \\n\r\n                53\,'drop user'\, \\n\r\n                54\,'drop role'\, \\n\r\n                55\,'set role'\, \\n\r\n                56\,'create schema'\, \\n\r\n                57\,'create controlfile'\, \\n\r\n                58\,'alter tracing'\, \\n\r\n                59\,'create trigger'\, \\n\r\n                60\,'alter trigger'\, \\n\r\n                61\,'drop trigger'\, \\n\r\n                62\,'analyze table'\, \\n\r\n                63\,'analyze index'\, \\n\r\n                64\,'analyze cluster'\, \\n\r\n                65\,'create profile'\, \\n\r\n                67\,'drop profile'\, \\n\r\n                68\,'alter profile'\, \\n\r\n                69\,'drop procedure'\, \\n\r\n                70\,'alter resource cost'\, \\n\r\n                71\,'create snapshot log'\, \\n\r\n                72\,'alter snapshot log'\, \\n\r\n                73\,'drop snapshot log'\, \\n\r\n                74\,'create snapshot'\, \\n\r\n                75\,'alter snapshot'\, \\n\r\n                76\,'drop snapshot'\, \\n\r\n                79\,'alter role'\, \\n\r\n                85\,'truncate table'\, \\n\r\n                86\,'truncate cluster'\, \\n\r\n                88\,'alter view'\, \\n\r\n                91\,'create function'\, \\n\r\n                92\,'alter function'\, \\n\r\n                93\,'drop function'\, \\n\r\n                94\,'create package'\, \\n\r\n                95\,'alter package'\, \\n\r\n                96\,'drop package'\, \\n\r\n                97\,'create package body'\, \\n\r\n                98\,'alter package body'\, \\n\r\n                99\,'drop package bodj') command\, \\n\r\n				to_char(logon_time\,'YYYYMMDD HH24:MI:SS') loginTime \\n\r\n        from gv$session s\, gv$process p \\n\r\n        where s.paddr = p.addr \\n\r\n        and   s.type != 'BACKGROUND' \\n\r\n        order by logintime asc; \\n,Long_running_Sessions,,,
 SEND,set linesize 300 pagesize 1000 \\n\r\n\r\nshow parameter db_name \\n\r\nshow parameter instance_name  \\n\r\n\r\ncol sid format 9999 \\n\r\ncol inst_id format 999 \\n\r\ncol serial format 99999 \\n\r\ncol orauser format a12 \\n\r\ncol osuser format a14 \\n\r\ncol fgrd_pid format a10 heading "FGRD|PID" \\n\r\ncol bgrd_pid format a5 heading "BGRD|PID" \\n\r\ncol terminal format a15 \\n\r\ncol program format a28 \\n\r\ncol stat format a4 \\n\r\ncol command format a15 \\n\r\nset numwidth 8 \\n\r\ncol service_name for a25 \\n\r\n\r\nselect  s.inst_id\, \\n\r\n        s.sid\, \\n\r\n        s.SERIAL# serial\, \\n\r\n        s.USERNAME orauser\, \\n\r\n        decode(s.STATUS\,'ACTIVE'\,'ACTV'\,'INACTIVE'\,'INAC') stat\, \\n\r\n        s.OSUSER\, \\n\r\n        s.PROCESS fgrd_pid\, \\n\r\n        p.SPID bgrd_pid\, \\n\r\n        s.TERMINAL\, \\n\r\n        s.PROGRAM\,  \\n\r\n		s.service_name\, \\n\r\n        decode(s.COMMAND\,0\,NULL\, \\n\r\n                1\,'create table'\, \\n\r\n                2\,'insert'\, \\n\r\n                3\,'select'\, \\n\r\n                4\,'create cluster'\, \\n\r\n                5\,'alter cluster'\, \\n\r\n                6\,'update'\, \\n\r\n                7\,'delete'\, \\n\r\n                8\,'drop cluster'\, \\n\r\n                9\,'create index'\, \\n\r\n                10\,'drop index'\, \\n\r\n                11\,'alter index'\, \\n\r\n                12\,'drop table'\, \\n\r\n                13\,'create sequence'\, \\n\r\n                14\,'alter sequence'\, \\n\r\n                15\,'alter table'\, \\n\r\n                16\,'drop sequence'\, \\n\r\n                17\,'grant'\, \\n\r\n                18\,'revoke'\, \\n\r\n                19\,'create synonym'\, \\n\r\n                20\,'drop synonym'\, \\n\r\n                21\,'create view'\, \\n\r\n                22\,'drop view'\, \\n\r\n                23\,'validate index'\, \\n\r\n                24\,'create procedure'\, \\n\r\n                25\,'alter procedure'\, \\n\r\n                26\,'lock table'\, \\n\r\n                27\,'no operation'\,   \\n            \r\n                28\,'rename'\, \\n\r\n                29\,'comment'\, \\n\r\n                30\,'audit'\, \\n\r\n                31\,'noaudit'\, \\n\r\n                32\,'create database link'\, \\n\r\n                33\,'drop database link'\, \\n\r\n                34\,'create database'\, \\n\r\n                35\,'alter database'\, \\n\r\n                36\,'create rollback segment'\, \\n\r\n                37\,'alter rollback segment'\, \\n\r\n                38\,'drop rollback segment'\, \\n\r\n                39\,'create tablespace'\, \\n\r\n                40\,'alter tablespace'\, \\n\r\n                41\,'drop tablespace'\, \\n\r\n                42\,'alter session'\, \\n\r\n                43\,'alter user'\, \\n\r\n                44\,'commit'\, \\n\r\n                45\,'rollback'\, \\n\r\n                46\,'savepoint'\, \\n\r\n                47\,'pl/sql execute'\, \\n\r\n                48\,'set transaction'\, \\n\r\n                49\,'alter system switch log'\, \\n\r\n                50\,'explain'\, \\n\r\n                51\,'create user'\, \\n\r\n                52\,'create role'\, \\n\r\n                53\,'drop user'\, \\n\r\n                54\,'drop role'\, \\n\r\n                55\,'set role'\, \\n\r\n                56\,'create schema'\, \\n\r\n                57\,'create controlfile'\, \\n\r\n                58\,'alter tracing'\, \\n\r\n                59\,'create trigger'\, \\n\r\n                60\,'alter trigger'\, \\n\r\n                61\,'drop trigger'\, \\n\r\n                62\,'analyze table'\, \\n\r\n                63\,'analyze index'\, \\n\r\n                64\,'analyze cluster'\, \\n\r\n                65\,'create profile'\, \\n\r\n                67\,'drop profile'\, \\n\r\n                68\,'alter profile'\, \\n\r\n                69\,'drop procedure'\, \\n\r\n                70\,'alter resource cost'\, \\n\r\n                71\,'create snapshot log'\, \\n\r\n                72\,'alter snapshot log'\, \\n\r\n                73\,'drop snapshot log'\, \\n\r\n                74\,'create snapshot'\, \\n\r\n                75\,'alter snapshot'\, \\n\r\n                76\,'drop snapshot'\, \\n\r\n                79\,'alter role'\, \\n\r\n                85\,'truncate table'\, \\n\r\n                86\,'truncate cluster'\, \\n\r\n                88\,'alter view'\, \\n\r\n                91\,'create function'\, \\n\r\n                92\,'alter function'\, \\n\r\n                93\,'drop function'\, \\n\r\n                94\,'create package'\, \\n\r\n                95\,'alter package'\, \\n\r\n                96\,'drop package'\, \\n\r\n                97\,'create package body'\, \\n\r\n                98\,'alter package body'\, \\n\r\n                99\,'drop package bodj') command\, \\n\r\n				to_char(logon_time\,'YYYYMMDD HH24:MI:SS') loginTime \\n\r\n        from gv$session s\, gv$process p \\n\r\n        where s.paddr = p.addr \\n\r\n        and   s.type != 'BACKGROUND' \\n\r\n		and s.USERNAME not in ('SYS'\,'SYSTEM') \\n\r\n		and s.status='ACTIVE' \\n\r\n        order by logintime asc; \\n,Long_Runn_Sess_Act,,,
 SEND,set linesize 120 \\n\r\ncol os_user format a10 \\n\r\ncol username format a15 \\n\r\n\r\ncol pid format 9999999999 \\n\r\nPROMPT SESSIONS SORTED BY PHYSICAL READS \\n\r\nPROMPT \\n\r\nselect \\n\r\n  OSUSER os_user\,username\, \\n\r\n    PROCESS pid\, \\n\r\n    ses.SID sid\, \\n\r\n    SERIAL#\, \\n\r\n    PHYSICAL_READS\, \\n\r\n     BLOCK_CHANGES \\n\r\n from       v$session ses\, \\n\r\n   v$sess_io sio \\n\r\n  where      ses.SID = sio.SID \\n\r\nand username is not null \\n\r\nand status='ACTIVE' \\n\r\n order      by PHYSICAL_READS; \\n,Sess's_With_High_Phy_reads,,,
 SEND,set linesize 300 \\n\r\nselect name||' - '||instance_name||'@'||host_name||' - '||DB_UNIQUE_NAME||' - '||version||' - '||open_mode||' - '||to_char(startup_time\,'DD-MON-YYYY HH24:MI:SS') || ' - '|| database_role from v$database\, v$instance; \\n,instance_INFO,,,
 SEND,select USERNAME\,status\,count(*) from v$session where username not in ('SYSTEM'\,'SYS') and username is not null group by USERNAME\,status order by 2; \\n,Act_NonAct_Users_Count,,,
 SEND,select sql_id\,username\,count(*) from v$session where type='USER' and status='ACTIVE' group by sql_id\,username order by 3; \\n,SQL_ID_User_Count,,,
 SEND,set linesize 300 \\n\r\ncol machine for a40 \\n\r\nselect inst_id\,machine\,sql_id\,status\,count(*) from gv$session group by inst_id\,machine\,sql_id\,status order by 5 desc; \\n,Machine_SQLID_status,,,
Z:"Sessions_Spike"=00000001
 SEND,set linesize 300 \\n\r\ncol machine for a30 \\n\r\ncol username for a20 \\n\r\nset pagesize 50  \\n\r\nselect sql_id\,username\,event\,machine\,count(*) from v$session where type='USER' and status='ACTIVE' and username='&Username'  \\n\r\ngroup by sql_id\,machine\,event\,username order by 5 desc; \\n,SQLID_UN_Machine_Count,,,
Z:"SGA_Usage"=00000002
 SEND,select INST_ID\,round(sum(bytes)/1024/1024\,2) as total_mb from gv$sgastat where pool='shared pool' group by INST_ID order by  1; \\n\r\n,Shared_Pool_allocation,,,0,
 SEND,REM LOCATION:   Database Tuning\\Shared Pool Reports																			\\n\r\nREM FUNCTION:   Estimates shared pool utilization                                                                           \\n\r\nREM TESTED ON:  7.3.3.5\, 8.0.4.1\, 8.1.5\, 8.1.7\, 9.0.1\, 10.2.0.3\, 11.1.0.6                                                   \\n\r\nREM PLATFORM:   non-specific                                                                                                \\n\r\nREM REQUIRES:   v$db_object_cache\, v$sqlarea\, v$sesstat\, v$statname\,                                                        \\n\r\nREM             v$sgastat\, v$parameter                                                                                      \\n\r\nREM                                                                                                                         \\n\r\nREM  This is a part of the Knowledge Xpert for Oracle Administration library.                                               \\n\r\nREM  Copyright (C) 2008 Quest Software                                                                                      \\n\r\nREM  All rights reserved.                                                                                                   \\n\r\nREM                                                                                                                         \\n\r\nREM******************** Knowledge Xpert for Oracle Administration ********************                                      \\n\r\nREM                                                                                                                         \\n\r\nREM NOTES:     Based on current database usage. This should be                                                              \\n\r\nREM            run during peak operation\, after all stored                                                                  \\n\r\nREM            objects i.e. packages\, views have been loaded.                                                               \\n\r\nREM                                                                                                                         \\n\r\nREM 08/02/08 Robert Freeman - Modified to use v$sgastat instead v$parameter for                                             \\n\r\nREM                           shared pool size.                                                                             \\n\r\nREM***********************************************************************************                                      \\n\r\nREM                                                                                                                         \\n\r\n                                                                                                                            \\n\r\nREM If running Shared Server uncomment the mts calculation and output commands.                                             \\n\r\nSET serveroutput on;                                                                                                        \\n\r\n                                                                                                                            \\n\r\nDECLARE                                                                                                                     \\n\r\n   object_mem       NUMBER;                                                                                                 \\n\r\n   shared_sql       NUMBER;                                                                                                 \\n\r\n   cursor_mem       NUMBER;                                                                                                 \\n\r\n   mts_mem          NUMBER;                                                                                                 \\n\r\n   used_pool_size   NUMBER;                                                                                                 \\n\r\n   free_mem         NUMBER;                                                                                                 \\n\r\n   pool_size        VARCHAR2 (512);                     -- Now from V$SGASTAT                                               \\n\r\nBEGIN                                                                                                                       \\n\r\n   -- Stored objects (packages\, views)                                                                                      \\n\r\n   SELECT SUM (sharable_mem)                                                                                                \\n\r\n     INTO object_mem                                                                                                        \\n\r\n     FROM v$db_object_cache;                                                                                                \\n\r\n                                                                                                                            \\n\r\n   -- Shared SQL -- need to have additional memory if dynamic SQL used                                                      \\n\r\n   SELECT SUM (sharable_mem)                                                                                                \\n\r\n     INTO shared_sql                                                                                                        \\n\r\n     FROM v$sqlarea;                                                                                                        \\n\r\n                                                                                                                            \\n\r\n   -- User Cursor Usage -- run this during peak usage.                                                                      \\n\r\n   --  assumes 250 bytes per open cursor\, for each concurrent user.                                                         \\n\r\n   SELECT SUM (250 * users_opening)                                                                                         \\n\r\n     INTO cursor_mem                                                                                                        \\n\r\n     FROM v$sqlarea;                                                                                                        \\n\r\n                                                                                                                            \\n\r\n   -- For a test system -- get usage for one user\, multiply by # users                                                      \\n\r\n   -- select (250 * value) bytes_per_user                                                                                   \\n\r\n   -- from v$sesstat s\, v$statname n                                                                                        \\n\r\n   -- where s.statistic# = n.statistic#                                                                                     \\n\r\n   -- and n.name = 'opened cursors current'                                                                                 \\n\r\n   -- and s.sid = 25;  -- where 25 is the sid of the process                                                                \\n\r\n   -- MTS memory needed to hold session information for shared server users                                                 \\n\r\n   -- This query computes a total for all currently logged on users (run                                                    \\n\r\n   --  multiply by # users.                                                                                                 \\n\r\n   SELECT SUM (VALUE)                                                                                                       \\n\r\n     INTO mts_mem                                                                                                           \\n\r\n     FROM v$sesstat s\, v$statname n                                                                                         \\n\r\n    WHERE s.statistic# = n.statistic# AND n.NAME = 'session uga memory max';                                                \\n\r\n                                                                                                                            \\n\r\n   -- Free (unused) memory in the SGA: gives an indication of how much memory                                               \\n\r\n   -- is being wasted out of the total allocated.                                                                           \\n\r\n   SELECT BYTES                                                                                                             \\n\r\n     INTO free_mem                                                                                                          \\n\r\n     FROM v$sgastat                                                                                                         \\n\r\n    WHERE NAME = 'free memory' AND pool = 'shared pool';                                                                    \\n\r\n                                                                                                                            \\n\r\n   -- For non-MTS add up object\, shared sql\, cursors and 20% overhead.                                                      \\n\r\n   used_pool_size := ROUND (1.2 * (object_mem + shared_sql + cursor_mem));                                                  \\n\r\n                                                                                                                            \\n\r\n   -- For MTS mts contribution needs to be included (comment out previous line)                                             \\n\r\n   -- used_pool_size := round(1.2*(object_mem+shared_sql+cursor_mem+mts_mem));                                              \\n\r\n   SELECT SUM (BYTES)                                                                                                       \\n\r\n     INTO pool_size                                                                                                         \\n\r\n     FROM v$sgastat                                                                                                         \\n\r\n    WHERE pool = 'shared pool';                                                                                             \\n\r\n                                                                                                                            \\n\r\n   -- Display results                                                                                                       \\n\r\n   DBMS_OUTPUT.put_line ('Shared Pool Memory Utilization Report');                                                          \\n\r\n   DBMS_OUTPUT.put_line ('Obj mem:  ' || TO_CHAR (object_mem) || ' bytes');                                                 \\n\r\n   DBMS_OUTPUT.put_line ('Shared sql:  ' || TO_CHAR (shared_sql) || ' bytes');                                              \\n\r\n   DBMS_OUTPUT.put_line ('Cursors:  ' || TO_CHAR (cursor_mem) || ' bytes');                                                 \\n\r\n   -- dbms_output.put_line ('MTS session: '||to_char (mts_mem) || ' bytes');                                                \\n\r\n   DBMS_OUTPUT.put_line (   'Free memory: '                                                                                 \\n\r\n                         || TO_CHAR (free_mem)                                                                              \\n\r\n                         || ' bytes '                                                                                       \\n\r\n                         || '('                                                                                             \\n\r\n                         || TO_CHAR (ROUND (free_mem / 1024 / 1024\, 2))                                                     \\n\r\n                         || 'MB)'                                                                                           \\n\r\n                        );                                                                                                  \\n\r\n   DBMS_OUTPUT.put_line (   'Shared pool utilization (total):  '                                                            \\n\r\n                         || TO_CHAR (used_pool_size)                                                                        \\n\r\n                         || ' bytes '                                                                                       \\n\r\n                         || '('                                                                                             \\n\r\n                         || TO_CHAR (ROUND (used_pool_size / 1024 / 1024\, 2))                                               \\n\r\n                         || 'MB)'                                                                                           \\n\r\n                        );                                                                                                  \\n\r\n   DBMS_OUTPUT.put_line (   'Shared pool allocation (actual):  '                                                            \\n\r\n                         || pool_size                                                                                       \\n\r\n                         || ' bytes '                                                                                       \\n\r\n                         || '('                                                                                             \\n\r\n                         || TO_CHAR (ROUND (pool_size / 1024 / 1024\, 2))                                                    \\n\r\n                         || 'MB)'                                                                                           \\n\r\n                        );                                                                                                  \\n\r\n   DBMS_OUTPUT.put_line (   'Percentage Utilized:  '                                                                        \\n\r\n                         || TO_CHAR (ROUND (used_pool_size / pool_size * 100))                                              \\n\r\n                        );                                                                                                  \\n\r\nEND;                                                                                                                        \\n\r\n/                                                                                                                           \\n,Shared_pool_Utilization,,,0,
Z:"snap_id_info_and_SQLDetails"=0000000b
 SEND,set linesize 300 \\n\r\n select distinct snap_id\,min(BEGIN_INTERVAL_TIME)\,max(END_INTERVAL_TIME)  \\n\r\n from dba_hist_snapshot where BEGIN_INTERVAL_TIME> sysdate-4/24 group by snap_id order by 1; \\n,Snapid_details_for_last_fours,,,
 SEND,SELECT snap_id\,STARTUP_TIME \\n\r\nFROM dba_hist_snapshot \\n\r\nWHERE begin_interval_time BETWEEN TO_DATE('&Begin_Time'\,'DD-MON-YYYY HH24:MI') \\n\r\nAND TO_DATE('&End_Time'\,'DD-MON-YYYY HH24:MI') order by snap_id;\\n\r\n,snap_id's,,,0,
 SEND,set linesize 300 \\n\r\ncol min_sampletime for a30 \\n\r\ncol max_sampletime for a30 \\n \r\nselect snap_id\,INSTANCE_NUMBER\,min(sample_time) min_sampletime\,max(sample_time) max_sampletime \\n\r\nfrom dba_hist_active_sess_history where snap_id between  &beginSnapId and &EndSnapId group by snap_id\,INSTANCE_NUMBER order by 1;  \\n,snapid_min_max_time_1,,,0,
 SEND,select min(sample_time) min_sampletime\,max(sample_time) max_sampletime \r\nfrom dba_hist_active_sess_history where snap_id between  &beginSnapId and &EndSnapId;,snapid_min_max_time_2,,,0,
 SEND,set linesize 300 \\n\r\ncol event for a50 \\n\r\ncol sql_id for a25 \\n\r\nselect event\, sql_id\,count(*) from dba_hist_active_sess_history \\n\r\nWHERE snap_id IN (&snap_id_list_Using_Commas) and event='&Event' group by event\,sql_id; \\n,Specific_Event_SQLID_count,,,0,
 SEND,set verify off lines 130 pages 1000 \\n\r\n   select sql_id\,sql_text from \r\n   DBA_HIST_SQLTEXT where sql_id in (select sql_id from dba_hist_active_sess_history \\n\r\n   where snap_id between &BeginSnapID and &EndSnapID); \\n,SQL_Text_for_SnapID's,,,0,
 SEND,set verify off lines 130 pages 1000  \\n\r\nset long 100000 \\n\r\n   select sql_id\,sql_text from  \\n\r\n   DBA_HIST_SQLTEXT where sql_id in (select sql_id from dba_hist_active_sess_history  \\n\r\n   where snap_id between &BeginSnapID and &EndSnapID) and upper(sql_text) like upper('%&TABLE_NAME %');  \\n,SQL_Text_For_table_For_SnapIDs,,,0,
 SEND,set linesize 300 \\n\r\ncol event for a50 \\n\r\ncol sql_id for a20 \\n\r\nselect event\, sql_id\,count(*) from dba_hist_active_sess_history \\n\r\nWHERE snap_id IN (&snap_id_list_Using_Commas) group by event\,sql_id order by 3 desc; \\n,Event_SQL_ID_Count,,,0,
 SEND,set long 100000 \\n\r\nselect distinct sql_text FROM v$sql WHERE sql_id= '&SQL_ID'; \\n,findsqltxt_sqlid,,,0,
 SEND,set linesize 300 \\n\r\n set long 100000 \\n\r\n set pagesize 500 \\n\r\n select sql_id\,sql_text from    DBA_HIST_SQLTEXT where sql_id ='&SQL_ID'; \\n,findsqltxt_SQLID_History,,,0,
 SEND,--Example : Enter value for begin_time: 29-DEC-2014 12:30 \\n\r\n--Example : Enter value for end_time: 29-DEC-2014 13:30 \\n\r\nset linesize 300 \\n\r\ncol sample_time for a50 \\n\r\ncol event for a40 \\n\r\nselect SAMPLE_TIME\, event\, count(*)\,sql_id from dba_hist_active_sess_history  \\n\r\nWHERE snap_id IN  \\n\r\n( \\n\r\nSELECT snap_id \\n\r\nFROM dba_hist_snapshot \\n\r\nWHERE begin_interval_time BETWEEN TO_DATE('&Begin_Time'\,'DD-MON-YYYY HH24:MI') \\n\r\nAND TO_DATE('&End_Time'\,'DD-MON-YYYY HH24:MI') \\n\r\n)  \\n\r\ngroup by SAMPLE_TIME\,event\,sql_id having count(*)>&count order by 1\,3; \\n\r\n\r\n,SQL_ID_event_BW_SnapIDs,,,0,
Z:"Spike"=00000012
 SEND,set linesize 300  \\n\r\n\r\nselect * from (select inst_id\,to_char(sample_time\,'YYYYMMDDHH24MISS')\,sql_id\, event\, count(*)  \\n\r\nfrom gv$active_session_history where   \\n\r\nSAMPLE_TIME > sysdate-2/24 group by inst_id\,to_char(sample_time\,'YYYYMMDDHH24MISS')\,event\,sql_id   \\n\r\nhaving count(*)>100 order by 2) where rownum<=10  \\n\r\nunion  \\n\r\nselect * from (select inst_id\,to_char(sample_time\,'YYYYMMDDHH24MISS')\,sql_id\, event\, count(*)   \\n\r\nfrom gv$active_session_history where   \\n\r\nSAMPLE_TIME > sysdate-2/24 group by inst_id\,to_char(sample_time\,'YYYYMMDDHH24MISS')\,event\,sql_id   \\n\r\nhaving count(*)>100 order by 2 desc) where rownum<=10;  \\n\r\n,ISS_START_Iss_END,,,
 SEND,set linesize 300  \\n\r\n\r\n\r\nselect * from (select inst_id\,to_char(sample_time\,'YYYYMMDDHH24MISS')\,sql_id\, event\, count(*) \\n\r\nfrom gv$active_session_history where \\n\r\nSAMPLE_TIME > sysdate-&How_many_Hrs_Back/24 group by inst_id\,to_char(sample_time\,'YYYYMMDDHH24MISS')\,event\,sql_id \\n\r\nhaving count(*)>&count order by 2) where rownum<=10 \\n\r\nunion \\n\r\nselect * from (select inst_id\,to_char(sample_time\,'YYYYMMDDHH24MISS')\,sql_id\, event\, count(*) \\n\r\nfrom gv$active_session_history where \\n\r\nSAMPLE_TIME > sysdate-&How_many_Hrs_Back/24 group by inst_id\,to_char(sample_time\,'YYYYMMDDHH24MISS')\,event\,sql_id \\n\r\nhaving count(*)>&count order by 2 desc) where rownum<=10; \\n\r\n,ISS_START_Iss_END_Given_count_Hrs_Curr,,,0,
 SEND,set lines 199 \\n\r\ncol sql_id for a13 \\n\r\ncol sid for a18 \\n\r\ncol status for a10 \\n\r\ncol obj_info for a90 \\n\r\ncol wait_sec for 99999 \\n\r\n\r\nselect \\n\r\nsid\, sql_id\, seconds_in_wait wait_sec\, \\n\r\ndecode(sign(row_wait_obj#)\, 1\, \\n\r\n                (select object_name from dba_objects where object_id=row_wait_obj# and data_object_id is not null) \\n\r\n               \,-1\, 'Null'\, 'Null') ||':'|| cmd ||':'|| event#||':'||nvl(substr(event\, 1\, 15)\, 'No Event') ||':'|| \\n\r\n               nvl(p1\,0)||':'||nvl(p2\, 0) ||':'|| nvl(p3\, 0) ||':'|| info "OBJ_INFO" \\n\r\nfrom \\n\r\n( \\n\r\n select \\n\r\n sid\, sql_id\, status\, seconds_in_wait\, \\n\r\n sid2\, sid3\, \\n\r\n max(seconds_in_wait) over (partition by sid2) ctime\, \\n\r\n count(*) over (partition by sid2) cnt\, \\n\r\n row_wait_obj#\, \\n\r\n cmd\, event\, event#\, p1\, p2\, p3\, "INFO" \\n\r\n from \\n\r\n ( \\n\r\n  select \\n\r\n  lpad(' '\, level-1)||sid sid\, decode(sql_id\, null\, prev_sql_id\, sql_id) sql_id\, status\, \\n\r\n  seconds_in_wait\, \\n\r\n  blocking_session\, \\n\r\n  blocking_session_status\, \\n\r\n  connect_by_root sid sid2\, \\n\r\n  sys_connect_by_path(sid\,':') sid3\, \\n\r\n  row_wait_obj#\, \\n\r\n  decode(command\, 2\, 'INSERT'\, 6\, 'UPDATE'\, 7\, 'DELETE'\, 182\, 'UPDATE INDEXES'\, 3\, 'SELECT FOR UPDATE'\, command) as cmd\, \\n\r\n  event\, event#\, \\n\r\n  p1\, \\n\r\n  p2\, \\n\r\n  p3\, \\n\r\n  status||':'||machine||':'||substr(module\, 1\, 10) "INFO" \\n\r\n  from v$session \\n\r\n  where taddr is not null or blocking_session  <> 0 \\n\r\n  connect by prior sid=blocking_session \\n\r\n  start with blocking_session is null \\n\r\n ) \\n\r\n) \\n\r\nwhere cnt > 1 \\n\r\norder by ctime desc\, sid2\,  length(sid3)\, seconds_in_wait desc; \\n\r\n\r\n\r\n\r\n,locktree,,,
 SEND,set trimspool on \\n\r\nset lines 199 \\n\r\nset pages 1000 \\n\r\nset arraysize 100 \\n\r\ncol "SID:MACHINE" for a18 \\n\r\ncol "SQL_ID" for a13 \\n\r\ncol "EVENT#:P1:P2:P3:WAITING_STATUS" for a57 \\n\r\ncol "MODULE:CALL_TIME_SEC" for a20 \\n\r\n\r\n\r\nselect \\n\r\ns.sid||':'||s.machine "SID:MACHINE"\, \\n\r\nnvl(s.sql_id\, s.prev_sql_id) "SQL_ID"\, \\n\r\ni.block_gets+i.consistent_gets gets\, \\n\r\ns.event#||':'||substr(s.event\, 1\, 16)||': '||s.p1||':'||s.p2||':'||s.p3||':'|| \\n\r\ndecode(state\, 'WAITING'\, 'WAIT:'||seconds_in_wait\, 'NOWAIT:'||seconds_in_wait) "EVENT#:P1:P2:P3:WAITING_STATUS"\, \\n\r\ncase when length(module) > 13 then substr(module\, -13) else module end||':'||s.last_call_et||':'||command "MODULE:CALL_TIME_SEC" \\n\r\nfrom \\n\r\nv$session s\, v$sess_io i \\n\r\nwhere \\n\r\ns.sid = i.sid and \\n\r\ns.status = 'ACTIVE' and \\n\r\ns.event not in ('rdbms ipc message'\, 'pmon timer'\, 'smon timer') \\n\r\norder by s.event#; \\n\r\n,10g_lw,,,
 SEND,set feed on echo on \\n\r\nset lines 300 pages 200 \\n\r\ncol machine for a25 \\n\r\ncol sid for 9999999 \\n\r\ncol serial# for 9999999 \\n\r\ncol username for a15 \\n\r\ncol osuser for a15 \\n\r\nselect sid\, serial#\, username\, osuser\, status\, machine\, to_char(logon_time\,'YYYY-MM-DD HH24:MI:SS') login_time \\n\r\nfrom v$session where status='ACTIVE' and username is not null \\n\r\norder by username\, login_time; \\n\r\n,sa,,,0,
 SEND,set feed on echo on \\n\r\nset lines 300 pages 200 \\n\r\ncol machine for a30 \\n\r\ncol sid for 9999999 \\n\r\ncol serial# for 9999999 \\n\r\ncol username for a15 \\n\r\ncol osuser for a15 \\n\r\nselect inst_id\,sid\, serial#\, username\, osuser\, status\, machine\, PROGRAM\,to_char(logon_time\,'YYYY-MM-DD HH24:MI:SS') login_time \\n\r\nfrom gv$session where status='ACTIVE' and username is not null \\n\r\norder by 1\,username\, login_time ; \\n,gv_sa_Acti,,,0,
 SEND,set trimspool on \\n\r\nset lines 199 \\n\r\nset pages 1000 \\n\r\nset arraysize 100 \\n\r\ncol "SID:BOX" for a18 \\n\r\ncol blk_sid for 99999 \\n\r\ncol "SQL_ID" for a13 \\n\r\ncol "EVENT#:P1:P2:P3:WAITING_STATUS" for a57 \\n\r\ncol "MODULE:CALL_TIME_SEC" for a19 \\n\r\ncol Bind_info for a20 \\n\r\ncol corelation_id for a15 \\n\r\n\r\nselect \\n\r\ns.sid||':'||s.machine "SID:BOX"\, \\n\r\ns.final_blocking_session blk_sid\, \\n\r\nnvl(s.sql_id\, s.prev_sql_id) "SQL_ID"\, \\n\r\ni.block_gets+i.consistent_gets gets\, \\n\r\ns.event#||':'||substr(s.event\, 1\, 16)||': '||s.p1||':'||s.p2||':'||s.p3||':'|| \\n\r\ndecode(wait_time\, 0\, 'WAIT:'||(round(wait_time_micro/1000))\,  \\n\r\n'CPU:'||(round(wait_time_micro/1000))) "EVENT#:P1:P2:P3:WAITING_STATUS"\, \\n\r\ncase when length(module) > 11 then substr(module\, -11) else module end||':'|| \\n\r\ncase when s.last_call_et < 86400 then round(s.last_call_et/60) else null end||':'||command "MODULE:CALL_TIME_SEC"\, \\n\r\ns.client_identifier Bind_info\, \\n\r\ns.Action corelation_id \\n\r\nfrom \\n\r\nv$session s\, v$sess_io i \\n\r\nwhere \\n\r\ns.sid = i.sid and \\n\r\ns.status = 'ACTIVE' and \\n\r\n((s.event not in ('rdbms ipc message'\, 'pmon timer'\, 'smon timer'\, 'jobq slave wait') and s.type <> 'BACKGROUND') or \\n\r\n (s.wait_class <> 'Idle' and s.type = 'BACKGROUND')) \\n\r\norder by s.event#\, nvl(s.sql_id\, s.prev_sql_id); \\n\r\n\r\n,11g_lw,,,0,
 SEND,set trimspool on \\n\r\nset lines 199 \\n\r\nset pages 1000 \\n\r\nset arraysize 100 \\n\r\ncol "SID:BOX" for a18 \\n\r\ncol blk_sid for 99999 \\n\r\ncol "SQL_ID" for a13 \\n\r\ncol "EVENT#:P1:P2:P3:WAITING_STATUS" for a57 \\n\r\ncol "MODULE:CALL_TIME_SEC" for a19 \\n\r\ncol Bind_info for a20 \\n\r\ncol corelation_id for a15 \\n\r\n \\n\r\nselect \\n\r\ns.inst_id\,s.sid||':'||s.machine "SID:BOX"\, \\n\r\ns.final_blocking_session blk_sid\, \\n\r\nnvl(s.sql_id\, s.prev_sql_id) "SQL_ID"\, \\n\r\ni.block_gets+i.consistent_gets gets\, \\n\r\ns.event#||':'||substr(s.event\, 1\, 16)||': '||s.p1||':'||s.p2||':'||s.p3||':'|| \\n\r\ndecode(wait_time\, 0\, 'WAIT:'||(round(wait_time_micro/1000))\, \\n\r\n'CPU:'||(round(wait_time_micro/1000))) "EVENT#:P1:P2:P3:WAITING_STATUS"\, \\n\r\ncase when length(module) > 11 then substr(module\, -11) else module end||':'|| \\n\r\ncase when s.last_call_et < 86400 then round(s.last_call_et/60) else null end||':'||command "MODULE:CALL_TIME_SEC"\, \\n\r\ns.client_identifier Bind_info\, \\n\r\ns.Action corelation_id \\n\r\nfrom \\n\r\ngv$session s\, gv$sess_io i \\n\r\nwhere \\n\r\ns.sid = i.sid and \\n\r\ns.status = 'ACTIVE' and \\n\r\n((s.event not in ('rdbms ipc message'\, 'pmon timer'\, 'smon timer'\, 'jobq slave wait') and s.type <> 'BACKGROUND') or \\n\r\n (s.wait_class <> 'Idle' and s.type = 'BACKGROUND')) \\n\r\norder by 1\,s.event#\, nvl(s.sql_id\, s.prev_sql_id); \\n,gv_11g_lw,,,0,
 SEND,set linesize 300 \\n\r\nselect inst_id\, event\, count(*)\, avg(Wait_time)\, max(wait_time) \\n\r\n  from gv$session_wait  \\n\r\n  where event not in (  \\n\r\n'HS message to agent'\,  \\n\r\n'SQL*Net break/reset to client'\, \\n\r\n'SQL*Net message from client'\, \\n\r\n'SQL*Net message to client'\, \\n\r\n'jobq slave wait'\, \\n\r\n'pipe get'\, \\n\r\n'pmon timer'\, \\n\r\n'queue messages'\, \\n\r\n'rdbms ipc message'\, \\n\r\n'smon timer'\, \\n\r\n'wait for unread message on broadcast channel'\, \\n\r\n'wakeup time manager'\, \\n\r\n'ASM background timer'\, \\n\r\n'DIAG idle wait'\, \\n\r\n'PX Deq: Execute Reply'\, \\n\r\n'PX Deq: Execution Msg'\, \\n\r\n'PX Deq: reap credit'\, \\n\r\n'Streams AQ: qmn coordinator idle wait'\, \\n\r\n'Streams AQ: qmn slave idle wait'\, \\n\r\n'Streams AQ: waiting for messages in the queue'\, \\n\r\n'Streams AQ: waiting for time management or cleanup tasks'\, \\n\r\n'class slave wait' \\n\r\n) \\n\r\nand wait_class<>'Idle' \\n\r\ngroup by inst_id\, event \\n\r\norder by 1\,3;  \\n,waits,,,0,
 SEND,\r\nset linesize 300 \\n\r\n\r\nset pages 1000 numwidth 12  \\n\r\n\r\nshow parameter db_name \\n\r\nshow parameter instance_name  \\n\r\n\r\ncol sid format 99999 \\n\r\ncol spid format a5 \\n\r\ncol event format a35 \\n\r\ncol machine format a20 \\n\r\ncol username format a8 \\n\r\ncol osuser format a8 \\n\r\ncol program format a15 \\n\r\n\r\nselect s.inst_id\, w.sid\, p.spid\, w.event\, w.p1\, w.p2\, w.p3\, s.username\, s.osuser\, s.machine\, substr(s.program\,1\,15) program \\n\r\nfrom gv$session_wait w\, gv$session s\, gv$process p  \\n\r\nwhere w.sid=s.sid and s.paddr=p.addr and w.event='&event'; \\n,waiters,,,0,
 SEND,set verify off lines 130 pages 1000 \\n\r\n\r\nselect b.sid\,b.serial#\,b.machine\,b.terminal\,b.username\,b.status\,b.osuser\,b.sql_id\,a.sql_text      \r\nfrom v$sqlarea a\,v$session b \r\nwhere a.address = b.sql_address and   a.hash_value = b.sql_hash_value and   b.sid = &sid;  \\n,findsql,,,0,
 SEND,col obj for a85 \\n\r\ncol ses_cnt for 9999 \\n\r\ncol info for a35 \\n\r\nset lines 160 \\n\r\nset trimspool on \\n\r\n\r\nselect  \\n\r\nobj\,  \\n\r\ncount(*) as ses_cnt\,  \\n\r\nmin(sql_hash_value) hash\,  \\n\r\ncmd ||' : '|| module "INFO" \\n\r\n from \\n\r\n  (select decode(sign(row_wait_obj#)\, 1\, \\n\r\n                (select object_name from dba_objects where object_id=row_wait_obj# and data_object_id is not null) \\n\r\n                \,-1\, 'UNKNOWN'\, 'UNKNOWN') || ':' || event || ':' || p2 || ':' || p3 || ':' || \\n\r\n                chr(bitand(p1\, -16777216)/16777215) || chr(bitand(p1\, 16711680)/65535) || ':''' || \\n\r\n               decode(sign(row_wait_obj#)\, 1\, dbms_rowid.rowid_create(1\, (select data_object_id from dba_objects \\n\r\n                                          where object_id = row_wait_obj# and data_object_id is not null)\, \\n\r\n                                       row_wait_file#\, row_wait_block#\, row_wait_row#)\, 'No rowid') || '''' as obj\, \\n\r\n       decode(command\, 2\, 'INSERT'\, 6\, 'UPDATE'\, 7\, 'DELETE'\, 182\, 'UPDATE INDEXES'\, 3\, 'SELECT FOR UPDATE'\, command) as cmd\, \\n\r\n       sql_hash_value\, \\n\r\n       module \\n\r\n  from \\n\r\n  v$session \\n\r\n  where \\n\r\n  status = 'ACTIVE' and \\n\r\n  lockwait is not null \\n\r\n  ) \\n\r\ngroup by obj\, cmd||' : '||module \\n\r\norder by 2; \\n\r\n,rowlocks,,,0,
 SEND,--Example : Enter value for begin_time: 29-DEC-2014 12:30 \\n\r\n--Example : Enter value for end_time: 29-DEC-2014 13:30 \\n\r\nset linesize 300 \\n\r\ncol sample_time for a50 \\n\r\ncol event for a40 \\n\r\nselect SAMPLE_TIME\, event\, count(*) from dba_hist_active_sess_history  \\n\r\nWHERE snap_id IN  \\n\r\n( \\n\r\nSELECT snap_id \\n\r\nFROM dba_hist_snapshot \\n\r\nWHERE begin_interval_time BETWEEN TO_DATE('&Begin_Time'\,'DD-MON-YYYY HH24:MI') \\n\r\nAND TO_DATE('&End_Time'\,'DD-MON-YYYY HH24:MI') \\n\r\n)  \\n\r\ngroup by SAMPLE_TIME\,event having count(*)>&count order by 1\,3; \\n\r\n\r\n,event_BW_SnapIDs,,,0,
 SEND,set linesize 300 \\n\r\nBreak on Sample_time \\n\r\nset pages 300 \\n\r\nselect sql_id\,count(*)\,to_char(sample_time\,'YYYYMMDDHH24MISS') Sample_time  \\n\r\nfrom V$ACTIVE_SESSION_HISTORY where sample_time between to_date(&Begin_time_in_YYYYMMDDHH24MISS\,'YYYYMMDDHH24MISS') \r\nand to_date(&end_time_in_YYYYMMDDHH24MISS\,'YYYYMMDDHH24MISS')   group by sql_id\,to_char(sample_time\,'YYYYMMDDHH24MISS')  \r\norder by 3\,2\,1; \\n\r\n,sqlid_Count_v$acti_se_hist,,,0,
 SEND,select EVENT\,count(*) from gv$session where sql_id='&sqlid' group by event; \\n,Event_for_SQLID,,,0,
 SEND,\r\nset ver off \\n\r\nset lines 199 \\n\r\nset trimspool on \\n\r\ncol begin_time for a19 \\n\r\n \\n\r\nselect \\n\r\na.snap_id\, \\n\r\nto_char(b.begin_interval_time\, 'DD/MM HH24:MI') begin_time\, \\n\r\nround(a.executions_delta/snap_time\, 1) exe_per_sec\, \\n\r\nround(a.buffer_gets_delta/snap_time\, 1) lio_per_sec\, \\n\r\nround(a.disk_reads_delta/snap_time\, 1) pio_per_sec\, \\n\r\nround(a.cpu_time_delta/snap_time\, 1) cpu_per_sec\, \\n\r\nround(a.elapsed_time_delta/snap_time\, 1) ela_per_sec\, \\n\r\nround(a.rows_processed_delta/snap_time\, 1) row_per_sec \\n\r\nfrom \\n\r\ndba_hist_sqlstat a\, \\n\r\n( \\n\r\nselect \\n\r\nsnap_id\, \\n\r\nbegin_interval_time\, \\n\r\n(to_date(to_char(END_INTERVAL_TIME\, 'DD-MON-YY HH24:MI:SS')\, 'DD-MON-YY HH24:MI:SS')- \\n\r\nto_date(to_char(BEGIN_INTERVAL_TIME\, 'DD-MON-YY HH24:MI:SS')\, 'DD-MON-YY HH24:MI:SS'))*86400 snap_time \\n\r\nfrom dba_hist_snapshot \\n\r\nwhere \\n\r\ndbid = (select dbid from v$database) and \\n\r\nsnap_id > (select max(snap_id) - &num_rows from dba_hist_snapshot) \\n\r\n) b \\n\r\nwhere \\n\r\na.snap_id = b.snap_id and \\n\r\na.sql_id = '&sql_id' \\n\r\norder by a.snap_id \\n\r\n/ \\n\r\n\r\n,SQLHIST,,,0,
 SEND,set feed on echo on \\n\r\nset lines 300 pages 200 \\n\r\ncol machine for a45 \\n\r\ncol sid for 9999999 \\n\r\ncol serial# for 9999999 \\n\r\ncol username for a15 \\n\r\ncol osuser for a15 \\n\r\ncol program for a40 \\n\r\nselect inst_id\,sid\, serial#\, username\, osuser\, status\, machine\, PROGRAM\,to_char(logon_time\,'YYYY-MM-DD HH24:MI:SS') login_time \\n\r\nfrom gv$session where username is not null \\n\r\norder by 1\,username\, login_time ; \\n,sa_Ac_In,,,0,
 SEND,set lines 300 pages 1000 numwidth 12  \\n\r\n\r\nshow parameter db_name \\n\r\nshow parameter instance_name  \\n\r\n\r\ncol sid format 99999 \\n\r\ncol spid format a5 \\n\r\ncol event format a35 \\n\r\ncol machine format a25 \\n\r\ncol username format a8 \\n\r\ncol osuser format a8 \\n\r\ncol program format a15 \\n\r\n\r\nselect s.inst_id\, w.sid\, s.sql_id\,p.spid\, w.event\, w.p1\, w.p2\, w.p3\, s.username\, s.osuser\, s.machine\, substr(s.program\,1\,15) program \\n\r\nfrom gv$session_wait w\, gv$session s\, gv$process p  \\n\r\nwhere w.sid=s.sid and s.paddr=p.addr and w.event='&event'; \\n,waiters_Sql,,,0,
Z:"spike_1"=00000002
 SEND,set linesize 300  \\n\r\n\r\n\r\n\r\nselect * from (select INSTANCE_NUMBER\,to_char(sample_time\,'YYYYMMDDHH24MISS')\,sql_id\, event\, count(*) \\n\r\nfrom dba_hist_active_sess_history where \\n\r\nSAMPLE_TIME > sysdate-&How_many_Hrs_Back/24 group by INSTANCE_NUMBER\,to_char(sample_time\,'YYYYMMDDHH24MISS')\,event\,sql_id \\n\r\nhaving count(*)>&count order by 2) where rownum<=10 \\n\r\nunion \\n \r\nselect * from (select INSTANCE_NUMBER\,to_char(sample_time\,'YYYYMMDDHH24MISS')\,sql_id\, event\, count(*) \\n\r\nfrom dba_hist_active_sess_history where \\n\r\nSAMPLE_TIME > sysdate-&How_many_Hrs_Back/24 group by INSTANCE_NUMBER\,to_char(sample_time\,'YYYYMMDDHH24MISS')\,event\,sql_id \\n\r\nhaving count(*)>&count order by 2 desc) where rownum<=10; \\n\r\n,ISS_START_Iss_END_Given_count_Hrs_History,,,0,
 SEND,select inst_id\,sql_id\,status\,count(*) from gv$session where sql_id='&SQL_ID' group by inst_id\,sql_id\,status order by 4 desc; \\n,RAC_SQLID_Sessions_Count,,,0,
Z:"spike_blocking"=0000000b
 SEND,set linesize 300  \\n\r\n\r\nselect * from (select inst_id\,to_char(sample_time\,'YYYYMMDDHH24MISS')\,sql_id\, event\, count(*)  \\n\r\nfrom gv$active_session_history where   \\n\r\nSAMPLE_TIME > sysdate-4/24 group by inst_id\,to_char(sample_time\,'YYYYMMDDHH24MISS')\,event\,sql_id   \\n\r\nhaving count(*)>100 order by 2) where rownum<=10  \\n\r\nunion  \\n\r\nselect * from (select inst_id\,to_char(sample_time\,'YYYYMMDDHH24MISS')\,sql_id\, event\, count(*)   \\n\r\nfrom gv$active_session_history where   \\n\r\nSAMPLE_TIME > sysdate-4/24 group by inst_id\,to_char(sample_time\,'YYYYMMDDHH24MISS')\,event\,sql_id   \\n\r\nhaving count(*)>100 order by 2 desc) where rownum<=10;  \\n\r\n,ISS_START_Iss_END,,,
 SEND,set linesize 300 \\n\r\n select distinct snap_id\,min(BEGIN_INTERVAL_TIME)\,max(END_INTERVAL_TIME)  \\n\r\n from dba_hist_snapshot where BEGIN_INTERVAL_TIME> sysdate-4/24 group by snap_id order by 1; \\n,Snapid_details_for_last_fours,,,
 SEND,set linesize 300 \\n\r\nselect sample_time\,INSTANCE_NUMBER\,session_id\,blocking_session\,BLOCKING_SESSION_SERIAL# \,event from dba_hist_active_sess_history      \r\nWHERE  snap_id IN (&snapID_seperated_by_comma) and blocking_session is not null  and event like '&Event' and SQL_ID='&SQL_ID'  order by 1;\\n,Finding_Blocker,,,0,
 SEND,set linesize 300 \\n\r\n\r\nset linesize 300 \\n\r\nselect sample_time\,INSTANCE_NUMBER\,session_id\,blocking_session\,BLOCKING_SESSION_SERIAL# \,event from dba_hist_active_sess_history      \r\nWHERE  snap_id IN (&snapID_seperated_by_comma) and blocking_session is not null   and SQL_ID='&SQL_ID'  order by 1;\\n\r\n,Finding_Blocker_1,,,0,
 SEND,set linesize 300 \\n\r\ncol sample_time for a30 \\n\r\ncol event for a30 \\n\r\ncol machine for a40 \\n\r\nselect sample_time\,session_id\,session_serial#\,sql_id\,event\,user_id\,machine\,instance_number\,program from dba_hist_active_sess_history      \r\nWHERE  snap_id IN (&snapID_seperated_by_comma) and session_id=&Blocker_Session and session_serial#=&blocker_serial; \\n,Blocker_Details,,,0,
 SEND,select username from dba_users where user_id=&userid;,Username,,,0,
 SEND,set linesize 300  \\n\r\ncol sample_time for a30  \\n\r\ncol event for a30  \\n\r\ncol machine for a40  \\n\r\nselect sample_time\,session_id\,session_serial#\,sql_id\,event\,user_id\,machine\,program from dba_hist_active_sess_history    \\n   \r\nWHERE  snap_id IN (&snapID_seperated_by_comma) and event='&event' and sql_id='&sql_id';  \\n,Session_details_during_Spike,,,0,
 SEND,set linesize 300 \\n\r\n select distinct snap_id\,min(BEGIN_INTERVAL_TIME)\,max(END_INTERVAL_TIME)  \\n\r\n from dba_hist_snapshot where BEGIN_INTERVAL_TIME> sysdate-15/24 group by snap_id order by 1; \\n,Snapid_details_for_last_fours,,,0,
 SEND,set feed on echo on \\n\r\nset lines 300 pages 200 \\n\r\ncol machine for a45 \\n\r\ncol sid for 9999999 \\n\r\ncol serial# for 9999999 \\n\r\ncol username for a15 \\n\r\ncol osuser for a15 \\n\r\ncol program for a40 \\n\r\nselect inst_id\,sid\, serial#\, username\, osuser\, status\, machine\, PROGRAM\,to_char(logon_time\,'YYYY-MM-DD HH24:MI:SS') login_time \\n\r\nfrom gv$session where username is not null and osuser='&osuser' \\n\r\norder by 1\,username\, login_time ; \\n,sa_act_inac_Sel_osuser,,,0,
 SEND,set linesize 300  \\n\r\ncol sample_time for a30  \\n\r\ncol event for a30  \\n\r\ncol machine for a40  \\n\r\nselect sample_time\,session_id\,session_serial#\,sql_id\,event\,user_id\,machine\,program from dba_hist_active_sess_history    \\n   \r\nWHERE  snap_id between &BeginSnapID and &EndSnapID  and sql_id='&sql_id';  \\n,Session_details_during_Spike,,,0,
 SEND,set linesize 300 \\n\r\nselect sample_time\,INSTANCE_NUMBER\,session_id\,blocking_session\,BLOCKING_SESSION_SERIAL# \,event from dba_hist_active_sess_history  \\n   \r\n WHERE  snap_id IN ( &snapID_seperated_by_comma) and blocking_session is not null  and event like '&Event' order by 1; \\n\r\n ,Find_Block_NoSQLID,,,0,
Z:"Spike_event"=0000000b
 SEND,SELECT snap_id \\n\r\nFROM dba_hist_snapshot \\n\r\nWHERE begin_interval_time BETWEEN TO_DATE('&Begin_Time'\,'DD-MON-YYYY HH24:MI') \\n\r\nAND TO_DATE('&End_Time'\,'DD-MON-YYYY HH24:MI') order by snap_id;\\n\r\n,snap_id's,,,
 SEND,--Example : Enter value for begin_time: 29-DEC-2014 12:30 \\n\r\n--Example : Enter value for end_time: 29-DEC-2014 13:30 \\n\r\nset linesize 300 \\n\r\ncol sample_time for a50 \\n\r\ncol event for a40 \\n\r\nselect SAMPLE_TIME\, event\, count(*) from dba_hist_active_sess_history  \\n\r\nWHERE snap_id IN  \\n\r\n( \\n\r\nSELECT snap_id \\n\r\nFROM dba_hist_snapshot \\n\r\nWHERE begin_interval_time BETWEEN TO_DATE('&Begin_Time'\,'DD-MON-YYYY HH24:MI') \\n\r\nAND TO_DATE('&End_Time'\,'DD-MON-YYYY HH24:MI') \\n\r\n)  \\n\r\ngroup by SAMPLE_TIME\,event having count(*)>&count order by 1\,3; \\n\r\n\r\n,event_BW_SnapIDs,,,
 SEND,set linesize 300 \\n\r\nBreak on Sample_time \\n\r\nset pages 300 \\n\r\nselect sql_id\,count(*)\,to_char(sample_time\,'YYYYMMDDHH24MISS') Sample_time  \\n\r\nfrom V$ACTIVE_SESSION_HISTORY where sample_time between to_date(&Begin_time_in_YYYYMMDDHH24MISS\,'YYYYMMDDHH24MISS') \r\nand to_date(&end_time_in_YYYYMMDDHH24MISS\,'YYYYMMDDHH24MISS')   group by sql_id\,to_char(sample_time\,'YYYYMMDDHH24MISS')  \r\norder by 3\,2\,1; \\n\r\n,sqlid_Count_v$active_ses_hist,,,
 SEND,select EVENT\,count(*) from gv$session where sql_id='&sqlid' group by event; \\n,Event_for_SQLID,,,
 SEND,--Example : Enter value for begin_time: 29-DEC-2014 12:30 \\n\r\n--Example : Enter value for end_time: 29-DEC-2014 13:30 \\n\r\nset linesize 300 \\n\r\ncol sample_time for a50 \\n\r\ncol event for a40 \\n\r\nselect SAMPLE_TIME\, event\, count(*)\,sql_id from dba_hist_active_sess_history  \\n\r\nWHERE snap_id IN  \\n\r\n( \\n\r\nSELECT snap_id \\n\r\nFROM dba_hist_snapshot \\n\r\nWHERE begin_interval_time BETWEEN TO_DATE('&Begin_Time'\,'DD-MON-YYYY HH24:MI') \\n\r\nAND TO_DATE('&End_Time'\,'DD-MON-YYYY HH24:MI') \\n\r\n)  \\n\r\ngroup by SAMPLE_TIME\,event\,sql_id having count(*)>&count order by 1\,3; \\n\r\n\r\n,SQL_ID_event_BW_SnapIDs,,,
 SEND, set linesize 300 \\n\r\nset pagesize 300 \\n\r\ncol machine for a25\\n\r\ncol username for a25 \\n\r\ncol event for a30 \\n\r\nselect inst_id\,sid\,serial#\,username\,event\,status\,sql_id\,BLOCKING_SESSION\,machine\,to_char(logon_time\,'DD-MON-YYYY HH24:MI:SS') from gv$session \\n\r\nwhere event like '&eventname' \\n\r\n and type!='BACKGROUND' order by 1; \\n,Specfic_Event,,,
 SEND, set linesize 300 \\n\r\ncol machine for a25\\n\r\ncol username for a25 \\n\r\nselect inst_id\,sid\,serial#\,username\,event\,status\,sql_id\,BLOCKING_SESSION\,machine\,to_char(logon_time\,'DD-MON-YYYY HH24:MI:SS') from gv$session \\n\r\nwhere event like '%lock%' or event like '%latch%' or event like '%buffer%' or event='latch: row cache objects' or event='enq: TM - contention' \\n\r\n or event='enq:_TX_-_index_contention' or event='TCP Socket (KGAS)'\\n\r\n and type!='BACKGROUND' order by 1; \\n,Sessions_Events_Info,,,
 SEND,set linesize 300 \\n\r\ncol machine for a45 \\n\r\ncol program for a35 \\n\r\ncol event for a40 \\n\r\nselect sql_id\,program\,username\,machine\,event\,count(*) from dba_hist_active_sess_history a\,dba_users b  \\n\r\nwhere sql_id='&SQL_ID' and snap_id between &BeginSnapID and &EndSnapID and a.user_id=b.user_id  \\n\r\ngroup by sql_id\,program\,b.username\,machine\,event order by 6 desc; \\n\r\n,SQLID\,username\,evernt\,Count,,,
 SEND,set linesize 300 \\n\r\ncol machine for a45 \\n\r\ncol program for a35 \\n\r\ncol event for a40 \\n\r\nselect sql_id\,program\,username\,machine\,event\,count(*) from dba_hist_active_sess_history a\,dba_users b  \\n\r\nwhere sql_id='&SQL_ID'  and  event='&event' and snap_id between &BeginSnapID and &EndSnapID and a.user_id=b.user_id  \\n\r\ngroup by sql_id\,program\,b.username\,machine\,event order by 6 desc; \\n\r\n,SQLID\,username\,evernt\,Count_Specific_Event,,,
 SEND,  set verify off lines 130 pages 1000 \\n\r\nselect b.sid\,b.serial#\,b.event\,b.sql_id\,a.sql_text   \\n    \r\nfrom v$sqlarea a\,v$session b where a.address = b.sql_address and   a.hash_value = b.sql_hash_value and   b.sid in (select sid from gv$session  \\n\r\nwhere event like '%lock%' or event like '%latch%' or event like '%buffer%' or event='latch: row cache objects' or event='enq: TM - contention'  \\n\r\nor event='enq:_TX_-_index_contention' or event='TCP Socket (KGAS)' \\n\r\n   and type!='BACKGROUND');  \\n,SQL_Text and Event,,,
 SEND,set linesize 300 \\n\r\nset pagesize 100 \\n\r\ncol machine for a45 \\n\r\ncol username for a15 \\n\r\nselect inst_id\, machine\,username\,count(1) from gv$session where sql_id='&sql_id' and username is not null group by inst_id\,machine\,username order by 1\,3\,2; \\n,Machine_count_SQLID,,,
Z:"stale"=00000007
 SEND,set linesize 300 \\n\r\ncol segment_name for a50    \\n \r\nselect  owner\,segment_name\,bytes/1024/1024 from dba_segments where segment_name in (select table_name from sys.dba_tab_modifications t \\n\r\nwhere table_owner in upper('&OWNER') \\n\r\n   and t.timestamp > sysdate - &no_of_days) order by 3 desc; \\n,Tables_Modified_tocheck_from_n_no.of_Days,,,
 SEND,set linesize 300 \\n\r\nset pagesize 100 \\n\r\ncol table_name for a50 \\n\r\ncol stale_stats for a15 \\n  \r\nselect table_name\,stale_stats from sys.dba_tab_statistics where table_name in ( \\n\r\n      select table_name from sys.dba_tab_modifications t \\n\r\nwhere table_owner in upper('&OWNER') \\n\r\n   and t.timestamp > sysdate - &no_of_days) and stale_stats='YES'; \\n,To_Check_Stale_stats_for_tables_which_are_modified_within_n_no.of_Days,,,
 SEND,set linesize 300 \\n\r\ncol table_name for a50 \\n\r\ncol stale_stats for a15 \\n  \r\nset pagesize 150 \\n\r\nSELECT table_name\, index_name\, stale_stats \\n\r\n  FROM SYS.dba_ind_statistics \\n\r\n WHERE owner=upper('&owner') and index_name IN ( \\n\r\n          SELECT index_name \\n\r\n            FROM dba_indexes \\n\r\n           WHERE table_name IN ( \\n\r\n                    SELECT table_name \\n\r\n                      FROM SYS.dba_tab_modifications t \\n\r\n                     WHERE table_owner IN upper('&table_OWNER') \\n\r\n                       AND t.TIMESTAMP > SYSDATE - &no_of_days)) \\n\r\n   AND stale_stats = 'YES'; \\n,To_Checck_Stale_stats_for_indexes_which_are_modified_within_n_no.of_Days,,,
 SEND,col table_name for a50 \\n\r\nset linesize 300 \\n\r\ncol stale_stats for a15 \\n  \r\nset pagesize 150 \\n \r\nSELECT table_name\, index_name\, stale_stats \\n\r\n  FROM SYS.dba_ind_statistics \\n\r\n WHERE owner=upper('&OWNER'); \\n,To_Check_Stale_stats_for_Schema,,,
 SEND,set linesize 300 \\n\r\nset pagesize 100 \\n\r\nselect TABLE_NAME \,  NUM_ROWS \, BLOCKS \, EMPTY_BLOCKS \, \\n\r\nCHAIN_CNT\, AVG_ROW_LEN\, AVG_SPACE_FREELIST_BLOCKS\, NUM_FREELIST_BLOCKS\, \\n\r\nCACHE\, to_char(LAST_ANALYZED\,'DD-MON-YYYY HH24:MI:SS')\, BUFFER_POOL \\n\r\nfrom dba_tables where owner like upper('&owner'); \\n,Stats_for_Schema,,,
 SEND,set linesize 300 \\n\r\nset pagesize 100 \\n\r\ncol table_name for a40 \\n\r\ncol owner for a15 \\n\r\ncol LAST_ANALYZED for a30 \\n\r\nselect OWNER\,TABLE_NAME \,  NUM_ROWS \, BLOCKS \, EMPTY_BLOCKS \, \\n\r\nCHAIN_CNT\, AVG_ROW_LEN \\n\r\nCACHE\, to_char(LAST_ANALYZED\,'DD-MON-YYYY HH24:MI:SS') LAST_ANALYZED \\n\r\nfrom dba_tables where table_name in (&Selected_Tables_use_Comma) order by owner; \\n,Stats_For_Tables,,,0,
 SEND,set linesize 300 \\n\r\nset pagesize 100 \\n\r\nselect TABLE_NAME \,  NUM_ROWS \, BLOCKS \, EMPTY_BLOCKS \, \\n\r\nCHAIN_CNT\, AVG_ROW_LEN\, AVG_SPACE_FREELIST_BLOCKS\, NUM_FREELIST_BLOCKS\, \\n\r\nCACHE\, to_char(LAST_ANALYZED\,'DD-MON-YYYY HH24:MI:SS')\, BUFFER_POOL \\n\r\nfrom dba_tables where owner like upper('&owner') and LAST_ANALYZED>sysdate-&Noof_days; \\n,Stats_for_Schema_last_Ana_Days,,,
Z:"stale_1"=00000001
 SEND,set linesize 300 \\n\r\nset pagesize 100 \\n\r\ncol owner for a15 \\n\r\ncol LAST_ANALYZED for a30 \\n\r\n-------example : 'EMP'\,'DEPT'\,'SALGRADE' \\n\r\nselect OWNER\,TABLE_NAME \,  NUM_ROWS \, BLOCKS \, EMPTY_BLOCKS \, \\n\r\nCHAIN_CNT\, AVG_ROW_LEN \\n\r\nCACHE\, to_char(LAST_ANALYZED\,'DD-MON-YYYY HH24:MI:SS') LAST_ANALYZED \\n\r\nfrom dba_tables where table_name in (&Selected_Tables_Check_Example) and owner='&OWNER' ; \\n,Stats_For_Tables_owner,,,0,
Z:"Stats"=00000001
 SEND,--begin												\\n\r\n--dbms_stats.gather_table_stats(                    \\n\r\n--ownname=> 'SCOTT'\,                                \\n\r\n--tabname=> 'EMP' \,                                 \\n\r\n--estimate_percent=> dbms_stats.auto_sample_size\,   \\n\r\n--cascade=> dbms_stats.auto_cascade\,                \\n\r\n--degree=> 4\,                                       \\n\r\n--no_invalidate=>false\,                             \\n\r\n--granularity=> 'AUTO'\,                             \\n\r\n--method_opt=> 'FOR ALL COLUMNS SIZE AUTO');        \\n\r\n--end;                                              \\n\r\n--/                                                 \\n,Example_for_Stats_Gather_for_Table,,,0,
Z:"TBS"=0000000d
 SEND,set linesize 130 \\n \r\nset pagesize 1000 \\n\r\ncol tablespace format a30  \\n\r\n\r\nselect tablespace_name tablespace\, \\n\r\nround(sum(a.total1)/1048576\, 0) Total\,  \\n\r\nround(sum(a.total1)/1048576\, 0)-round(sum(a.sum1)/1048576\, 0) used\, \\n\r\nround(sum(a.sum1)/1048576\, 0) free\, \\n\r\nround(((sum(a.sum1)/1048576)/(sum(a.total1)/1048576))*100\, 0) pct_free\, \\n\r\nround(sum(a.maxb)/1048576\, 0) largest\, \\n\r\nmax(a.cnt) fragment \\n\r\nfrom \\n\r\n(select tablespace_name\, 0 total1\, sum(bytes) sum1\,  \\n\r\nmax(bytes) MAXB\, \\n\r\ncount(bytes) cnt \\n\r\nfrom dba_free_space \\n\r\ngroup by tablespace_name \\n\r\nunion \\n\r\nselect tablespace_name\, sum(bytes) total1\, 0\, 0\, 0 from dba_data_files \\n\r\ngroup by tablespace_name) a \\n\r\ngroup by a.tablespace_name \\n\r\norder by 5 desc; \\n\r\n,tbs_free,,,
 SEND,set linesize 130  \\n\r\nset pagesize 1000  \\n\r\nset echo on \\n\r\n\r\n\r\ncol file_name format a80 \\n\r\n\r\nselect file_id\,file_name\, bytes/1048576 mb\,AUTOEXTENSIBLE\,MAXBYTES/1024/1024/1024 MAX_BYTES_GB \\n\r\nfrom dba_data_files \\n\r\nwhere tablespace_name='&tbs' \\n\r\norder by substr(file_name\,length(file_name)-5\,6); \\n\r\n\r\n,tbs_file,,,0,
 SEND,set ver off \\n\r\nset trimspool on \\n\r\nset lines 199 \\n\r\ncol owner for a15 \\n\r\ncol segment_name for a30 \\n\r\ncol segment_type for a25 \\n\r\ncol tablespace_name for a22 \\n\r\nset pagesize 150 \\n\r\ncol part_name for a30 \\n\r\ncompu sum of size_mb on report \\n\r\nbreak on report skip 2 \\n\r\n\r\nselect  \\n\r\nowner\, segment_name\,partition_name part_name\, buffer_pool\, segment_type\, tablespace_name\, extents\,  \\n\r\nround(bytes/1024/1024) size_mb \\n\r\nfrom dba_segments where  \\n\r\nsegment_name like upper('&segname');  \\n,segmentbyname,,,0,
 SEND,select sum(bytes)/1024/1024/1024 GB from dba_segments; \\n\r\n\r\nselect sum(bytes)/1024/1024/1024 GB from dba_data_files; \\n\r\n\r\nselect sum(bytes)/1024/1024/1024 GB from dba_temp_files; \\n\r\n,DBSize,,,
 SEND,set pagesize 200 \\n\r\nset linesize 300 \\n\r\ncol segment_name format a40 \\n\r\ncol owner format a10 \\n\r\n\r\nselect segment_name\,object_type\,total_physical_reads \\n\r\nfrom ( select owner||'.'||object_name as segment_name\,object_type\, \\n\r\nvalue as total_physical_reads \\n\r\nfrom v$segment_statistics \\n\r\nwhere statistic_name in ('physical reads') \\n\r\norder by total_physical_reads desc) \\n\r\nwhere rownum <=10; \\n,Seg_With_Highest_IO_Reads,,,
 SEND,set pagesize 200 \\n\r\nset linesize 300 \\n\r\ncol segment_name format a40 \\n\r\ncol owner format a10 \\n\r\n\r\nselect segment_name\,object_type\,total_physical_reads \\n\r\nfrom ( select owner||'.'||object_name as segment_name\,object_type\, \\n\r\nvalue as total_physical_reads \\n\r\nfrom v$segment_statistics \\n\r\nwhere statistic_name in ('physical writes') \\n\r\norder by total_physical_reads desc) \\n\r\nwhere rownum <=10; \\n,Seg_With_Highest_IO_Writes,,,
 SEND,col name format a40 \\n\r\nset linesize 300 \\n\r\ncol name for a80 \\n\r\n\r\nselect * from ( \\n\r\nselect name\,phyrds\, phywrts\,readtim\,writetim \\n\r\nfrom v$filestat a\, v$datafile b \\n\r\nwhere a.file#=b.file# \\n\r\norder by readtim desc) where rownum <6; \\n,DF's_With_Highest_IO,,,
 SEND,SELECT occupant_name\, space_usage_kbytes/1024 MB FROM V$SYSAUX_OCCUPANTS; \\n,Sysaux_Contents,,,
 SEND,SET TERMOUT OFF; \\n\r\nCOLUMN current_instance NEW_VALUE current_instance NOPRINT; \\n\r\nSELECT rpad(instance_name\, 17) current_instance FROM v$instance; \\n\r\nSET TERMOUT ON; \\n\r\n\r\nPROMPT  \\n\r\nPROMPT +------------------------------------------------------------------------+ \\n\r\nPROMPT | Report   : Owner to Tablespace Report                                  | \\n\r\nPROMPT | Instance : &current_instance                                           | \\n\r\nPROMPT +------------------------------------------------------------------------+ \\n\r\n\r\nSET ECHO        OFF \\n\r\nSET FEEDBACK    6 \\n\r\nSET HEADING     ON \\n\r\nSET LINESIZE    180 \\n\r\nSET PAGESIZE    50000 \\n\r\nSET TERMOUT     ON \\n\r\nSET TIMING      OFF \\n\r\nSET TRIMOUT     ON \\n\r\nSET TRIMSPOOL   ON \\n\r\nSET VERIFY      OFF \\n\r\n\r\nCLEAR COLUMNS \\n\r\nCLEAR BREAKS \\n\r\nCLEAR COMPUTES \\n\r\n\r\nCOLUMN owner           FORMAT a20                  HEADING "Owner" \\n\r\nCOLUMN tablespace_name FORMAT a30                  HEADING "Tablespace Name" \\n\r\nCOLUMN segment_type    FORMAT a18                  HEADING "Segment Type" \\n\r\nCOLUMN bytes           FORMAT 9\,999\,999\,999\,999    HEADING "Size (in Bytes)" \\n\r\nCOLUMN seg_count       FORMAT 9\,999\,999\,999        HEADING "Segment Count" \\n\r\n\r\nBREAK ON report ON owner SKIP 2 \\n\r\n\r\nCOMPUTE sum LABEL ""                OF seg_count bytes ON owner \\n\r\nCOMPUTE sum LABEL "Grand Total: "   OF seg_count bytes ON report \\n\r\n\r\nSELECT \\n\r\n    owner \\n\r\n  \, tablespace_name \\n\r\n  \, segment_type \\n\r\n  \, sum(bytes)  bytes \\n\r\n  \, count(*)    seg_count \\n\r\nFROM \\n\r\n    dba_segments \\n\r\nGROUP BY \\n\r\n    owner \\n\r\n  \, tablespace_name \\n\r\n  \, segment_type \\n\r\nORDER BY \\n\r\n    owner \\n\r\n  \, tablespace_name \\n\r\n  \, segment_type; \\n\r\n\r\n\r\n,Owner_TBS_Report,,,0,
 SEND,--alter tablespace <TSNAME> add datafile '+DATA01' size1g;  \\n\r\n--alter tablespace <USERS> add datafile '+DATA01' autoextend on maxsize 20G;,Example_Add_DF,,,0,
 SEND,set linesize 130 \\n \r\nset pagesize 1000 \\n\r\ncol tablespace format a30  \\n\r\nselect tablespace_name tablespace\, \\n\r\nround(sum(a.total1)/1048576\, 0) Total\, \\n\r\nround(sum(a.total1)/1048576\, 0)-round(sum(a.sum1)/1048576\, 0) used\, \\n\r\nround(sum(a.sum1)/1048576\, 0) free\, \\n\r\nround(((sum(a.sum1)/1048576)/(sum(a.total1)/1048576))*100\, 0) pct_free\, \\n\r\nround(sum(a.maxb)/1048576\, 0) largest\, \\n\r\nmax(a.cnt) fragment \\n\r\nfrom  \\n\r\n(select tablespace_name\, 0 total1\, sum(bytes) sum1\, \\n\r\nmax(bytes) MAXB\, \\n\r\ncount(bytes) cnt \\n\r\nfrom dba_free_space \\n\r\nwhere tablespace_name='&TS_Name' \\n\r\ngroup by tablespace_name \\n\r\nunion \\n\r\nselect tablespace_name\, sum(bytes) total1\, 0\, 0\, 0 from dba_data_files \\n\r\nwhere tablespace_name='&TS_Name' \\n\r\ngroup by tablespace_name) a \\n\r\ngroup by a.tablespace_name \\n\r\norder by 5 desc; \\n,tbs_free_for_TS,,,
 SEND,set linesize 300 \\n\r\nset pagesize 100 \\n \r\ncol name for a100  \\n\r\nalter session set nls_date_format='MM/DD/YYYY HH24:MI:SS';  \\n\r\nselect file#\,name\,CREATION_TIME\,bytes/1024/1024/1024 from v$datafile  \\n\r\nwhere CREATION_TIME>sysdate-&No_of_Days order by CREATION_TIME desc; \\n,DF_CREATED_Date,,,0,1,
 SEND,set linesize 300 \\n\r\n-- Please READ : Check the primary & stand by space in ASM or Filesystem\, before resizing the datafile. \\n\r\n-- select 'alter database datafile '''||file_name||''' resize 20G;' from dba_data_files where tablespace_name='&tablespace_name' and bytes/1024/1024/1024 <= 20; \\n\r\n--alter database datafile '+DATA01/ORCL1/DATAFILE/user01' autoextend on maxsize 20g; \\n\r\n----select 'alter database datafile '''||file_name||''' autoextend on maxsize 20g;' from dba_data_files; \\n\r\n--select 'alter database datafile '''||file_name||''' resize 20G;' from dba_data_files where tablespace_name='&tablespace_name' and bytes/1024/1024/1024 <= 20; \\n\r\n--select 'alter database datafile '''||file_name||''' autoextend on maxsize 20g;' from dba_data_files where tablespace_name='&Tablespace_NAME'; \\n\r\n----select 'alter database datafile '''||file_name||''' autoextend on maxsize 20g;' from dba_data_files where tablespace_name='&Tablespace_NAME' and  bytes/1024/1024/1024 <= 5;  \\n\r\n,Resize_Datafile,,,0,
Z:"TBS1"=00000007
 SEND,set linesize 300 \\n\r\nselect TABLESPACE_NAME\,SEGMENT_SPACE_MANAGEMENT\,EXTENT_MANAGEMENT\,ALLOCATION_TYPE from DBA_TABLESPACES; \\n,TBS_Properties,,,0,
 SEND,-- Use Below Command with Caution \\n\r\n-- select file_name\,MAXBYTES/1024/1024/1024 from dba_data_files; \\n\r\n--select 'alter database datafile '''||file_name||''' autoextend on maxsize &Size_in_GB_EXAMPLE_10G;' from dba_data_files; \\n\r\n--select 'alter database datafile '''||file_name||''' autoextend on maxsize &Size_in_GB_EXAMPLE_10G;' from dba_data_files where tablespace_name='&Tablespace_Name';  \\n\r\n--select 'alter database datafile '''||file_name||''' autoextend on maxsize &Size_in_GB_EXAMPLE_10G;' from dba_data_files where tablespace_name='&Tablespace_Name' and (maxbytes/1024/1024/1024) < 20 ;  \\n,Make_DF_MaxSize_20g_AutoExt_on,,,0,
 SEND,set linesize 300 \\n\r\nset pagesize 100 \\n\r\n select sum(bytes/1024/1024/1024)\,owner from dba_segments  group by owner order by 1; \\n,Size_of_Schemas,,,0,
 SEND,set linesize 300 \\n\r\nSELECT TABLESPACE_NAME\,SUM(BYTES)/1024/1024/1024 FROM DBA_SEGMENTS GROUP BY TABLESPACE_NAME ORDER BY 1; \\n,TBS_Segment's_Size,,,0,
 SEND,set linesize 1000 pagesize 0 feedback off trimspool on															\\n\r\nwith                                                                                                            \\n\r\nhwm as (                                                                                                        \\n\r\n  -- get highest block id from each datafiles ( from x$ktfbue as we don't need all joins from dba_extents )     \\n\r\n  select /*+ materialize */ ktfbuesegtsn ts#\,ktfbuefno relative_fno\,max(ktfbuebno+ktfbueblks-1) hwm_blocks      \\n\r\n  from sys.x$ktfbue group by ktfbuefno\,ktfbuesegtsn                                                             \\n\r\n)\,                                                                                                              \\n\r\nhwmts as (                                                                                                      \\n\r\n  -- join ts# with tablespace_name                                                                              \\n\r\n  select name tablespace_name\,relative_fno\,hwm_blocks                                                           \\n\r\n  from hwm join v$tablespace using(ts#)                                                                         \\n\r\n)\,                                                                                                              \\n\r\nhwmdf as (                                                                                                      \\n\r\n  -- join with datafiles\, put 5M minimum for datafiles with no extents                                          \\n\r\n  select file_name\,nvl(hwm_blocks*(bytes/blocks)\,5*1024*1024) hwm_bytes\,bytes\,autoextensible\,maxbytes           \\n\r\n from hwmts right join dba_data_files using(tablespace_name\,relative_fno)                                       \\n\r\n)                                                                                                               \\n\r\nselect                                                                                                          \\n\r\ncase when autoextensible='YES' and maxbytes>=bytes                                                              \\n\r\nthen -- we generate resize statements only if autoextensible can grow back to current size                      \\n\r\n  '/* reclaim '||to_char(ceil((bytes-hwm_bytes)/1024/1024)\,999999)                                              \\n\r\n   ||'M from '||to_char(ceil(bytes/1024/1024)\,999999)||'M */ '                                                  \\n\r\n   ||'alter database datafile '''||file_name||''' resize '||ceil(hwm_bytes/1024/1024)||'M;'                     \\n\r\nelse -- generate only a comment when autoextensible is off                                                      \\n\r\n  '/* reclaim '||to_char(ceil((bytes-hwm_bytes)/1024/1024)\,999999)                                              \\n\r\n   ||'M from '||to_char(ceil(bytes/1024/1024)\,999999)                                                           \\n\r\n   ||'M after setting autoextensible maxsize higher than current size for file '                                \\n\r\n   || file_name||' */'                                                                                          \\n\r\nend SQL                                                                                                         \\n\r\nfrom hwmdf                                                                                                      \\n\r\nwhere                                                                                                           \\n\r\nbytes-hwm_bytes>1024*1024 -- resize only if at least 1MB can be reclaimed                                       \\n\r\norder by bytes-hwm_bytes desc;                                                                                  \\n,Query to find how much space can be reclaimed from each datafile,,,0,
 SEND,set feedback off																						\\n\r\nset pagesize 100                                                                                        \\n   \r\nset linesize 200                                                                                        \\n   \r\nbreak on report                                                                                         \\n   \r\ncompute sum of DF_CUR_USE_MB on report                                                                  \\n   \r\ncompute sum of AUTO_FREE_SPACE_MB on report                                                             \\n   \r\ncol tablespace_name for a20                                                                             \\n   \r\nSET LINES 170                                                                                           \\n   \r\n                                                                                                        \\n   \r\nSELECT tablespace_name\, ROUND(SUM(total_mb)) DF_MAX_MB\, ROUND(SUM(total_mb)-SUM(free_mb)) DF_CUR_USE_MB\,\\n   \r\n   ROUND((SUM(total_mb)-SUM(free_mb))/SUM(total_mb)*100) DF_PCT_FULL\,                                   \\n   \r\n   ROUND(SUM(max_mb)) MAX_AUTO_MB\, ROUND(SUM(max_mb) - (SUM(total_mb)-SUM(free_mb))) AUTO_FREE_SPACE_MB\,\\n   \r\n   ROUND((SUM(total_mb)-SUM(free_mb))/SUM(max_mb)*100) AUTO_PCT_FULL                                    \\n   \r\n    FROM (                                                                                              \\n   \r\n      SELECT tablespace_name\, SUM(bytes)/1024/1024 FREE_MB\,                                             \\n   \r\n      0 TOTAL_MB\, 0 MAX_MB                                                                              \\n   \r\n      FROM dba_free_space                                                                               \\n   \r\n      GROUP BY tablespace_name                                                                          \\n   \r\n      UNION                                                                                             \\n   \r\n     SELECT tablespace_name\, 0 CURRENT_MB\,                                                              \\n   \r\n     SUM(bytes)/1024/1024 TOTAL_MB\,                                                                     \\n   \r\n     SUM(DECODE(maxbytes\,0\,bytes\, maxbytes))/1024/1024 MAX_MB                                           \\n   \r\n     FROM dba_data_files                                                                                \\n   \r\n     GROUP BY tablespace_name)                                                                          \\n   \r\n   GROUP BY tablespace_name;                                                                            \\n   ,TBS_Free_With_Autoextend,,,0,
 SEND,set linesize 300 \\n\r\ncol DF_NAME for a70 \\n\r\ncol TS_NAME for a30 \\n\r\nselect CREATION_TIME\,FILE# \,STATUS\,d.NAME DF_name\,t.NAME TS_Name  from v$datafile d\,v$tablespace t where d.TS#=t.TS# and FILE#=&file_number; \\n,Chk_DF_Created_Date,,,0,1,
Z:"Temp"=00000007
 SEND,col property_name for a35 \\n\r\ncol property_value for a20 \\n\r\ncol description for a45 \\n\r\nSELECT * FROM DATABASE_PROPERTIES where PROPERTY_NAME='DEFAULT_TEMP_TABLESPACE'; \\n,def_temp,,,
 SEND,set linesize 300 \\n\r\n\r\nSELECT   A.tablespace_name tablespace\, D.mb_total\, \\n\r\n         SUM (A.used_blocks * D.block_size) / 1024 / 1024 mb_used\, \\n\r\n         D.mb_total - SUM (A.used_blocks * D.block_size) / 1024 / 1024 mb_free \\n\r\nFROM     v$sort_segment A\, \\n\r\n         ( \\n\r\n         SELECT   B.name\, C.block_size\, SUM (C.bytes) / 1024 / 1024 mb_total \\n\r\n         FROM     v$tablespace B\, v$tempfile C \\n\r\n         WHERE    B.ts#= C.ts# \\n\r\n         GROUP BY B.name\, C.block_size \\n\r\n         ) D \\n\r\nWHERE    A.tablespace_name = D.name \\n\r\nGROUP by A.tablespace_name\, D.mb_total; \\n\r\n,TS_Temp_Usage,,,
 SEND,\r\nset lines 232 pages 1000  \\n\r\n\r\ncolumn username format a15 \\n\r\ncolumn osuser format a10 \\n\r\ncolumn module format a35 \\n\r\ncolumn program format a20 \\n\r\ncolumn Tablespace format a10 \\n\r\n\r\n\r\nselect * from (SELECT S.sid \,S.serial# \, S.username\, S.osuser\, S.module\,s.SQL_ID\, \\n\r\nP.program\, SUM (T.blocks) * TBS.block_size / 1024 / 1024 mb_used\, T.tablespace\, \\n\r\nCOUNT(*) statements \\n\r\nFROM v$sort_usage T\, v$session S\, dba_tablespaces TBS\, v$process P \\n\r\nWHERE T.session_addr = S.saddr \\n\r\nAND S.paddr = P.addr \\n\r\nAND T.tablespace = TBS.tablespace_name \\n\r\nGROUP BY S.sid\, S.serial#\, S.username\, S.osuser\,s.sql_id\,P.spid\, S.module\, \\n\r\nP.program\, TBS.block_size\, T.tablespace \\n\r\nORDER BY username) where mb_used > 1000; \\n,Temp_Space_Usage_SQLID,,,
 SEND,SET TERMOUT OFF; \\n\r\nCOLUMN current_instance NEW_VALUE current_instance NOPRINT; \\n\r\nSELECT rpad(instance_name\, 17) current_instance FROM v$instance; \\n\r\nSET TERMOUT ON; \\n\r\n\r\nPROMPT  \\n\r\nPROMPT +------------------------------------------------------------------------+ \\n\r\nPROMPT | Report   : Temporary Sort Users                                        | \\n\r\nPROMPT | Instance : &current_instance                                           | \\n\r\nPROMPT +------------------------------------------------------------------------+ \\n\r\n\r\nSET ECHO        OFF \\n\r\nSET FEEDBACK    6 \\n\r\nSET HEADING     ON \\n\r\nSET LINESIZE    180 \\n\r\nSET PAGESIZE    50000 \\n\r\nSET TERMOUT     ON \\n\r\nSET TIMING      OFF \\n\r\nSET TRIMOUT     ON \\n\r\nSET TRIMSPOOL   ON \\n\r\nSET VERIFY      OFF \\n\r\n\r\nCLEAR COLUMNS \\n\r\nCLEAR BREAKS \\n\r\nCLEAR COMPUTES \\n\r\n\r\nCOLUMN instance_name      FORMAT a9                 HEADING 'Instance' \\n\r\nCOLUMN tablespace_name    FORMAT a15                HEADING 'Tablespace Name' \\n\r\nCOLUMN sid                FORMAT 99999              HEADING 'SID' \\n\r\nCOLUMN serial_id          FORMAT 99999999           HEADING 'Serial ID' \\n\r\nCOLUMN session_status     FORMAT a9                 HEADING 'Status' \\n\r\nCOLUMN oracle_username    FORMAT a18                HEADING 'Oracle User' \\n\r\nCOLUMN os_username        FORMAT a18                HEADING 'O/S User' \\n\r\nCOLUMN os_pid             FORMAT a8                 HEADING 'O/S PID' \\n\r\nCOLUMN session_terminal   FORMAT a10                HEADING 'Terminal'         TRUNC \\n\r\nCOLUMN session_machine    FORMAT a30                HEADING 'Machine'          TRUNC \\n\r\nCOLUMN session_program    FORMAT a20                HEADING 'Session Program'  TRUNC \\n\r\nCOLUMN contents           FORMAT a9                 HEADING 'Contents' \\n\r\nCOLUMN extents            FORMAT 999\,999\,999        HEADING 'Extents' \\n\r\nCOLUMN blocks             FORMAT 999\,999\,999        HEADING 'Blocks' \\n\r\nCOLUMN bytes              FORMAT 999\,999\,999\,999    HEADING 'Bytes' \\n\r\nCOLUMN segtype            FORMAT a12                HEADING 'Segment Type' \\n\r\n\r\nBREAK ON instance_name SKIP PAGE \\n\r\n\r\nSELECT \\n\r\n    i.instance_name       instance_name \\n\r\n  \, t.tablespace          tablespace_name \\n\r\n  \, s.sid                 sid \\n\r\n  \, s.serial#             serial_id \\n\r\n  \, s.status              session_status \\n\r\n  \, s.username            oracle_username \\n\r\n  \, s.osuser              os_username \\n\r\n  \, p.spid                os_pid \\n\r\n  \, s.program             session_program \\n\r\n  \, t.contents            contents \\n\r\n  \, t.segtype             segtype \\n\r\n  \, (t.blocks * c.value)  bytes \\n\r\nFROM \\n\r\n    gv$instance     i \\n\r\n  \, gv$session      s \\n\r\n  \, gv$process      p \\n\r\n  \, gv$sort_usage   t \\n\r\n  \, (select value from v$parameter \\n\r\n     where name = 'db_block_size') c \\n\r\nWHERE \\n\r\n      s.inst_id = p.inst_id \\n\r\n  AND p.inst_id = i.inst_id \\n\r\n  AND t.inst_id = i.inst_id \\n\r\n  AND s.inst_id = i.inst_id \\n\r\n  AND s.saddr = t.session_addr \\n\r\n  AND s.paddr = p.addr \\n\r\nORDER BY \\n\r\n    i.instance_name \\n\r\n  \, s.sid; \\n\r\n,Temp_sort_users,,,0,
 SEND,\r\nset lines 232 pages 1000  \\n\r\n\r\ncolumn username format a15 \\n\r\ncolumn osuser format a10 \\n\r\ncolumn module format a35 \\n\r\ncolumn program format a30 \\n\r\ncolumn Tablespace format a10 \\n\r\n\r\n\r\nselect * from (SELECT S.sid \,S.serial# \, S.username\, S.osuser\, S.module\,s.SQL_ID\, \\n\r\nP.program\, SUM (T.blocks) * TBS.block_size / 1024 / 1024 mb_used\, T.tablespace\,s.logon_time\,s.status\, \\n\r\nCOUNT(*) statements \\n\r\nFROM v$sort_usage T\, v$session S\, dba_tablespaces TBS\, v$process P \\n\r\nWHERE T.session_addr = S.saddr \\n\r\nAND S.paddr = P.addr \\n\r\nAND T.tablespace = TBS.tablespace_name \\n\r\nGROUP BY S.sid\, S.serial#\, S.username\, S.osuser\,s.sql_id\,P.spid\, S.module\, \\n\r\nP.program\, TBS.block_size\, T.tablespace\,s.logon_time\,s.status \\n\r\nORDER BY s.logon_time) where mb_used > 10; \\n,Temp_Space_Usage_SQLID_Login_A_IA,,,
 SEND,-- alter tablespace  temp add tempfile '+DATA01' size 30g;,add_Space,,,0,
 SEND,set linesize 300  \\n\r\ncol file_name for a60 \\n\r\nselect file_name\,file_id\,user_bytes/1024/1024 from dba_temp_files; \\n,tempfile,,,0,
Z:"tfactl"=00000005
 SEND, ##  cd /u01/app/grid/product/12102/bin,cd_$GRID_HOME_BIN_As_Root,,,0,
 SEND,#./tfactl  diagcollect -node server_xyz -from "JUL/11/2016 13:00:00" -to "JUL/11/2016 21:00:00",tfactl_example,,,0,
 SEND,###./tfactl print actions,tfactl_print_actions,,,0,
 SEND,#./tfactl print status,tfactl print status,,,0,
 SEND,#  ./tfactl  diagcollect  -from "APR/19/2017 10:30:00" -to "APR/19/2017 11:30:00",tfactl_from_all_nodes,,,0,
Z:"Top"=00000005
 SEND,set linesize 300  \\n                                                      \r\nset pagesize 50   \\n                                                             \r\ncol owner for a20  \\n\r\ncol segment_name for a30  \\n\r\ncol segment_type for a30 \\n\r\nselect * from (select owner\,segment_name\,segment_type\,tablespace_name\,round (bytes/1024/1024/1024\,1) "size_in_GB" from dba_segments order by bytes/1024/1024/1024 desc) where rownum < 11 order by 5 desc; \\n,Top 10 Objects,,,0,
 SEND,set linesize 300 \\n\r\ncolumn SEGMENT_NAME format A50 \\n\r\nSELECT * FROM ( \\n\r\n  SELECT \\n\r\n    OWNER\, SEGMENT_NAME\, BYTES/1024/1024 SIZE_MB \\n\r\n  FROM \\n\r\n    DBA_SEGMENTS \\n\r\nWHERE \\n\r\n      SEGMENT_TYPE = 'TABLE' \\n\r\n  ORDER BY \\n\r\n    BYTES/1024/1024  DESC ) WHERE ROWNUM <= 10; \\n,Top_10_Tables,,,
 SEND,set linesize 300 \\n\r\ncolumn SEGMENT_NAME format A50 \\n\r\nSELECT * FROM ( \\n\r\n  SELECT \\n\r\n    OWNER\, SEGMENT_NAME\, BYTES/1024/1024 SIZE_MB \\n\r\n  FROM \\n\r\n    DBA_SEGMENTS \\n\r\nWHERE \\n\r\n      SEGMENT_TYPE = 'INDEX' \\n\r\n  ORDER BY \\n\r\n    BYTES/1024/1024  DESC ) WHERE ROWNUM <= 10; \\n\r\n\r\n,Top_10_Indexes,,,
 SEND,set linesize 300                                                        \\n\r\nset pagesize 50	                                                        \\n\r\ncol owner for a20 \\n\r\ncol segment_name for a30 \\n\r\n\r\nSELECT * FROM (															\\n\r\n  SELECT                                                                \\n\r\n    OWNER\, SEGMENT_NAME\, BYTES/1024/1024/1024 SIZE_GB                   \\n\r\n  FROM                                                                  \\n\r\n    DBA_SEGMENTS                                                        \\n\r\nWHERE                                                                   \\n\r\n      SEGMENT_TYPE = 'TABLE' and (BYTES/1024/1024/1024)>(&Size_in_GB)   \\n\r\n  ORDER BY                                                              \\n\r\n    BYTES/1024/1024  DESC );                                            \\n,Size_of_Top_Tables_Given_SizeinGB,,,0,
 SEND,set linesize 300                                                                                                   \\n\r\ncol segment_name for a45                                                                                           \\n\r\nset pagesize 300                                                                                                   \\n\r\ncol owner for a20 \\n\r\ncol part_name for a20 \\n\r\ncol segment_name for a30 \\n\r\n\r\nselect                                                                                                             \\n\r\nowner\, segment_name\,partition_name part_name\, buffer_pool\, segment_type\, tablespace_name\, extents\,                 \\n\r\nround(bytes/1024/1024) size_mb                                                                                     \\n\r\nfrom dba_segments where                                                                                            \\n\r\nsegment_name in (select distinct index_name from (                                                                 \\n\r\nselect b.uniqueness\,b.index_type\,b.status\,a.*                                                                      \\n\r\nfrom                                                                                                               \\n\r\n(select index_name\,index_owner\,                                                                                    \\n\r\n        max(decode(column_position\,1\,column_name\,null))||                                                          \\n\r\n        max(decode(column_position\,2\,'\, '||column_name\,null))||                                                    \\n\r\n        max(decode(column_position\,3\,'\, '||column_name\,null))||                                                    \\n\r\n        max(decode(column_position\,4\,'\, '||column_name\,null))||                                                    \\n\r\n   max(decode(column_position\,5\,'\, '||column_name\,null))||                                                         \\n\r\n        max(decode(column_position\,6\,'\, '||column_name\,null)) columns from dba_ind_columns                         \\n\r\n        where  table_name = upper('&table_name')                                                                   \\n\r\ngroup by index_name\,index_owner) a\,                                                                                \\n\r\ndba_indexes b                                                                                                      \\n\r\nwhere a.index_name = b.index_name and                                                                              \\n\r\na.index_owner=b.owner)) order by 1;                                                                                \\n,Chk_indexes_and_It's_Sizes_for_Given_table,,,0,
Z:"Triggers"=00000003
 SEND,select trigger_name\,status from dba_triggers where owner='SYSTEM'; \\n,Trigg_Status,,,
 SEND,alter trigger system.&TrigName enable; \\n,enable_trigg,,,
 SEND,alter trigger system.&TrigName disable; \\n,disable_trigg,,,
Z:"Undo"=00000007
 SEND,set linesize 200 pagesize 200 \\n\r\ncompute sum of "Total Space in GB" on report \\n\r\nselect tablespace_name\, status segment_status\, count(extent_id) "Extent Count"\, sum(blocks) "Total Blocks"\, \\n\r\nsum(blocks)*8/(1024) "Total Space in MB" \\n\r\nfrom dba_undo_extents \\n\r\ngroup by tablespace_name\, status \\n\r\norder by tablespace_name; \\n,undo_usage,,,
 SEND,SET TERMOUT OFF; \\n\r\nCOLUMN current_instance NEW_VALUE current_instance NOPRINT; \\n\r\nSELECT rpad(instance_name\, 17) current_instance FROM v$instance; \\n\r\nSET TERMOUT ON; \\n\r\n\r\nPROMPT  \\n\r\nPROMPT +------------------------------------------------------------------------+ \\n\r\nPROMPT | Report   : Undo Contention                                             | \\n\r\nPROMPT | Instance : &current_instance                                           | \\n\r\nPROMPT +------------------------------------------------------------------------+ \\n\r\n\r\nSET ECHO        OFF \\n\r\nSET FEEDBACK    6 \\n\r\nSET HEADING     ON \\n\r\nSET LINESIZE    180 \\n\r\nSET PAGESIZE    50000 \\n\r\nSET TERMOUT     ON \\n\r\nSET TIMING      OFF \\n\r\nSET TRIMOUT     ON \\n\r\nSET TRIMSPOOL   ON \\n\r\nSET VERIFY      OFF \\n\r\n\r\nCLEAR COLUMNS \\n\r\nCLEAR BREAKS \\n\r\nCLEAR COMPUTES \\n\r\n\r\nCOLUMN instance_name      FORMAT a10    HEAD 'Instance' \\n\r\nCOLUMN class              FORMAT a18    HEADING 'Class'   \\n  \r\nCOLUMN ratio                            HEADING 'Wait Ratio'   \\n     \r\n\r\nBREAK ON instance_name SKIP 2 \\n\r\n\r\nSELECT \\n\r\n    i.instance_name                     instance_name \\n\r\n  \, w.class                             class \\n\r\n  \, ROUND(100*(w.count/SUM(s.value))\,8) ratio \\n\r\nFROM \\n\r\n    gv$instance i \\n\r\n  \, gv$waitstat w \\n\r\n  \, gv$sysstat s \\n\r\nWHERE \\n\r\n      i.inst_id = w.inst_id \\n\r\n  AND i.inst_id = s.inst_id \\n\r\n  AND w.class IN (  'system undo header' \\n\r\n                  \, 'system undo block' \\n\r\n                  \, 'undo header' \\n\r\n                  \, 'undo block' \\n\r\n                 ) \\n\r\n  AND s.name IN ('db block gets'\, 'consistent gets') \\n\r\nGROUP BY \\n\r\n    i.instance_name \\n\r\n  \, w.class \\n\r\n  \, w.count \\n\r\nORDER BY \\n\r\n    i.instance_name \\n\r\n  \, w.class; \\n\r\n\r\n,undo_contention,,,
 SEND,set linesize 300 \\n\r\nSELECT TO_CHAR(BEGIN_TIME\, 'MM/DD/YYYY HH24:MI:SS') BEGIN_TIME\, \\n\r\n         TO_CHAR(END_TIME\, 'MM/DD/YYYY HH24:MI:SS') END_TIME\, \\n\r\n         UNDOTSN\, UNDOBLKS\, TXNCOUNT\, MAXCONCURRENCY AS "MAXCON"\, MAXQUERYLEN\, TUNED_UNDORETENTION \\n\r\n         FROM v$UNDOSTAT WHERE rownum <= 144; \\n,Undo_Trend_Today,,,
 SEND,set linesize 300 \\n\r\nset pagesize 300 \\n\r\nSELECT TO_CHAR(s.sid)||'\,'||TO_CHAR(s.serial#) sid_serial\, \\n\r\nNVL(s.username\, 'None') orauser\, \\n\r\ns.program\, \\n\r\nr.name undoseg\, \\n\r\nt.used_ublk * TO_NUMBER(x.value)/1024||'K' "Undo" \\n\r\nFROM sys.v_$rollname r\, \\n\r\nsys.v_$session s\, \\n\r\nsys.v_$transaction t\, \\n\r\nsys.v_$parameter x \\n\r\nWHERE s.taddr = t.addr \\n\r\nAND r.usn = t.xidusn(+) \\n\r\nAND x.name = 'db_block_size'; \\n,Undo_Usage_For_Sessions,,,
 SEND,SET TERMOUT OFF; \\n\r\nCOLUMN current_instance NEW_VALUE current_instance NOPRINT; \\n\r\nSELECT rpad(instance_name\, 17) current_instance FROM v$instance; \\n\r\nSET TERMOUT ON; \\n\r\n\r\nPROMPT  \\n\r\nPROMPT +------------------------------------------------------------------------+ \\n\r\nPROMPT | Report   : Uncommited Transactions                                     | \\n\r\nPROMPT | Instance : &current_instance                                           | \\n\r\nPROMPT +------------------------------------------------------------------------+ \\n\r\n\r\nSET ECHO        OFF \\n\r\nSET FEEDBACK    6 \\n\r\nSET HEADING     ON \\n\r\nSET LINESIZE    180 \\n\r\nSET PAGESIZE    50000 \\n\r\nSET TERMOUT     ON \\n\r\nSET TIMING      OFF \\n\r\nSET TRIMOUT     ON \\n\r\nSET TRIMSPOOL   ON \\n\r\nSET VERIFY      OFF \\n\r\n\r\nCLEAR COLUMNS \\n\r\nCLEAR BREAKS \\n\r\nCLEAR COMPUTES \\n\r\n\r\nCOLUMN sid                      FORMAT 999999           HEADING 'SID' \\n\r\nCOLUMN serial_id                FORMAT 99999999         HEADING 'Serial ID' \\n\r\nCOLUMN session_status           FORMAT a9               HEADING 'Status' \\n\r\nCOLUMN oracle_username          FORMAT a18              HEADING 'Oracle User' \\n\r\nCOLUMN os_username              FORMAT a18              HEADING 'O/S User' \\n\r\nCOLUMN os_pid                   FORMAT a8               HEADING 'O/S PID' \\n\r\nCOLUMN session_program          FORMAT a30              HEADING 'Session Program'  TRUNC \\n\r\nCOLUMN session_machine          FORMAT a30              HEADING 'Machine'          TRUNC \\n\r\nCOLUMN number_of_undo_records   FORMAT 999\,999\,999\,999  HEADING "# Undo Records" \\n\r\nCOLUMN used_undo_size           FORMAT     999\,999\,999  HEADING  "Used Undo (MB)" \\n\r\n\r\nSELECT \\n\r\n    s.sid                               sid \\n\r\n  \, s.status                            session_status \\n\r\n  \, s.username                          oracle_username \\n\r\n  \, s.osuser                            os_username \\n\r\n  \, p.spid                              os_pid \\n\r\n  \, b.used_urec                         number_of_undo_records \\n\r\n  \, (b.used_ublk * d.value)/1024/1024   used_undo_size \\n\r\n  \, s.program                           session_program \\n\r\n  \, s.machine                           session_machine \\n\r\nFROM \\n\r\n    v$process      p \\n\r\n  \, v$session      s \\n\r\n  \, v$transaction  b \\n\r\n  \, v$parameter    d \\n\r\nWHERE \\n\r\n      b.ses_addr =  s.saddr \\n\r\n  AND p.addr (+) =  s.paddr \\n\r\n  AND s.audsid   <> userenv('SESSIONID') \\n\r\n  AND d.name     =  'db_block_size'; \\n\r\n,Uncommited_Tran's,,,
 SEND,SELECT d.tablespace_name\,a.maxbytes/1048576 as max_total_mb\, round(((NVL(f.bytes\,0) + (a.maxbytes - a.bytes))/1048576+ u.exp_space)\,2) \\n\r\nas max_free_mb\, round(((a.bytes - (NVL(f.bytes\,0)+ (1024*1024*u.exp_space)))*100/a.maxbytes)\,2) \\n\r\nused_pct FROM   sys.dba_tablespaces d\, (select tablespace_name\, sum(bytes) bytes\, \\n\r\nsum(greatest(maxbytes\,bytes)) maxbytes from sys.dba_data_files group by tablespace_name) a\, \\n\r\n(select tablespace_name\, sum(bytes) bytes from sys.dba_free_space group by tablespace_name) f \, \\n\r\n(select tablespace_name \, sum(blocks)*8/(1024)  exp_space from \\n\r\ndba_undo_extents where status NOT IN ('ACTIVE'\,'UNEXPIRED')  group by  tablespace_name) u \\n\r\nWHERE d.tablespace_name = a.tablespace_name(+) AND d.tablespace_name = f.tablespace_name(+) \\n\r\nAND d.tablespace_name=u.tablespace_name  AND d.contents = 'UNDO' AND u.tablespace_name = (select UPPER(value) \\n\r\nfrom v$parameter where name = 'undo_tablespace'); \\n\r\n\r\n,UndoFree,,,
 SEND,set verify off lines 130 pages 1000 \\n\r\n\r\nselect b.sid\,b.serial#\,b.machine\,b.terminal\,b.username\,b.status\,b.osuser\,b.sql_id\,a.sql_text      \r\nfrom v$sqlarea a\,v$session b \r\nwhere a.address = b.sql_address and   a.hash_value = b.sql_hash_value and   b.sid = &sid;  \\n,findsql,,,0,1,
Z:"Unix Vi commands"=00000006
 SEND,SHIFT + ~,Upper to lower(Vice verrsa),,,0,
 SEND,esc + $,end_of_line,,,0,
 SEND,esc + 0 (zero),Begin_of_line,,,0,
 SEND,esc + 20G,Goto_20_line_of_File,,,0,
 SEND,:%s/FindMe/ReplaceME/g,Find_Replace,,,0,
 SEND,##http://www.cyberciti.biz/faq/linux-unix-vim-find-replace-text-string-words/ \\n,website,,,0,
Z:"Unix_Com"=0000000b
 SEND,find . -size +1000000k,Find Files > 1G,,,
 SEND,#find . -name tnsnames.ora (copy and paste after changing file name),find_file,,,
 SEND,### find . -name '*.trc' -mtime +30  -exec rm {} \\;\r\n### find . -name '*.xml' -mtime +30  -exec rm {} \\;,delete trc files > 30 days keep '\\' before ;,,,0,
 SEND,cp /dev/null <filename>,make file null(Run after Checking),,,
 SEND,##find / -name init.ora 2> /dev/null,find_specific_file_from_root,,,0,
 SEND,################# cat g_stats_1_18_ORCL_1.sh \\n\r\n#################  \\n\r\n################# sqlplus / as sysdba <<EOF \\n\r\n################# set head off \\n\r\n################# ################# conn / as sysdba \\n\r\n################# set serveroutput on \\n\r\n################# set timing on \\n\r\n################# set time on \\n\r\n################# set echo on \\n\r\n################# column tm new_value file_time noprint \\n\r\n################# select to_char(sysdate\, 'YYYYMMDD') tm from dual ; \\n\r\n################# prompt &file_time \\n\r\n################# spool g_stats_1_ORCL1_&file_time.log \\n\r\n################# select sysdate from dual; \\n\r\n#################  \\n\r\n################# spool off \\n\r\n################# set timing off \\n\r\n################# set serveroutput off \\n\r\n################# exit; \\n\r\n#################  \\n\r\n#################  \\n\r\n################# EOF \\n\r\n#################  \\n\r\n################# chmod 777 g_stats_1_5_ORCL_3.sh \\n\r\n################# nohup ./g_stats_1_5_ORCL_3.sh & \\n,example_to_run_File_in_Background,,,0,
 SEND,###telnet <IP ADDRESS> 1521,Checking_Telnet,,,0,
 SEND,####----$ cat run_any_sql_10sec.ksh 										\\n\r\n####----#!/bin/ksh                                                          \\n\r\n####----                                                                    \\n\r\n####----SQL_FILE=$1                                                         \\n\r\n####----TMP_FILE=/tmp/$$.out                                                \\n\r\n####----TMP_FILE_ALL=/tmp/$$.all.out                                        \\n\r\n####----                                                                    \\n\r\n####----for i in {1..10000}                                                 \\n\r\n####----do                                                                  \\n\r\n####----${ORACLE_HOME}/bin/sqlplus -s -l /nolog << EOF > ${TMP_FILE}        \\n\r\n####----Connect / as sysdba                                                 \\n\r\n####----SET SERVEROUT ON ECHO ON                                            \\n\r\n####----COL SEGMENT_NAME FOR A30                                            \\n\r\n####----COL TABLE_NAME FOR A30                                              \\n\r\n####----COL COLUMN_NAME FOR A30                                             \\n\r\n####----COL OWNER FOR A10                                                   \\n\r\n####----COL SQL_TEXT FOR A45                                                \\n\r\n####----COL INDEX_NAME FOR A30                                              \\n\r\n####----select to_char(sysdate\,'DD-MON-YYYY HH24:MI:SS') from dual;         \\n\r\n####----start ${SQL_FILE};                                                  \\n\r\n####----EXIT;                                                               \\n\r\n####----EOF                                                                 \\n\r\n####----cat ${TMP_FILE}  >> ${TMP_FILE_ALL}                                 \\n\r\n####----cat ${TMP_FILE}                                                     \\n\r\n####----sleep 10                                                            \\n\r\n####----done                                                                \\n\r\n####./run_any_sql a.sql                                                     \\n,Run_AnySQL_ksh_Display_in_FG,,,0,
 SEND,### grep -R 'vinod' /u01/app/oracle/dba,find_string_in_Direc,,,0,
 SEND,### tar xvfz Alert_SEPATGD4_02May17.tar.gz,Unzip-untar,,,0,
 SEND,## sed -i -e "1d" dataload.txt,delete_first_line_infile,,,0,1,
Z:"Unix_Copy"=00000006
 SEND,cp tnsnames.ora tnsnames.ora.`date +"%Y%m%d%H%M"`,Bkup Tnsnames,,,
 SEND,crontab -l >  crontab_orig_`date '+%m%d_%H%M'`,crontab_Bkp,,,
 SEND,tail -15000 listener.log  > listener_log_`hostname`_`date '+%m%d_%H%M'`.log,listener_bkp_15k,,,
 SEND,_`hostname`_`date '+%m%d_%H%M'`.log,Suffix_Date,,,
 SEND,################# cat g_stats_1_18_ORCL_1.sh \\n\r\n#################  \\n\r\n################# sqlplus / as sysdba <<EOF \\n\r\n################# set head off \\n\r\n################# ################# conn / as sysdba \\n\r\n################# set serveroutput on \\n\r\n################# set timing on \\n\r\n################# set time on \\n\r\n################# set echo on \\n\r\n################# column tm new_value file_time noprint \\n\r\n################# select to_char(sysdate\, 'YYYYMMDD') tm from dual ; \\n\r\n################# prompt &file_time \\n\r\n################# spool g_stats_1_ORCL1_&file_time.log \\n\r\n################# select sysdate from dual; \\n\r\n#################  \\n\r\n################# spool off \\n\r\n################# set timing off \\n\r\n################# set serveroutput off \\n\r\n################# exit; \\n\r\n#################  \\n\r\n#################  \\n\r\n################# EOF \\n\r\n#################  \\n\r\n################# chmod 777 g_stats_1_5_ORCL_3.sh \\n\r\n################# nohup ./g_stats_1_5_ORCL_3.sh & \\n,example_to_run_File_in_Background,,,0,
 SEND,--create pfile='/local/home/oracle/pfile_bkp/ORCL01_init.bkp' from spfile;,spfile_bkp,,,0,
Z:"Unix_grep"=00000001
 SEND,## grep -B3 ORA-01555 *alert*,grep_4lines_inFile,,,0,1,
Z:"Unix_Kill"=00000001
 SEND,##ps -ef|grep 'LOCAL=NO' | awk -F' ' ' { print $2 }' | xargs kill -NINE,Kill_Connections_LOCAL=NO,,,0,
Z:"Unix_Process"=00000001
 SEND,prompt "Please Enter The UNIX Process ID"  \\n\r\nset pagesize 50000  \\n\r\nset linesize 30000  \\n\r\nset long 500000  \\n\r\nset head off  \\n\r\nselect  \\n\r\ns.username su\,  \\n\r\nsubstr(sa.sql_text\,1\,540) txt  \\n\r\nfrom v$process p\,  \\n\r\nv$session s\,  \\n\r\nv$sqlarea sa  \\n\r\nwhere p.addr=s.paddr  \\n\r\nand s.username is not null  \\n\r\nand s.sql_address=sa.address(+)  \\n\r\nand s.sql_hash_value=sa.hash_value(+)  \\n\r\nand spid=&SPID;  \\n\r\n,unix_pid_to_sqltext,,,
Z:"Util"=00000002
 SEND,alter session set nls_date_format='MM/DD/YYYY HH24:MI:SS';,format,,,
 SEND,SELECT RUN_DATE\, COUNT(1) SESS FROM DBA_UTIL.UTIL_SESSIONS WHERE RUN_DATE >= SYSDATE-1 GROUP BY RUN_DATE;,Util_count,,,
Z:"v$parameter"=00000008
 SEND,col name for a50 \\n\r\nset linesize 300 \\n\r\ncol value for a40  \\n\r\nselect name\,value from v$parameter where name like '%sga%'; \\n\r\n\r\nselect &sga/1024/1024/1024 GB from dual; \\n,SGA,,,
 SEND,col name for a50 \\n\r\nset linesize 300 \\n\r\ncol value for a40  \\n\r\nselect name\,value from v$parameter where name like '%sga_target%'; \\n\r\n\r\nselect &sga_target/1024/1024/1024 GB from dual; \\n\r\n\r\n,sga_target,,,
 SEND,col name for a50 \\n\r\nset linesize 300 \\n\r\ncol value for a40  \\n\r\nselect name\,value from v$parameter where name like '%pga_aggregate_target%'; \\n\r\nselect &pga_aggregate_target/1024/1024/1024 GB from dual; \\n,pga_aggregate_target,,,
 SEND,set linesize 300 \\n\r\nselect * from gv$resource_limit where RESOURCE_NAME = 'processes' order by 1; \\n,Processes,,,
 SEND,!top | grep Memory,Server Memory,,,
 SEND,\r\nset linesize 300 \\n\r\ncol resource_name for a50 \\n\r\n\r\nSELECT Instance_number\,RESOURCE_NAME\, MAX(MAX_UTILIZATION) MAX_PROCESSES FROM DBA_HIST_RESOURCE_LIMIT WHERE RESOURCE_NAME = 'processes' \\n\r\nGROUP BY instance_number\,RESOURCE_NAME; \\n\r\n\r\nselect * from gv$resource_limit where resource_name = 'processes'; \\n,Max_Processes,,,0,
 SEND,set linesize 300 \\n\r\ncol name for a30 \\n\r\ncol value for a30 \\n\r\nselect inst_id\,NAME\,VALUE/1024/1024/1024 Value_in_GB from gv$parameter where name in ('sga_max_size'\,'sga_target'\,'memory_target') order by 1;  \\n,GV_sga_memory,,,0,
 SEND, select * from nls_database_parameters  where parameter='NLS_CHARACTERSET';\r\n,Check_DB_Char_Set,,,0,1,
Z:"sar"=00000002
 SEND,## for ((;;)) do sar 2 30; sleep 10; done,sar_for_CPU,,,0,1,
 SEND,## free -m -s 5,free_memory,,,0,1,
Z:"Patching-2"=00000001
 SEND,## /sbin/fuser <file name>,Chk_Act_proc_For_File,,,0,1,
Z:"Container_DB"=0000000c
 SEND,show pdbs \\n,pdb_list,,,0,1,
 SEND,show con_id \\n,sho_con_id,,,0,1,
 SEND,show con_name \\n,sho_con_name,,,0,1,
 SEND,alter session set container=&plugname;\\n,PDB_session_modify,,,0,1,
 SEND,conn / as sysdba \\n,conn_sys,,,0,1,
 SEND,--alter pluggable database &plugname open; \\n,plug_open,,,0,1,
 SEND,--alter pluggable database &plugname close; \\n,plug_close,,,0,1,
 SEND,--alter pluggable database all open; \\n,pdb_all_open,,,0,1,
 SEND,--alter pluggable database all close; \\n,pdb_all_close,,,0,1,
 SEND,set pages 500 lines 500 \\n col name for a15 \\n\r\ncol OPEN_TIME for a35 \\n\r\nselect NAME\,DBID\,CON_ID\,OPEN_MODE\,RESTRICTED\,OPEN_TIME\,CREATE_SCN\,TOTAL_SIZE/1024/1024 AS pdb_size from v$pdbs; \\n,v$pdbs,,,0,1,
 SEND,SELECT CDB FROM V$DATABASE; \\n,cdb info,,,0,1,
 SEND,set linesize 300 \\n\r\nselect name||' - '||instance_name||'@'||host_name||' - '||DB_UNIQUE_NAME||' - '||version||' - '||open_mode||' - '||to_char(startup_time\,'DD-MON-YYYY HH24:MI:SS') || ' - '|| database_role||'-'||CDB from v$database\, v$instance; \\n,CDB_instance_INFO,,,0,1,
Z:"Cont_tablespace"=00000000
Z:"CONT_tablespaces"=00000002
 SEND,select TABLESPACE_NAME\,BLOCK_SIZE\,STATUS\,CONTENTS\,CON_ID from cdb_tablespaces;\\n ,cdb_ts,,,0,1,
 SEND,select TABLESPACE_NAME\,BLOCK_SIZE\,STATUS\,CONTENTS\,CON_ID from cdb_tablespaces where CON_ID=&con_id; \\n,cdb_ts_pdbs,,,0,1,
Z:"CON_datafiles"=00000002
 SEND,show pdbs \\n,pdb_list,,,0,1,
 SEND,col name for a50 \\n select name from v$datafile where con_id =&number; \\n,v$datafile,,,0,1,
Z:"MySQL_connection"=0000000a
 SEND,mysql -uroot -p\\n \r\n,root_conn,,,0,1,
 SEND,service mysqld status \\n,MySQL_status,,,0,1,
 SEND, find / -name mysql \\n,Check_mysql_Runn,,,0,1,
 SEND,mysqladmin -u root -p ping,To Check mysql is alive,,,0,1,
 SEND,show processlist;\\n,Show processlist,,,0,1,
 SEND,show status like '%max%connection%';\\n,Max_used_Connections,,,0,1,
 SEND,show variables like 'max_connections';\\n,Max_connection,,,0,1,
 SEND,select count(*) from information_schema.processlist;\\n,No of connected users,,,0,1,
 SEND,select count(*) from information_schema.processlist where state ='sleep'; \\n,To check sleep users,,,0,1,
 SEND,select count(*) from information_schema.processlist where state <> 'sleep';\\n,To check non-sleep user,,,0,1,
Z:"MySQL_DB_Information"=00000008
 SEND,show databases;\\n,Show_DB,,,0,1,
 SEND,select database();\\n,Current DB/SCHEMA,,,0,1,
 SEND,select version();\\n,DB VERSION,,,0,1,
 SEND,status \\n,STATUS,,,0,1,
 SEND,show variables like '%read_only%'; \\n,DB_MODE ,,,0,1,
 SEND,select user\,host\,account_locked\,password_expired from mysql.user;\\n,USERS_INFO,,,0,1,
 SEND,mysqladmin -uroot -p uptime ,uptime,,,0,1,
 SEND,show variables like '%server_id%'; \\n,Server_ID,,,0,1,
Z:"MySQL_ENGINES"=00000005
 SEND,show engines;\\n,show Engines,,,0,1,
 SEND,show variables like 'default_storage_engine';\\n,Default Engine,,,0,1,
 SEND,show variables like 'default_tmp_storage_engine';\\n,Deafult_temp_storage_engine,,,0,1,
 SEND,show variables like '%Storage%';\\n,All Default engines,,,0,1,
 SEND,show engine innodb status \\G \\n,Check InnoDB status,,,0,1,
Z:"MySQL_LOGFILES"=00000006
 SEND,show variables like '%log_error%';\\n,ERROR LOG,,,0,1,
 SEND,show variables like '%slow%';\\n,SLOW LOG,,,0,1,
 SEND,show variables like '%long%';\\n,LONG QUERY TIME,,,0,1,
 SEND,show binary logs;\\n,BINARY LOGS,,,0,1,
 SEND,show master status;\\n,Master Binlog status,,,0,1,
 SEND,show variables like '%gen%';\\n,GEN LOG,,,0,1,
Z:"MySQL_FLUSH"=00000006
 SEND, mysqladmin -u root -p flush-hosts,flush_hosts,,,0,1,
 SEND,mysqladmin -u root -p flush-tables,flush_tables,,,0,1,
 SEND,mysqladmin -u root -p flush-threads,flush_threads,,,0,1,
 SEND,mysqladmin -u root -p flush-logs,flush_logs,,,0,1,
 SEND,mysqladmin -u root -p flush-privileges,flush_privs,,,0,1,
 SEND,mysqladmin -u root -p flush-status\r\n,flush_status,,,0,1,
Z:"MySQL_REPLICATION"=00000003
 SEND,--mysqladmin -uroot -p start-slave \\n,Start_slave,,,0,1,
 SEND,--mysqladmin -uroot -p stop-slave \\n,Stop_slave,,,0,7,
 SEND,show slave status \\ G,Status of Slave,,,0,1,
Z:"MySQL_USER"=00000003
 SEND,--Your password should satisfy policy requirements 1 Upper case\, 1 Lower case \,1 Special symbol \, Minimum of 8 charecters  \\n\r\n\r\n\r\n--create user username identified by 'password';\\n,Create user,,,0,1,
 SEND,Drop user username; \\n,Drop user,,,0,7,
 SEND,--grant all privileges on *.* to username@localhost identified by 'Passwd'; \\n,Create user_all privs,,,0,1,
Z:"MySQL_tables"=0000000a
 SEND,show tables; \\n,show tables,,,0,1,
 SEND,show table status\\G,status_table,,,0,1,
 SEND,select engine from information_schema.tables where table_name='test1';\\n,Engine_table,,,0,1,
 SEND,select engine \,table_name\,table_rows  from information_schema.tables where TABLE_SCHEMA='AJAY_MyISAM';,TABLE_SCHEMA,,,0,1,
 SEND,desc information_schema.tables;\\n,desc tables,,,0,1,
 SEND,lock tables Tablename read;\\n,Lock_table_read,,,0,1,
 SEND,unlock tables;\\n,Unlock_table,,,0,1,
 SEND,show open tables from AJAY_MyISAM;\\n,Locked tables_list,,,0,1,
 SEND,check table test1;\\n,check_table_error,,,0,1,
 SEND,repair table tablename;\\n,Repair_table,,,0,1,
Z:"MySQL_FILES_LOCATIONS"=00000001
 SEND,show variables like '%datadir%';\\n,datadir,,,0,1,
Z:"MySQL_help"=00000002
 SEND,help contents \\n,Help contents,,,0,1,
 SEND,show warnings \\n,Show warnings,,,0,1,
